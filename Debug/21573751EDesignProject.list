
21573751EDesignProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080035a4  080035a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a4  080035a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080035ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000010  080035bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080035bc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000709d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e3  00000000  00000000  000270d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  000287c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  00028f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013479  00000000  00000000  00029658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b0e  00000000  00000000  0003cad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b513  00000000  00000000  000435df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aeaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000aeb70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080034d4 	.word	0x080034d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080034d4 	.word	0x080034d4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t adcVal = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	837b      	strh	r3, [r7, #26]
	_Bool config = 1;
 8000156:	2301      	movs	r3, #1
 8000158:	767b      	strb	r3, [r7, #25]
	ms = 0;
 800015a:	4bc3      	ldr	r3, [pc, #780]	; (8000468 <main+0x31c>)
 800015c:	2200      	movs	r2, #0
 800015e:	601a      	str	r2, [r3, #0]
	uint32_t now = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	617b      	str	r3, [r7, #20]
	uint8_t xpos = 4;
 8000164:	2304      	movs	r3, #4
 8000166:	77fb      	strb	r3, [r7, #31]
	uint8_t ypos = 4;
 8000168:	2304      	movs	r3, #4
 800016a:	77bb      	strb	r3, [r7, #30]
	uint8_t xpospre = 4;
 800016c:	2304      	movs	r3, #4
 800016e:	74fb      	strb	r3, [r7, #19]
	uint8_t ypospre = 4;
 8000170:	2304      	movs	r3, #4
 8000172:	74bb      	strb	r3, [r7, #18]
	_Bool gamePlay = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	777b      	strb	r3, [r7, #29]
	uint8_t posStr[] = "$300_____\n";
 8000178:	4abc      	ldr	r2, [pc, #752]	; (800046c <main+0x320>)
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	ca07      	ldmia	r2, {r0, r1, r2}
 800017e:	c303      	stmia	r3!, {r0, r1}
 8000180:	801a      	strh	r2, [r3, #0]
 8000182:	3302      	adds	r3, #2
 8000184:	0c12      	lsrs	r2, r2, #16
 8000186:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 ff8e 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 fa5e 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 fb14 	bl	80007bc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000194:	f000 faaa 	bl	80006ec <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000198:	f000 fae6 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if (config) {
 800019c:	7e7b      	ldrb	r3, [r7, #25]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	f000 81af 	beq.w	8000502 <main+0x3b6>
	  HAL_Delay(100);
 80001a4:	2064      	movs	r0, #100	; 0x64
 80001a6:	f000 ffe1 	bl	800116c <HAL_Delay>
	  now = ms;
 80001aa:	4baf      	ldr	r3, [pc, #700]	; (8000468 <main+0x31c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	617b      	str	r3, [r7, #20]
 	  HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2102      	movs	r1, #2
 80001b4:	48ae      	ldr	r0, [pc, #696]	; (8000470 <main+0x324>)
 80001b6:	f001 ff15 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001c0:	48ab      	ldr	r0, [pc, #684]	; (8000470 <main+0x324>)
 80001c2:	f001 ff0f 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001cc:	48a8      	ldr	r0, [pc, #672]	; (8000470 <main+0x324>)
 80001ce:	f001 ff09 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d8:	48a5      	ldr	r0, [pc, #660]	; (8000470 <main+0x324>)
 80001da:	f001 ff03 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2110      	movs	r1, #16
 80001e2:	48a4      	ldr	r0, [pc, #656]	; (8000474 <main+0x328>)
 80001e4:	f001 fefe 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ee:	48a0      	ldr	r0, [pc, #640]	; (8000470 <main+0x324>)
 80001f0:	f001 fef8 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fa:	489f      	ldr	r0, [pc, #636]	; (8000478 <main+0x32c>)
 80001fc:	f001 fef2 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	489c      	ldr	r0, [pc, #624]	; (8000478 <main+0x32c>)
 8000208:	f001 feec 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S21573751\n", 10, 100);
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	220a      	movs	r2, #10
 8000210:	499a      	ldr	r1, [pc, #616]	; (800047c <main+0x330>)
 8000212:	489b      	ldr	r0, [pc, #620]	; (8000480 <main+0x334>)
 8000214:	f002 fcfb 	bl	8002c0e <HAL_UART_Transmit>

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S10______\n", 10, 100);
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	220a      	movs	r2, #10
 800021c:	4999      	ldr	r1, [pc, #612]	; (8000484 <main+0x338>)
 800021e:	4898      	ldr	r0, [pc, #608]	; (8000480 <main+0x334>)
 8000220:	f002 fcf5 	bl	8002c0e <HAL_UART_Transmit>
 	  HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022a:	4892      	ldr	r0, [pc, #584]	; (8000474 <main+0x328>)
 800022c:	f001 feda 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<1000){
 8000230:	bf00      	nop
 8000232:	4b8d      	ldr	r3, [pc, #564]	; (8000468 <main+0x31c>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800023e:	d3f8      	bcc.n	8000232 <main+0xe6>
  	  }
  	  HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	488b      	ldr	r0, [pc, #556]	; (8000474 <main+0x328>)
 8000248:	f001 fecc 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<2000){
 800024c:	bf00      	nop
 800024e:	4b86      	ldr	r3, [pc, #536]	; (8000468 <main+0x31c>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800025a:	d3f8      	bcc.n	800024e <main+0x102>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S11______\n", 10, 100);
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	220a      	movs	r2, #10
 8000260:	4989      	ldr	r1, [pc, #548]	; (8000488 <main+0x33c>)
 8000262:	4887      	ldr	r0, [pc, #540]	; (8000480 <main+0x334>)
 8000264:	f002 fcd3 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2140      	movs	r1, #64	; 0x40
 800026c:	4881      	ldr	r0, [pc, #516]	; (8000474 <main+0x328>)
 800026e:	f001 feb9 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<3000){
 8000272:	bf00      	nop
 8000274:	4b7c      	ldr	r3, [pc, #496]	; (8000468 <main+0x31c>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000280:	4293      	cmp	r3, r2
 8000282:	d9f7      	bls.n	8000274 <main+0x128>
  	  }
  	  HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	487a      	ldr	r0, [pc, #488]	; (8000474 <main+0x328>)
 800028a:	f001 feab 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<4000){
 800028e:	bf00      	nop
 8000290:	4b75      	ldr	r3, [pc, #468]	; (8000468 <main+0x31c>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800029c:	d3f8      	bcc.n	8000290 <main+0x144>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S12______\n", 10, 100);
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	220a      	movs	r2, #10
 80002a2:	497a      	ldr	r1, [pc, #488]	; (800048c <main+0x340>)
 80002a4:	4876      	ldr	r0, [pc, #472]	; (8000480 <main+0x334>)
 80002a6:	f002 fcb2 	bl	8002c0e <HAL_UART_Transmit>
 	  HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2120      	movs	r1, #32
 80002ae:	4871      	ldr	r0, [pc, #452]	; (8000474 <main+0x328>)
 80002b0:	f001 fe98 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<5000){
 80002b4:	bf00      	nop
 80002b6:	4b6c      	ldr	r3, [pc, #432]	; (8000468 <main+0x31c>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	f241 3287 	movw	r2, #4999	; 0x1387
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d9f7      	bls.n	80002b6 <main+0x16a>
  	  }
  	  HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2120      	movs	r1, #32
 80002ca:	486a      	ldr	r0, [pc, #424]	; (8000474 <main+0x328>)
 80002cc:	f001 fe8a 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<6000){
 80002d0:	bf00      	nop
 80002d2:	4b65      	ldr	r3, [pc, #404]	; (8000468 <main+0x31c>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	f241 726f 	movw	r2, #5999	; 0x176f
 80002de:	4293      	cmp	r3, r2
 80002e0:	d9f7      	bls.n	80002d2 <main+0x186>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S13______\n", 10, 100);
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	220a      	movs	r2, #10
 80002e6:	496a      	ldr	r1, [pc, #424]	; (8000490 <main+0x344>)
 80002e8:	4865      	ldr	r0, [pc, #404]	; (8000480 <main+0x334>)
 80002ea:	f002 fc90 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f4:	4860      	ldr	r0, [pc, #384]	; (8000478 <main+0x32c>)
 80002f6:	f001 fe75 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<7000){
 80002fa:	bf00      	nop
 80002fc:	4b5a      	ldr	r3, [pc, #360]	; (8000468 <main+0x31c>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000308:	4293      	cmp	r3, r2
 800030a:	d9f7      	bls.n	80002fc <main+0x1b0>
  	  }
  	  HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000312:	4859      	ldr	r0, [pc, #356]	; (8000478 <main+0x32c>)
 8000314:	f001 fe66 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<8000){
 8000318:	bf00      	nop
 800031a:	4b53      	ldr	r3, [pc, #332]	; (8000468 <main+0x31c>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000326:	d3f8      	bcc.n	800031a <main+0x1ce>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S14______\n", 10, 100);
 8000328:	2364      	movs	r3, #100	; 0x64
 800032a:	220a      	movs	r2, #10
 800032c:	4959      	ldr	r1, [pc, #356]	; (8000494 <main+0x348>)
 800032e:	4854      	ldr	r0, [pc, #336]	; (8000480 <main+0x334>)
 8000330:	f002 fc6d 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	484f      	ldr	r0, [pc, #316]	; (8000478 <main+0x32c>)
 800033c:	f001 fe52 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<9000){
 8000340:	bf00      	nop
 8000342:	4b49      	ldr	r3, [pc, #292]	; (8000468 <main+0x31c>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	f242 3227 	movw	r2, #8999	; 0x2327
 800034e:	4293      	cmp	r3, r2
 8000350:	d9f7      	bls.n	8000342 <main+0x1f6>
  	  }
  	  HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000358:	4847      	ldr	r0, [pc, #284]	; (8000478 <main+0x32c>)
 800035a:	f001 fe43 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<10000){
 800035e:	bf00      	nop
 8000360:	4b41      	ldr	r3, [pc, #260]	; (8000468 <main+0x31c>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	f242 720f 	movw	r2, #9999	; 0x270f
 800036c:	4293      	cmp	r3, r2
 800036e:	d9f7      	bls.n	8000360 <main+0x214>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S15______\n", 10, 100);
 8000370:	2364      	movs	r3, #100	; 0x64
 8000372:	220a      	movs	r2, #10
 8000374:	4948      	ldr	r1, [pc, #288]	; (8000498 <main+0x34c>)
 8000376:	4842      	ldr	r0, [pc, #264]	; (8000480 <main+0x334>)
 8000378:	f002 fc49 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000382:	483b      	ldr	r0, [pc, #236]	; (8000470 <main+0x324>)
 8000384:	f001 fe2e 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<11000){
 8000388:	bf00      	nop
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <main+0x31c>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8000396:	4293      	cmp	r3, r2
 8000398:	d9f7      	bls.n	800038a <main+0x23e>
  	  }
  	  HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a0:	4833      	ldr	r0, [pc, #204]	; (8000470 <main+0x324>)
 80003a2:	f001 fe1f 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<12000){
 80003a6:	bf00      	nop
 80003a8:	4b2f      	ldr	r3, [pc, #188]	; (8000468 <main+0x31c>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	1ad3      	subs	r3, r2, r3
 80003b0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d9f7      	bls.n	80003a8 <main+0x25c>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S16______\n", 10, 100);
 80003b8:	2364      	movs	r3, #100	; 0x64
 80003ba:	220a      	movs	r2, #10
 80003bc:	4937      	ldr	r1, [pc, #220]	; (800049c <main+0x350>)
 80003be:	4830      	ldr	r0, [pc, #192]	; (8000480 <main+0x334>)
 80003c0:	f002 fc25 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ca:	4829      	ldr	r0, [pc, #164]	; (8000470 <main+0x324>)
 80003cc:	f001 fe0a 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<13000){
 80003d0:	bf00      	nop
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <main+0x31c>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80003de:	4293      	cmp	r3, r2
 80003e0:	d9f7      	bls.n	80003d2 <main+0x286>
  	  }
  	  HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e8:	4821      	ldr	r0, [pc, #132]	; (8000470 <main+0x324>)
 80003ea:	f001 fdfb 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<14000){
 80003ee:	bf00      	nop
 80003f0:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <main+0x31c>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	f243 62af 	movw	r2, #13999	; 0x36af
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d9f7      	bls.n	80003f0 <main+0x2a4>
  	  }

  	  HAL_UART_Transmit(&huart2,(uint8_t*) "S17______\n", 10, 100);
 8000400:	2364      	movs	r3, #100	; 0x64
 8000402:	220a      	movs	r2, #10
 8000404:	4926      	ldr	r1, [pc, #152]	; (80004a0 <main+0x354>)
 8000406:	481e      	ldr	r0, [pc, #120]	; (8000480 <main+0x334>)
 8000408:	f002 fc01 	bl	8002c0e <HAL_UART_Transmit>
  	  HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2104      	movs	r1, #4
 8000410:	4817      	ldr	r0, [pc, #92]	; (8000470 <main+0x324>)
 8000412:	f001 fde7 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  while((ms-now)<15000){
 8000416:	bf00      	nop
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <main+0x31c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000424:	4293      	cmp	r3, r2
 8000426:	d9f7      	bls.n	8000418 <main+0x2cc>
  	  }
  	  HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4810      	ldr	r0, [pc, #64]	; (8000470 <main+0x324>)
 800042e:	f001 fdd9 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2102      	movs	r1, #2
 8000436:	480e      	ldr	r0, [pc, #56]	; (8000470 <main+0x324>)
 8000438:	f001 fdd4 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <main+0x324>)
 8000444:	f001 fdce 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <main+0x324>)
 8000450:	f001 fdc8 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <main+0x324>)
 800045c:	f001 fdc2 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2110      	movs	r1, #16
 8000464:	e01e      	b.n	80004a4 <main+0x358>
 8000466:	bf00      	nop
 8000468:	200000a4 	.word	0x200000a4
 800046c:	08003558 	.word	0x08003558
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40011000 	.word	0x40011000
 8000478:	40010800 	.word	0x40010800
 800047c:	080034ec 	.word	0x080034ec
 8000480:	200000ac 	.word	0x200000ac
 8000484:	080034f8 	.word	0x080034f8
 8000488:	08003504 	.word	0x08003504
 800048c:	08003510 	.word	0x08003510
 8000490:	0800351c 	.word	0x0800351c
 8000494:	08003528 	.word	0x08003528
 8000498:	08003534 	.word	0x08003534
 800049c:	08003540 	.word	0x08003540
 80004a0:	0800354c 	.word	0x0800354c
 80004a4:	485d      	ldr	r0, [pc, #372]	; (800061c <main+0x4d0>)
 80004a6:	f001 fd9d 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	485b      	ldr	r0, [pc, #364]	; (8000620 <main+0x4d4>)
 80004b2:	f001 fd97 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <main+0x4d8>)
 80004be:	f001 fd91 	bl	8001fe4 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c8:	4856      	ldr	r0, [pc, #344]	; (8000624 <main+0x4d8>)
 80004ca:	f001 fd8b 	bl	8001fe4 <HAL_GPIO_WritePin>

  	  while((ms-now)<16000){
 80004ce:	bf00      	nop
 80004d0:	4b55      	ldr	r3, [pc, #340]	; (8000628 <main+0x4dc>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80004dc:	d3f8      	bcc.n	80004d0 <main+0x384>
  	  }

  	  displayHome();
 80004de:	f000 fa29 	bl	8000934 <displayHome>
  	  Up = 0;
 80004e2:	4b52      	ldr	r3, [pc, #328]	; (800062c <main+0x4e0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
  	  Down = 0;
 80004e8:	4b51      	ldr	r3, [pc, #324]	; (8000630 <main+0x4e4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
  	  Left = 0;
 80004ee:	4b51      	ldr	r3, [pc, #324]	; (8000634 <main+0x4e8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
  	  Right = 0;
 80004f4:	4b50      	ldr	r3, [pc, #320]	; (8000638 <main+0x4ec>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
  	  Middle = 0;
 80004fa:	4b50      	ldr	r3, [pc, #320]	; (800063c <main+0x4f0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e010      	b.n	8000524 <main+0x3d8>
    }
    else {
  	  displayHome();
 8000502:	f000 fa17 	bl	8000934 <displayHome>
  	  Up = 0;
 8000506:	4b49      	ldr	r3, [pc, #292]	; (800062c <main+0x4e0>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
  	  Down = 0;
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <main+0x4e4>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
  	  Left = 0;
 8000512:	4b48      	ldr	r3, [pc, #288]	; (8000634 <main+0x4e8>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
  	  Right = 0;
 8000518:	4b47      	ldr	r3, [pc, #284]	; (8000638 <main+0x4ec>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
  	  Middle = 0;
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <main+0x4f0>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Middle) {
 8000524:	4b45      	ldr	r3, [pc, #276]	; (800063c <main+0x4f0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00f      	beq.n	800054c <main+0x400>
		  now = ms;
 800052c:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <main+0x4dc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	617b      	str	r3, [r7, #20]
		  if (gamePlay) {
 8000532:	7f7b      	ldrb	r3, [r7, #29]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d004      	beq.n	8000542 <main+0x3f6>
			  gamePlay = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	777b      	strb	r3, [r7, #29]
			  displayHome();
 800053c:	f000 f9fa 	bl	8000934 <displayHome>
 8000540:	e001      	b.n	8000546 <main+0x3fa>
		  }
		  else
		  {
			  gamePlay = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	777b      	strb	r3, [r7, #29]
		  }
		  Middle = 0;
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <main+0x4f0>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	  }
	  if (gamePlay)
 800054c:	7f7b      	ldrb	r3, [r7, #29]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0e8      	beq.n	8000524 <main+0x3d8>
	  {
		  now = ms;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <main+0x4dc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	617b      	str	r3, [r7, #20]
		  displayMove(ledMatrix);
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <main+0x4f4>)
 800055a:	f000 fa67 	bl	8000a2c <displayMove>
		  posStr[2] = xpos+48;
 800055e:	7ffb      	ldrb	r3, [r7, #31]
 8000560:	3330      	adds	r3, #48	; 0x30
 8000562:	b2db      	uxtb	r3, r3
 8000564:	71bb      	strb	r3, [r7, #6]
		  posStr[3] = ypos+48;
 8000566:	7fbb      	ldrb	r3, [r7, #30]
 8000568:	3330      	adds	r3, #48	; 0x30
 800056a:	b2db      	uxtb	r3, r3
 800056c:	71fb      	strb	r3, [r7, #7]
		  HAL_UART_Transmit_IT(&huart2, posStr, 10);
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	220a      	movs	r2, #10
 8000572:	4619      	mov	r1, r3
 8000574:	4833      	ldr	r0, [pc, #204]	; (8000644 <main+0x4f8>)
 8000576:	f002 fbe3 	bl	8002d40 <HAL_UART_Transmit_IT>
		  ypospre = ypos;
 800057a:	7fbb      	ldrb	r3, [r7, #30]
 800057c:	74bb      	strb	r3, [r7, #18]
		  xpospre = xpos;
 800057e:	7ffb      	ldrb	r3, [r7, #31]
 8000580:	74fb      	strb	r3, [r7, #19]
		  HAL_ADC_Start(&hadc2);
 8000582:	4831      	ldr	r0, [pc, #196]	; (8000648 <main+0x4fc>)
 8000584:	f000 feec 	bl	8001360 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc2, 100)==HAL_OK){
 8000588:	2164      	movs	r1, #100	; 0x64
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <main+0x4fc>)
 800058c:	f000 ffc2 	bl	8001514 <HAL_ADC_PollForConversion>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d110      	bne.n	80005b8 <main+0x46c>
			  adcVal = HAL_ADC_GetValue(&hadc2);
 8000596:	482c      	ldr	r0, [pc, #176]	; (8000648 <main+0x4fc>)
 8000598:	f001 f8b6 	bl	8001708 <HAL_ADC_GetValue>
 800059c:	4603      	mov	r3, r0
 800059e:	837b      	strh	r3, [r7, #26]
			  ypos = 7-(adcVal/512)%8;
 80005a0:	8b7b      	ldrh	r3, [r7, #26]
 80005a2:	0a5b      	lsrs	r3, r3, #9
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	77bb      	strb	r3, [r7, #30]
			  HAL_ADC_Stop(&hadc2);
 80005b2:	4825      	ldr	r0, [pc, #148]	; (8000648 <main+0x4fc>)
 80005b4:	f000 ff82 	bl	80014bc <HAL_ADC_Stop>
		  }
		  if(Left && xpos>0)
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <main+0x4e8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d006      	beq.n	80005ce <main+0x482>
 80005c0:	7ffb      	ldrb	r3, [r7, #31]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <main+0x482>
		  {
			  xpos -= 1;
 80005c6:	7ffb      	ldrb	r3, [r7, #31]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	77fb      	strb	r3, [r7, #31]
 80005cc:	e009      	b.n	80005e2 <main+0x496>
		  }
		  else if(Right && xpos<7)
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <main+0x4ec>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <main+0x496>
 80005d6:	7ffb      	ldrb	r3, [r7, #31]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d802      	bhi.n	80005e2 <main+0x496>
		  {
			  xpos += 1;
 80005dc:	7ffb      	ldrb	r3, [r7, #31]
 80005de:	3301      	adds	r3, #1
 80005e0:	77fb      	strb	r3, [r7, #31]
		  }
		  Left = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0x4e8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
		  Right = 0;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0x4ec>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
		  ledMatrix[xpospre*8+ypospre] = 0;
 80005ee:	7cfb      	ldrb	r3, [r7, #19]
 80005f0:	00da      	lsls	r2, r3, #3
 80005f2:	7cbb      	ldrb	r3, [r7, #18]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <main+0x4f4>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	54d1      	strb	r1, [r2, r3]
		  ledMatrix[xpos*8+ypos] = 1;
 80005fc:	7ffb      	ldrb	r3, [r7, #31]
 80005fe:	00da      	lsls	r2, r3, #3
 8000600:	7fbb      	ldrb	r3, [r7, #30]
 8000602:	4413      	add	r3, r2
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <main+0x4f4>)
 8000606:	2101      	movs	r1, #1
 8000608:	54d1      	strb	r1, [r2, r3]
		  while(ms-now<100){
 800060a:	bf00      	nop
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <main+0x4dc>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	2b63      	cmp	r3, #99	; 0x63
 8000616:	d9f9      	bls.n	800060c <main+0x4c0>
	  if (Middle) {
 8000618:	e784      	b.n	8000524 <main+0x3d8>
 800061a:	bf00      	nop
 800061c:	40011000 	.word	0x40011000
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40010800 	.word	0x40010800
 8000628:	200000a4 	.word	0x200000a4
 800062c:	200000ab 	.word	0x200000ab
 8000630:	200000aa 	.word	0x200000aa
 8000634:	200000a8 	.word	0x200000a8
 8000638:	20000070 	.word	0x20000070
 800063c:	200000a9 	.word	0x200000a9
 8000640:	2000002c 	.word	0x2000002c
 8000644:	200000ac 	.word	0x200000ac
 8000648:	20000074 	.word	0x20000074

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff32 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fce1 	bl	8002058 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800069c:	f000 faea 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 ff4c 	bl	8002558 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006c6:	f000 fad5 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ca:	2302      	movs	r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f8db 	bl	8002890 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 fac8 	bl	8000c74 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_ADC2_Init+0x74>)
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <MX_ADC2_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_ADC2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_ADC2_Init+0x74>)
 8000716:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800071a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_ADC2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_ADC2_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_ADC2_Init+0x74>)
 800072a:	f000 fd41 	bl	80011b0 <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fa9e 	bl	8000c74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000738:	230d      	movs	r3, #13
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_ADC2_Init+0x74>)
 800074a:	f000 ffe9 	bl	8001720 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000754:	f000 fa8e 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000074 	.word	0x20000074
 8000764:	40012800 	.word	0x40012800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 f9e8 	bl	8002b74 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 fa63 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000ac 	.word	0x200000ac
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b53      	ldr	r3, [pc, #332]	; (8000920 <MX_GPIO_Init+0x164>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a52      	ldr	r2, [pc, #328]	; (8000920 <MX_GPIO_Init+0x164>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b50      	ldr	r3, [pc, #320]	; (8000920 <MX_GPIO_Init+0x164>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <MX_GPIO_Init+0x164>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a4c      	ldr	r2, [pc, #304]	; (8000920 <MX_GPIO_Init+0x164>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b4a      	ldr	r3, [pc, #296]	; (8000920 <MX_GPIO_Init+0x164>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b47      	ldr	r3, [pc, #284]	; (8000920 <MX_GPIO_Init+0x164>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a46      	ldr	r2, [pc, #280]	; (8000920 <MX_GPIO_Init+0x164>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b44      	ldr	r3, [pc, #272]	; (8000920 <MX_GPIO_Init+0x164>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800081e:	4841      	ldr	r0, [pc, #260]	; (8000924 <MX_GPIO_Init+0x168>)
 8000820:	f001 fbe0 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8000824:	2200      	movs	r2, #0
 8000826:	f64f 4106 	movw	r1, #64518	; 0xfc06
 800082a:	483f      	ldr	r0, [pc, #252]	; (8000928 <MX_GPIO_Init+0x16c>)
 800082c:	f001 fbda 	bl	8001fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <MX_GPIO_Init+0x170>)
 8000838:	f001 fbd4 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_GPIO_Init+0x174>)
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4835      	ldr	r0, [pc, #212]	; (8000924 <MX_GPIO_Init+0x168>)
 8000850:	f001 fa6e 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000854:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2302      	movs	r3, #2
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4619      	mov	r1, r3
 800086c:	482d      	ldr	r0, [pc, #180]	; (8000924 <MX_GPIO_Init+0x168>)
 800086e:	f001 fa5f 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000872:	2339      	movs	r3, #57	; 0x39
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_GPIO_Init+0x174>)
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	4828      	ldr	r0, [pc, #160]	; (8000928 <MX_GPIO_Init+0x16c>)
 8000886:	f001 fa53 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 800088a:	f64f 4306 	movw	r3, #64518	; 0xfc06
 800088e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2302      	movs	r3, #2
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4821      	ldr	r0, [pc, #132]	; (8000928 <MX_GPIO_Init+0x16c>)
 80008a4:	f001 fa44 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	481a      	ldr	r0, [pc, #104]	; (800092c <MX_GPIO_Init+0x170>)
 80008c2:	f001 fa35 	bl	8001d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2006      	movs	r0, #6
 80008cc:	f001 f983 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f001 f99c 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	2007      	movs	r0, #7
 80008dc:	f001 f97b 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008e0:	2007      	movs	r0, #7
 80008e2:	f001 f994 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2009      	movs	r0, #9
 80008ec:	f001 f973 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008f0:	2009      	movs	r0, #9
 80008f2:	f001 f98c 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	200a      	movs	r0, #10
 80008fc:	f001 f96b 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000900:	200a      	movs	r0, #10
 8000902:	f001 f984 	bl	8001c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2017      	movs	r0, #23
 800090c:	f001 f963 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000910:	2017      	movs	r0, #23
 8000912:	f001 f97c 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40011000 	.word	0x40011000
 8000928:	40010c00 	.word	0x40010c00
 800092c:	40010800 	.word	0x40010800
 8000930:	10210000 	.word	0x10210000

08000934 <displayHome>:

/* USER CODE BEGIN 4 */
void displayHome()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4838      	ldr	r0, [pc, #224]	; (8000a20 <displayHome+0xec>)
 800093e:	f001 fb51 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	4835      	ldr	r0, [pc, #212]	; (8000a20 <displayHome+0xec>)
 800094a:	f001 fb4b 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000954:	4832      	ldr	r0, [pc, #200]	; (8000a20 <displayHome+0xec>)
 8000956:	f001 fb45 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	482f      	ldr	r0, [pc, #188]	; (8000a20 <displayHome+0xec>)
 8000962:	f001 fb3f 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	482e      	ldr	r0, [pc, #184]	; (8000a24 <displayHome+0xf0>)
 800096c:	f001 fb3a 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000976:	482a      	ldr	r0, [pc, #168]	; (8000a20 <displayHome+0xec>)
 8000978:	f001 fb34 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <displayHome+0xf4>)
 8000984:	f001 fb2e 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <displayHome+0xf4>)
 8000990:	f001 fb28 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <displayHome+0xf0>)
 800099c:	f001 fb22 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <displayHome+0xf0>)
 80009a6:	f001 fb1d 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	481d      	ldr	r0, [pc, #116]	; (8000a24 <displayHome+0xf0>)
 80009b0:	f001 fb18 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	481b      	ldr	r0, [pc, #108]	; (8000a28 <displayHome+0xf4>)
 80009bc:	f001 fb12 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <displayHome+0xf4>)
 80009c8:	f001 fb0c 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <displayHome+0xec>)
 80009d4:	f001 fb06 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <displayHome+0xec>)
 80009e0:	f001 fb00 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <displayHome+0xec>)
 80009ea:	f001 fafb 	bl	8001fe4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <displayHome+0xf0>)
 80009f6:	f001 faf5 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2104      	movs	r1, #4
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <displayHome+0xec>)
 8000a00:	f001 faf0 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2102      	movs	r1, #2
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <displayHome+0xec>)
 8000a0a:	f001 faeb 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <displayHome+0xf4>)
 8000a16:	f001 fae5 	bl	8001fe4 <HAL_GPIO_WritePin>

	return;
 8000a1a:	bf00      	nop
}
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40010800 	.word	0x40010800

08000a2c <displayMove>:

void displayMove(_Bool* matrix)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4889      	ldr	r0, [pc, #548]	; (8000c68 <displayMove+0x23c>)
 8000a42:	f001 facf 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4c:	4886      	ldr	r0, [pc, #536]	; (8000c68 <displayMove+0x23c>)
 8000a4e:	f001 fac9 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a58:	4883      	ldr	r0, [pc, #524]	; (8000c68 <displayMove+0x23c>)
 8000a5a:	f001 fac3 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	4880      	ldr	r0, [pc, #512]	; (8000c68 <displayMove+0x23c>)
 8000a66:	f001 fabd 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	487f      	ldr	r0, [pc, #508]	; (8000c6c <displayMove+0x240>)
 8000a70:	f001 fab8 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	487b      	ldr	r0, [pc, #492]	; (8000c68 <displayMove+0x23c>)
 8000a7c:	f001 fab2 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a86:	487a      	ldr	r0, [pc, #488]	; (8000c70 <displayMove+0x244>)
 8000a88:	f001 faac 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	4877      	ldr	r0, [pc, #476]	; (8000c70 <displayMove+0x244>)
 8000a94:	f001 faa6 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	4873      	ldr	r0, [pc, #460]	; (8000c6c <displayMove+0x240>)
 8000aa0:	f001 faa0 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4870      	ldr	r0, [pc, #448]	; (8000c6c <displayMove+0x240>)
 8000aaa:	f001 fa9b 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	486e      	ldr	r0, [pc, #440]	; (8000c6c <displayMove+0x240>)
 8000ab4:	f001 fa96 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abe:	486c      	ldr	r0, [pc, #432]	; (8000c70 <displayMove+0x244>)
 8000ac0:	f001 fa90 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aca:	4869      	ldr	r0, [pc, #420]	; (8000c70 <displayMove+0x244>)
 8000acc:	f001 fa8a 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	4864      	ldr	r0, [pc, #400]	; (8000c68 <displayMove+0x23c>)
 8000ad8:	f001 fa84 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae2:	4861      	ldr	r0, [pc, #388]	; (8000c68 <displayMove+0x23c>)
 8000ae4:	f001 fa7e 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2104      	movs	r1, #4
 8000aec:	485e      	ldr	r0, [pc, #376]	; (8000c68 <displayMove+0x23c>)
 8000aee:	f001 fa79 	bl	8001fe4 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++){
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e0af      	b.n	8000c58 <displayMove+0x22c>
		for(j=0;j<8;j++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	73bb      	strb	r3, [r7, #14]
 8000afc:	e0a5      	b.n	8000c4a <displayMove+0x21e>
			if(matrix[8*i+j]==1)
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	00da      	lsls	r2, r3, #3
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	4413      	add	r3, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8098 	beq.w	8000c44 <displayMove+0x218>
			{
				switch (i)
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d847      	bhi.n	8000baa <displayMove+0x17e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <displayMove+0xf4>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b41 	.word	0x08000b41
 8000b24:	08000b4f 	.word	0x08000b4f
 8000b28:	08000b5b 	.word	0x08000b5b
 8000b2c:	08000b67 	.word	0x08000b67
 8000b30:	08000b75 	.word	0x08000b75
 8000b34:	08000b83 	.word	0x08000b83
 8000b38:	08000b91 	.word	0x08000b91
 8000b3c:	08000b9f 	.word	0x08000b9f
				{
					case 0:
						HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b46:	4849      	ldr	r0, [pc, #292]	; (8000c6c <displayMove+0x240>)
 8000b48:	f001 fa4c 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b4c:	e02d      	b.n	8000baa <displayMove+0x17e>
					case 1:
						HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4846      	ldr	r0, [pc, #280]	; (8000c6c <displayMove+0x240>)
 8000b54:	f001 fa46 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b58:	e027      	b.n	8000baa <displayMove+0x17e>
					case 2:
						HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4843      	ldr	r0, [pc, #268]	; (8000c6c <displayMove+0x240>)
 8000b60:	f001 fa40 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b64:	e021      	b.n	8000baa <displayMove+0x17e>
					case 3:
						HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4840      	ldr	r0, [pc, #256]	; (8000c70 <displayMove+0x244>)
 8000b6e:	f001 fa39 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b72:	e01a      	b.n	8000baa <displayMove+0x17e>
					case 4:
						HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7a:	483d      	ldr	r0, [pc, #244]	; (8000c70 <displayMove+0x244>)
 8000b7c:	f001 fa32 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b80:	e013      	b.n	8000baa <displayMove+0x17e>
					case 5:
						HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	4837      	ldr	r0, [pc, #220]	; (8000c68 <displayMove+0x23c>)
 8000b8a:	f001 fa2b 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b8e:	e00c      	b.n	8000baa <displayMove+0x17e>
					case 6:
						HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b96:	4834      	ldr	r0, [pc, #208]	; (8000c68 <displayMove+0x23c>)
 8000b98:	f001 fa24 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000b9c:	e005      	b.n	8000baa <displayMove+0x17e>
					case 7:
						HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4831      	ldr	r0, [pc, #196]	; (8000c68 <displayMove+0x23c>)
 8000ba4:	f001 fa1e 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000ba8:	bf00      	nop
				}
				switch (j)
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d849      	bhi.n	8000c44 <displayMove+0x218>
 8000bb0:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <displayMove+0x18c>)
 8000bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb6:	bf00      	nop
 8000bb8:	08000bd9 	.word	0x08000bd9
 8000bbc:	08000be5 	.word	0x08000be5
 8000bc0:	08000bf3 	.word	0x08000bf3
 8000bc4:	08000c01 	.word	0x08000c01
 8000bc8:	08000c0f 	.word	0x08000c0f
 8000bcc:	08000c1b 	.word	0x08000c1b
 8000bd0:	08000c29 	.word	0x08000c29
 8000bd4:	08000c37 	.word	0x08000c37
				{
					case 0:
						HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4822      	ldr	r0, [pc, #136]	; (8000c68 <displayMove+0x23c>)
 8000bde:	f001 fa01 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000be2:	e02f      	b.n	8000c44 <displayMove+0x218>
					case 1:
						HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <displayMove+0x23c>)
 8000bec:	f001 f9fa 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000bf0:	e028      	b.n	8000c44 <displayMove+0x218>
					case 2:
						HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf8:	481b      	ldr	r0, [pc, #108]	; (8000c68 <displayMove+0x23c>)
 8000bfa:	f001 f9f3 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000bfe:	e021      	b.n	8000c44 <displayMove+0x218>
					case 3:
						HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c06:	4818      	ldr	r0, [pc, #96]	; (8000c68 <displayMove+0x23c>)
 8000c08:	f001 f9ec 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000c0c:	e01a      	b.n	8000c44 <displayMove+0x218>
					case 4:
						HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2110      	movs	r1, #16
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <displayMove+0x240>)
 8000c14:	f001 f9e6 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000c18:	e014      	b.n	8000c44 <displayMove+0x218>
					case 5:
						HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <displayMove+0x23c>)
 8000c22:	f001 f9df 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000c26:	e00d      	b.n	8000c44 <displayMove+0x218>
					case 6:
						HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <displayMove+0x244>)
 8000c30:	f001 f9d8 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000c34:	e006      	b.n	8000c44 <displayMove+0x218>
					case 7:
						HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <displayMove+0x244>)
 8000c3e:	f001 f9d1 	bl	8001fe4 <HAL_GPIO_WritePin>
						break;
 8000c42:	bf00      	nop
		for(j=0;j<8;j++){
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73bb      	strb	r3, [r7, #14]
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	f67f af56 	bls.w	8000afe <displayMove+0xd2>
	for(i=0;i<8;i++){
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b07      	cmp	r3, #7
 8000c5c:	f67f af4c 	bls.w	8000af8 <displayMove+0xcc>
				}
			}
		}
	}
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40010800 	.word	0x40010800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_ADC_MspInit+0x6c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d121      	bne.n	8000d48 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_ADC_MspInit+0x70>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration    
    PC3     ------> ADC2_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d34:	2308      	movs	r3, #8
 8000d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_ADC_MspInit+0x74>)
 8000d44:	f000 fff4 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40012800 	.word	0x40012800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011000 	.word	0x40011000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_UART_MspInit+0x98>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d137      	bne.n	8000dec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d86:	61d3      	str	r3, [r2, #28]
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_UART_MspInit+0x9c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dac:	2304      	movs	r3, #4
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <HAL_UART_MspInit+0xa0>)
 8000dc0:	f000 ffb6 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_UART_MspInit+0xa0>)
 8000dd8:	f000 ffaa 	bl	8001d30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2026      	movs	r0, #38	; 0x26
 8000de2:	f000 fef8 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000de6:	2026      	movs	r0, #38	; 0x26
 8000de8:	f000 ff11 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010800 	.word	0x40010800

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <HardFault_Handler+0x4>

08000e12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <BusFault_Handler+0x4>

08000e1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <UsageFault_Handler+0x4>

08000e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ms++;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Handler+0x18>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <SysTick_Handler+0x18>)
 8000e54:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f96d 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000a4 	.word	0x200000a4

08000e64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if ((!Down) && ((ms-bounceLast)>bounceDelay)) {
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <EXTI0_IRQHandler+0x3c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f083 0301 	eor.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00f      	beq.n	8000e96 <EXTI0_IRQHandler+0x32>
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <EXTI0_IRQHandler+0x40>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <EXTI0_IRQHandler+0x44>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <EXTI0_IRQHandler+0x48>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d906      	bls.n	8000e96 <EXTI0_IRQHandler+0x32>
		Down = 1;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <EXTI0_IRQHandler+0x3c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <EXTI0_IRQHandler+0x40>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <EXTI0_IRQHandler+0x44>)
 8000e94:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f001 f8bc 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000aa 	.word	0x200000aa
 8000ea4:	200000a4 	.word	0x200000a4
 8000ea8:	2000006c 	.word	0x2000006c
 8000eac:	20000000 	.word	0x20000000

08000eb0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if ((!Middle) && ((ms-bounceLast)>bounceDelay)) {
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <EXTI1_IRQHandler+0x3c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f083 0301 	eor.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00f      	beq.n	8000ee2 <EXTI1_IRQHandler+0x32>
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <EXTI1_IRQHandler+0x40>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <EXTI1_IRQHandler+0x44>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	1ad2      	subs	r2, r2, r3
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <EXTI1_IRQHandler+0x48>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d906      	bls.n	8000ee2 <EXTI1_IRQHandler+0x32>
		Middle = 1;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <EXTI1_IRQHandler+0x3c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <EXTI1_IRQHandler+0x40>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <EXTI1_IRQHandler+0x44>)
 8000ee0:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f001 f896 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000a9 	.word	0x200000a9
 8000ef0:	200000a4 	.word	0x200000a4
 8000ef4:	2000006c 	.word	0x2000006c
 8000ef8:	20000000 	.word	0x20000000

08000efc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	if ((!Up) && ((ms-bounceLast)>bounceDelay)) {
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <EXTI3_IRQHandler+0x3c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00f      	beq.n	8000f2e <EXTI3_IRQHandler+0x32>
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <EXTI3_IRQHandler+0x40>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <EXTI3_IRQHandler+0x44>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1ad2      	subs	r2, r2, r3
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <EXTI3_IRQHandler+0x48>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d906      	bls.n	8000f2e <EXTI3_IRQHandler+0x32>
		Up = 1;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <EXTI3_IRQHandler+0x3c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <EXTI3_IRQHandler+0x40>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <EXTI3_IRQHandler+0x44>)
 8000f2c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f2e:	2008      	movs	r0, #8
 8000f30:	f001 f870 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000ab 	.word	0x200000ab
 8000f3c:	200000a4 	.word	0x200000a4
 8000f40:	2000006c 	.word	0x2000006c
 8000f44:	20000000 	.word	0x20000000

08000f48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if ((!Left) && ((ms-bounceLast)>bounceDelay)) {
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <EXTI4_IRQHandler+0x3c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00f      	beq.n	8000f7a <EXTI4_IRQHandler+0x32>
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <EXTI4_IRQHandler+0x40>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <EXTI4_IRQHandler+0x44>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1ad2      	subs	r2, r2, r3
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <EXTI4_IRQHandler+0x48>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d906      	bls.n	8000f7a <EXTI4_IRQHandler+0x32>
		Left = 1;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <EXTI4_IRQHandler+0x3c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <EXTI4_IRQHandler+0x40>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <EXTI4_IRQHandler+0x44>)
 8000f78:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f001 f84a 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000a8 	.word	0x200000a8
 8000f88:	200000a4 	.word	0x200000a4
 8000f8c:	2000006c 	.word	0x2000006c
 8000f90:	20000000 	.word	0x20000000

08000f94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if ((!Right) && ((ms-bounceLast)>bounceDelay)) {
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <EXTI9_5_IRQHandler+0x3c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00f      	beq.n	8000fc6 <EXTI9_5_IRQHandler+0x32>
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <EXTI9_5_IRQHandler+0x40>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <EXTI9_5_IRQHandler+0x44>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad2      	subs	r2, r2, r3
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <EXTI9_5_IRQHandler+0x48>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d906      	bls.n	8000fc6 <EXTI9_5_IRQHandler+0x32>
		Right = 1;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <EXTI9_5_IRQHandler+0x3c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <EXTI9_5_IRQHandler+0x40>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <EXTI9_5_IRQHandler+0x44>)
 8000fc4:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	f001 f824 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000070 	.word	0x20000070
 8000fd4:	200000a4 	.word	0x200000a4
 8000fd8:	2000006c 	.word	0x2000006c
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART2_IRQHandler+0x10>)
 8000fe6:	f001 feef 	bl	8002dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000ac 	.word	0x200000ac

08000ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <SystemInit+0x5c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <SystemInit+0x5c>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <SystemInit+0x5c>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	4911      	ldr	r1, [pc, #68]	; (8001050 <SystemInit+0x5c>)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <SystemInit+0x60>)
 800100c:	4013      	ands	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SystemInit+0x5c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <SystemInit+0x5c>)
 8001016:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SystemInit+0x5c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SystemInit+0x5c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x5c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x5c>)
 8001032:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001036:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SystemInit+0x5c>)
 800103a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800103e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SystemInit+0x64>)
 8001042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001046:	609a      	str	r2, [r3, #8]
#endif 
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	f8ff0000 	.word	0xf8ff0000
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800105c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800105e:	e003      	b.n	8001068 <LoopCopyDataInit>

08001060 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001062:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001064:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001066:	3104      	adds	r1, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800106c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001070:	d3f6      	bcc.n	8001060 <CopyDataInit>
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001074:	e002      	b.n	800107c <LoopFillZerobss>

08001076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001078:	f842 3b04 	str.w	r3, [r2], #4

0800107c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001080:	d3f9      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff ffb7 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 f9f9 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff f85f 	bl	800014c <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r3, =_sidata
 8001090:	080035ac 	.word	0x080035ac
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001098:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800109c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80010a0:	200000f0 	.word	0x200000f0

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fd81 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fddc 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fd99 	bl	8001c2a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 fd61 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000004 	.word	0x20000004
 800112c:	2000000c 	.word	0x2000000c
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000000c 	.word	0x2000000c
 8001154:	200000ec 	.word	0x200000ec

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	200000ec 	.word	0x200000ec

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000000c 	.word	0x2000000c

080011b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0be      	b.n	8001350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fd78 	bl	8000ce4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fbdd 	bl	80019b4 <ADC_ConversionStop_Disable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8099 	bne.w	800133e <HAL_ADC_Init+0x18e>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 8095 	bne.w	800133e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	f043 0202 	orr.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001248:	d003      	beq.n	8001252 <HAL_ADC_Init+0xa2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0xa8>
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	e000      	b.n	800125a <HAL_ADC_Init+0xaa>
 8001258:	2300      	movs	r3, #0
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d1b      	ldrb	r3, [r3, #20]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d119      	bne.n	800129c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	3b01      	subs	r3, #1
 8001276:	035a      	lsls	r2, r3, #13
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e00b      	b.n	800129c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f043 0220 	orr.w	r2, r3, #32
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_ADC_Init+0x1a8>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012cc:	d003      	beq.n	80012d6 <HAL_ADC_Init+0x126>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	051b      	lsls	r3, r3, #20
 80012de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_ADC_Init+0x1ac>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10b      	bne.n	800131c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131a:	e018      	b.n	800134e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f023 0312 	bic.w	r3, r3, #18
 8001324:	f043 0210 	orr.w	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	ffe1f7fd 	.word	0xffe1f7fd
 800135c:	ff1f0efe 	.word	0xff1f0efe

08001360 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Start+0x1a>
 8001376:	2302      	movs	r3, #2
 8001378:	e098      	b.n	80014ac <HAL_ADC_Start+0x14c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fac4 	bl	8001910 <ADC_Enable>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 8087 	bne.w	80014a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a41      	ldr	r2, [pc, #260]	; (80014b4 <HAL_ADC_Start+0x154>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d105      	bne.n	80013be <HAL_ADC_Start+0x5e>
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_ADC_Start+0x158>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d026      	beq.n	8001426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e8:	e01d      	b.n	8001426 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <HAL_ADC_Start+0x158>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d004      	beq.n	800140a <HAL_ADC_Start+0xaa>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <HAL_ADC_Start+0x154>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_ADC_Start+0xc6>
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_ADC_Start+0x158>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f023 0206 	bic.w	r2, r3, #6
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f06f 0202 	mvn.w	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001462:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001466:	d113      	bne.n	8001490 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_ADC_Start+0x154>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d105      	bne.n	800147e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_ADC_Start+0x158>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d108      	bne.n	8001490 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	e00c      	b.n	80014aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e003      	b.n	80014aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40012800 	.word	0x40012800
 80014b8:	40012400 	.word	0x40012400

080014bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Stop+0x1a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e01a      	b.n	800150c <HAL_ADC_Stop+0x50>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa68 	bl	80019b4 <ADC_ConversionStop_Disable>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800152a:	f7ff fe15 	bl	8001158 <HAL_GetTick>
 800152e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f043 0220 	orr.w	r2, r3, #32
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0c8      	b.n	80016e8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d12a      	bne.n	80015ba <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d123      	bne.n	80015ba <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001572:	e01a      	b.n	80015aa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d016      	beq.n	80015aa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_ADC_PollForConversion+0x7e>
 8001582:	f7ff fde9 	bl	8001158 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d20b      	bcs.n	80015aa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e09e      	b.n	80016e8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0dd      	beq.n	8001574 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015b8:	e06c      	b.n	8001694 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_ADC_PollForConversion+0x1dc>)
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	2002      	movs	r0, #2
 80015c0:	f001 fa1c 	bl	80029fc <HAL_RCCEx_GetPeriphCLKFreq>
 80015c4:	4603      	mov	r3, r0
 80015c6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6919      	ldr	r1, [r3, #16]
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_ADC_PollForConversion+0x1e0>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d118      	bne.n	800160a <HAL_ADC_PollForConversion+0xf6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_ADC_PollForConversion+0x1e4>)
 80015e0:	400b      	ands	r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d111      	bne.n	800160a <HAL_ADC_PollForConversion+0xf6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6919      	ldr	r1, [r3, #16]
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_ADC_PollForConversion+0x1e8>)
 80015ee:	400b      	ands	r3, r1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <HAL_ADC_PollForConversion+0xf2>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_ADC_PollForConversion+0x1ec>)
 80015fc:	400b      	ands	r3, r1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_PollForConversion+0xf2>
 8001602:	2314      	movs	r3, #20
 8001604:	e020      	b.n	8001648 <HAL_ADC_PollForConversion+0x134>
 8001606:	2329      	movs	r3, #41	; 0x29
 8001608:	e01e      	b.n	8001648 <HAL_ADC_PollForConversion+0x134>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6919      	ldr	r1, [r3, #16]
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_ADC_PollForConversion+0x1e8>)
 8001612:	400b      	ands	r3, r1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <HAL_ADC_PollForConversion+0x112>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_ADC_PollForConversion+0x1ec>)
 8001620:	400b      	ands	r3, r1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <HAL_ADC_PollForConversion+0x12e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6919      	ldr	r1, [r3, #16]
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_ADC_PollForConversion+0x1f0>)
 800162e:	400b      	ands	r3, r1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d108      	bne.n	8001646 <HAL_ADC_PollForConversion+0x132>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d9      	ldr	r1, [r3, #12]
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_ADC_PollForConversion+0x1f0>)
 800163c:	400b      	ands	r3, r1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_PollForConversion+0x132>
 8001642:	2354      	movs	r3, #84	; 0x54
 8001644:	e000      	b.n	8001648 <HAL_ADC_PollForConversion+0x134>
 8001646:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800164e:	e01d      	b.n	800168c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001656:	d016      	beq.n	8001686 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_PollForConversion+0x15a>
 800165e:	f7ff fd7b 	bl	8001158 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20b      	bcs.n	8001686 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f043 0204 	orr.w	r2, r3, #4
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e030      	b.n	80016e8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8dd      	bhi.n	8001650 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0212 	mvn.w	r2, #18
 800169c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b8:	d115      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d111      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000004 	.word	0x20000004
 80016f4:	24924924 	.word	0x24924924
 80016f8:	00924924 	.word	0x00924924
 80016fc:	12492492 	.word	0x12492492
 8001700:	00492492 	.word	0x00492492
 8001704:	00249249 	.word	0x00249249

08001708 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x20>
 800173c:	2302      	movs	r3, #2
 800173e:	e0dc      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1da>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d81c      	bhi.n	800178a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b05      	subs	r3, #5
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b05      	subs	r3, #5
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
 8001788:	e03c      	b.n	8001804 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d81c      	bhi.n	80017cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b23      	subs	r3, #35	; 0x23
 80017a4:	221f      	movs	r2, #31
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4019      	ands	r1, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b23      	subs	r3, #35	; 0x23
 80017be:	fa00 f203 	lsl.w	r2, r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ca:	e01b      	b.n	8001804 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b41      	subs	r3, #65	; 0x41
 80017de:	221f      	movs	r2, #31
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4019      	ands	r1, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b41      	subs	r3, #65	; 0x41
 80017f8:	fa00 f203 	lsl.w	r2, r0, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d91c      	bls.n	8001846 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	3b1e      	subs	r3, #30
 800181e:	2207      	movs	r2, #7
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6898      	ldr	r0, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	3b1e      	subs	r3, #30
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	e019      	b.n	800187a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6919      	ldr	r1, [r3, #16]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b10      	cmp	r3, #16
 8001880:	d003      	beq.n	800188a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001886:	2b11      	cmp	r3, #17
 8001888:	d132      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_ADC_ConfigChannel+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d125      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d126      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d11a      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_ConfigChannel+0x1e8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_ADC_ConfigChannel+0x1ec>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0c9a      	lsrs	r2, r3, #18
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x1b2>
 80018de:	e007      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012400 	.word	0x40012400
 8001908:	20000004 	.word	0x20000004
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d039      	beq.n	80019a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0201 	orr.w	r2, r2, #1
 800193c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <ADC_Enable+0x9c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <ADC_Enable+0xa0>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	0c9b      	lsrs	r3, r3, #18
 800194a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800194c:	e002      	b.n	8001954 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3b01      	subs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800195a:	f7ff fbfd 	bl	8001158 <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001960:	e018      	b.n	8001994 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001962:	f7ff fbf9 	bl	8001158 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d911      	bls.n	8001994 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1df      	bne.n	8001962 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000004 	.word	0x20000004
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d127      	bne.n	8001a1e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019de:	f7ff fbbb 	bl	8001158 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e4:	e014      	b.n	8001a10 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019e6:	f7ff fbb7 	bl	8001158 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d90d      	bls.n	8001a10 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e007      	b.n	8001a20 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d0e3      	beq.n	80019e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <__NVIC_EnableIRQ+0x34>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f7ff ff90 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff2d 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff42 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff90 	bl	8001b18 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5f 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff35 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d005      	beq.n	8001c66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e051      	b.n	8001d0a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 020e 	bic.w	r2, r2, #14
 8001c74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_DMA_Abort_IT+0xd0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d029      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0xa0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <HAL_DMA_Abort_IT+0xd4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d022      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x9c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_DMA_Abort_IT+0xd8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d01a      	beq.n	8001cda <HAL_DMA_Abort_IT+0x96>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_DMA_Abort_IT+0xdc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d012      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x90>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_DMA_Abort_IT+0xe0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00a      	beq.n	8001cce <HAL_DMA_Abort_IT+0x8a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_DMA_Abort_IT+0xe4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d102      	bne.n	8001cc8 <HAL_DMA_Abort_IT+0x84>
 8001cc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc6:	e00e      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ccc:	e00b      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd2:	e008      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	e005      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cde:	e002      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	e000      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xa2>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_DMA_Abort_IT+0xe8>)
 8001ce8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
    } 
  }
  return status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40020008 	.word	0x40020008
 8001d18:	4002001c 	.word	0x4002001c
 8001d1c:	40020030 	.word	0x40020030
 8001d20:	40020044 	.word	0x40020044
 8001d24:	40020058 	.word	0x40020058
 8001d28:	4002006c 	.word	0x4002006c
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e127      	b.n	8001f94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d44:	2201      	movs	r2, #1
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8116 	bne.w	8001f8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d034      	beq.n	8001dd4 <HAL_GPIO_Init+0xa4>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d80d      	bhi.n	8001d8a <HAL_GPIO_Init+0x5a>
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x9a>
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d804      	bhi.n	8001d80 <HAL_GPIO_Init+0x50>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d031      	beq.n	8001dde <HAL_GPIO_Init+0xae>
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d01c      	beq.n	8001db8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e048      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d043      	beq.n	8001e0c <HAL_GPIO_Init+0xdc>
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d01b      	beq.n	8001dc0 <HAL_GPIO_Init+0x90>
          break;
 8001d88:	e043      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d8a:	4a89      	ldr	r2, [pc, #548]	; (8001fb0 <HAL_GPIO_Init+0x280>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d026      	beq.n	8001dde <HAL_GPIO_Init+0xae>
 8001d90:	4a87      	ldr	r2, [pc, #540]	; (8001fb0 <HAL_GPIO_Init+0x280>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d806      	bhi.n	8001da4 <HAL_GPIO_Init+0x74>
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_GPIO_Init+0x284>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d020      	beq.n	8001dde <HAL_GPIO_Init+0xae>
 8001d9c:	4a86      	ldr	r2, [pc, #536]	; (8001fb8 <HAL_GPIO_Init+0x288>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01d      	beq.n	8001dde <HAL_GPIO_Init+0xae>
          break;
 8001da2:	e036      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001da4:	4a85      	ldr	r2, [pc, #532]	; (8001fbc <HAL_GPIO_Init+0x28c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0xae>
 8001daa:	4a85      	ldr	r2, [pc, #532]	; (8001fc0 <HAL_GPIO_Init+0x290>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d016      	beq.n	8001dde <HAL_GPIO_Init+0xae>
 8001db0:	4a84      	ldr	r2, [pc, #528]	; (8001fc4 <HAL_GPIO_Init+0x294>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0xae>
          break;
 8001db6:	e02c      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e028      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	623b      	str	r3, [r7, #32]
          break;
 8001dc8:	e023      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e01e      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	330c      	adds	r3, #12
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e019      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de6:	2304      	movs	r3, #4
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e012      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	611a      	str	r2, [r3, #16]
          break;
 8001dfe:	e008      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e00:	2308      	movs	r3, #8
 8001e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	615a      	str	r2, [r3, #20]
          break;
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d801      	bhi.n	8001e1c <HAL_GPIO_Init+0xec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e001      	b.n	8001e20 <HAL_GPIO_Init+0xf0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d802      	bhi.n	8001e2e <HAL_GPIO_Init+0xfe>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x104>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	3b08      	subs	r3, #8
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	401a      	ands	r2, r3
 8001e46:	6a39      	ldr	r1, [r7, #32]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8096 	beq.w	8001f8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_GPIO_Init+0x298>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_GPIO_Init+0x298>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6193      	str	r3, [r2, #24]
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_GPIO_Init+0x298>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e7a:	4a54      	ldr	r2, [pc, #336]	; (8001fcc <HAL_GPIO_Init+0x29c>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x19e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x19a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a49      	ldr	r2, [pc, #292]	; (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x196>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x192>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x1a0>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x1a0>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x1a0>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x1a0>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee0:	493a      	ldr	r1, [pc, #232]	; (8001fcc <HAL_GPIO_Init+0x29c>)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4938      	ldr	r1, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	4933      	ldr	r1, [pc, #204]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	492e      	ldr	r1, [pc, #184]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	4929      	ldr	r1, [pc, #164]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	491f      	ldr	r1, [pc, #124]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]
 8001f7e:	e006      	b.n	8001f8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f aed0 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	372c      	adds	r7, #44	; 0x2c
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	10210000 	.word	0x10210000
 8001fb4:	10110000 	.word	0x10110000
 8001fb8:	10120000 	.word	0x10120000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10320000 	.word	0x10320000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f806 	bl	8002044 <HAL_GPIO_EXTI_Callback>
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e26c      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8087 	beq.w	8002186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b04      	cmp	r3, #4
 8002082:	d00c      	beq.n	800209e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002084:	4b8f      	ldr	r3, [pc, #572]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d112      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
 8002090:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d10b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06c      	beq.n	8002184 <HAL_RCC_OscConfig+0x12c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d168      	bne.n	8002184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e246      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x76>
 80020c0:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e02e      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x98>
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0xbc>
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a71      	ldr	r2, [pc, #452]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xd4>
 8002114:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a67      	ldr	r2, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff f810 	bl	8001158 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f80c 	bl	8001158 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1fa      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xe4>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fffc 	bl	8001158 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe fff8 	bl	8001158 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1e6      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x10c>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1ba      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4939      	ldr	r1, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e03a      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ffb1 	bl	8001158 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe ffad 	bl	8001158 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e19b      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4927      	ldr	r1, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x270>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe ff90 	bl	8001158 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe ff8c 	bl	8001158 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e17a      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03a      	beq.n	80022dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d019      	beq.n	80022a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe ff70 	bl	8001158 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe ff6c 	bl	8001158 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e15a      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fada 	bl	8002854 <RCC_Delay>
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_OscConfig+0x274>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe ff56 	bl	8001158 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ae:	e00f      	b.n	80022d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe ff52 	bl	8001158 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d908      	bls.n	80022d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e140      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	42420000 	.word	0x42420000
 80022cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b9e      	ldr	r3, [pc, #632]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e9      	bne.n	80022b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a6 	beq.w	8002436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b97      	ldr	r3, [pc, #604]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b94      	ldr	r3, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a93      	ldr	r2, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe ff13 	bl	8001158 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fe ff0f 	bl	8001158 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0fd      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x4f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x312>
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a7a      	ldr	r2, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	e02d      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x334>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a72      	ldr	r2, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	e01c      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x356>
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a69      	ldr	r2, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x36e>
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a66      	ldr	r2, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fec3 	bl	8001158 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe febf 	bl	8001158 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0ab      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ee      	beq.n	80023d6 <HAL_RCC_OscConfig+0x37e>
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fead 	bl	8001158 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fea9 	bl	8001158 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e095      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ee      	bne.n	8002402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a47      	ldr	r2, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8081 	beq.w	8002542 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d061      	beq.n	8002510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d146      	bne.n	80024e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fe7d 	bl	8001158 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fe79 	bl	8001158 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e067      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d108      	bne.n	800249c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a19      	ldr	r1, [r3, #32]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	430b      	orrs	r3, r1
 80024ae:	4927      	ldr	r1, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe4d 	bl	8001158 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fe49 	bl	8001158 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e037      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46a>
 80024e0:	e02f      	b.n	8002542 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_RCC_OscConfig+0x4fc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe36 	bl	8001158 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fe32 	bl	8001158 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e020      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x498>
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e013      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
 8002554:	42420060 	.word	0x42420060

08002558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0d0      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d910      	bls.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4965      	ldr	r1, [pc, #404]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d040      	beq.n	8002678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e073      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e06b      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4936      	ldr	r1, [pc, #216]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002648:	f7fe fd86 	bl	8001158 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe fd82 	bl	8001158 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e053      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 020c 	and.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d1eb      	bne.n	8002650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d210      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	4922      	ldr	r1, [pc, #136]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	fa21 f303 	lsr.w	r3, r1, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1d0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fce4 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
 8002720:	0800358c 	.word	0x0800358c
 8002724:	20000004 	.word	0x20000004
 8002728:	20000008 	.word	0x20000008

0800272c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b490      	push	{r4, r7}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002732:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002734:	1d3c      	adds	r4, r7, #4
 8002736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b04      	cmp	r3, #4
 8002764:	d002      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x40>
 8002766:	2b08      	cmp	r3, #8
 8002768:	d003      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x46>
 800276a:	e02d      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800276e:	623b      	str	r3, [r7, #32]
      break;
 8002770:	e02d      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	0c9b      	lsrs	r3, r3, #18
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800277e:	4413      	add	r3, r2
 8002780:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002784:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c5b      	lsrs	r3, r3, #17
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800279e:	4413      	add	r3, r2
 80027a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027aa:	fb02 f203 	mul.w	r2, r2, r3
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	e004      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	623b      	str	r3, [r7, #32]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc90      	pop	{r4, r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	08003564 	.word	0x08003564
 80027e0:	08003574 	.word	0x08003574
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	003d0900 	.word	0x003d0900

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b02      	ldr	r3, [pc, #8]	; (8002800 <HAL_RCC_GetHCLKFreq+0x10>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002808:	f7ff fff2 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 800280c:	4601      	mov	r1, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	0800359c 	.word	0x0800359c

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002830:	f7ff ffde 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002834:	4601      	mov	r1, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0adb      	lsrs	r3, r3, #11
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	0800359c 	.word	0x0800359c

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000004 	.word	0x20000004
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07d      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fc32 	bl	8001158 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	e008      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fc2e 	bl	8001158 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e06d      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02e      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d027      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fbfd 	bl	8001158 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fbf9 	bl	8001158 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e036      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ee      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4917      	ldr	r1, [pc, #92]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	4313      	orrs	r3, r2
 8002994:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	490b      	ldr	r1, [pc, #44]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420440 	.word	0x42420440

080029fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b08d      	sub	sp, #52	; 0x34
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a04:	4b55      	ldr	r3, [pc, #340]	; (8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a06:	f107 040c 	add.w	r4, r7, #12
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d07f      	beq.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d002      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d048      	beq.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a38:	e08b      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d07f      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a58:	4413      	add	r3, r2
 8002a5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a5e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0c5b      	lsrs	r3, r3, #17
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a78:	4413      	add	r3, r2
 8002a7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a8a:	4a37      	ldr	r2, [pc, #220]	; (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab2:	d102      	bne.n	8002aba <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ab8:	e048      	b.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ac8:	e040      	b.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	d108      	bne.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aec:	e01f      	b.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af8:	d109      	bne.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0c:	e00f      	b.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002b26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b2c:	e010      	b.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b30:	f7ff fe7c 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0b9b      	lsrs	r3, r3, #14
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	3301      	adds	r3, #1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002b50:	bf00      	nop
    }
  }
  return (frequency);
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3734      	adds	r7, #52	; 0x34
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	08003578 	.word	0x08003578
 8002b60:	08003588 	.word	0x08003588
 8002b64:	40021000 	.word	0x40021000
 8002b68:	007a1200 	.word	0x007a1200
 8002b6c:	003d0900 	.word	0x003d0900
 8002b70:	aaaaaaab 	.word	0xaaaaaaab

08002b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e03f      	b.n	8002c06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe f8de 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fb85 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b088      	sub	sp, #32
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	f040 8083 	bne.w	8002d36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x2e>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07b      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Transmit+0x40>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e074      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fa78 	bl	8001158 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c76:	e042      	b.n	8002cfe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8e:	d122      	bne.n	8002cd6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f9ab 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e046      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	e017      	b.n	8002cfe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e013      	b.n	8002cfe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f988 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e023      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	60ba      	str	r2, [r7, #8]
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1b7      	bne.n	8002c78 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f96f 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e00a      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d130      	bne.n	8002dbc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_UART_Transmit_IT+0x26>
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e029      	b.n	8002dbe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_UART_Transmit_IT+0x38>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e022      	b.n	8002dbe <HAL_UART_Transmit_IT+0x7e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2221      	movs	r2, #33	; 0x21
 8002d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002db6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_UART_IRQHandler+0x52>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9d7 	bl	80031c6 <UART_Receive_IT>
      return;
 8002e18:	e0cc      	b.n	8002fb4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80ab 	beq.w	8002f78 <HAL_UART_IRQHandler+0x1b0>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_UART_IRQHandler+0x70>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80a0 	beq.w	8002f78 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_UART_IRQHandler+0x90>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_UART_IRQHandler+0xb0>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	f043 0202 	orr.w	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_UART_IRQHandler+0xd0>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_UART_IRQHandler+0xf0>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	f043 0208 	orr.w	r2, r3, #8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d078      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_UART_IRQHandler+0x112>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f976 	bl	80031c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_UART_IRQHandler+0x13a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d031      	beq.n	8002f66 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8c1 	bl	800308a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d023      	beq.n	8002f5e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_UART_IRQHandler+0x1f4>)
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fe82 	bl	8001c44 <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00e      	b.n	8002f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f844 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e00a      	b.n	8002f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f840 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e006      	b.n	8002f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f83c 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f72:	e01e      	b.n	8002fb2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	bf00      	nop
    return;
 8002f76:	e01c      	b.n	8002fb2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_UART_IRQHandler+0x1cc>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8ad 	bl	80030ec <UART_Transmit_IT>
    return;
 8002f92:	e00f      	b.n	8002fb4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x1ec>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8f4 	bl	8003196 <UART_EndTransmit_IT>
    return;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002fb2:	bf00      	nop
  }
}
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	080030c5 	.word	0x080030c5

08002fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	e02c      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d028      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
 8003016:	f7fe f89f 	bl	8001158 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	429a      	cmp	r2, r3
 8003024:	d21d      	bcs.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003034:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e00f      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	429a      	cmp	r2, r3
 800307e:	d0c3      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff80 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b21      	cmp	r3, #33	; 0x21
 80030fe:	d144      	bne.n	800318a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d11a      	bne.n	8003140 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]
 8003132:	e00e      	b.n	8003152 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]
 800313e:	e008      	b.n	8003152 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6211      	str	r1, [r2, #32]
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4619      	mov	r1, r3
 8003160:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003174:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003184:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ff02 	bl	8002fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d171      	bne.n	80032be <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d123      	bne.n	800322c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	1c9a      	adds	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
 800320e:	e029      	b.n	8003264 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	b29b      	uxth	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
 800322a:	e01b      	b.n	8003264 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6858      	ldr	r0, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6291      	str	r1, [r2, #40]	; 0x28
 8003244:	b2c2      	uxtb	r2, r0
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e00c      	b.n	8003264 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	1c58      	adds	r0, r3, #1
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6288      	str	r0, [r1, #40]	; 0x28
 800325c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29b      	uxth	r3, r3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4619      	mov	r1, r3
 8003272:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003274:	2b00      	cmp	r3, #0
 8003276:	d120      	bne.n	80032ba <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0220 	bic.w	r2, r2, #32
 8003286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fe8e 	bl	8002fd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e002      	b.n	80032c0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003302:	f023 030c 	bic.w	r3, r3, #12
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a52      	ldr	r2, [pc, #328]	; (8003474 <UART_SetConfig+0x1ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d14e      	bne.n	80033ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7ff fa7c 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8003334:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009a      	lsls	r2, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	4a4a      	ldr	r2, [pc, #296]	; (8003478 <UART_SetConfig+0x1b0>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	0119      	lsls	r1, r3, #4
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009a      	lsls	r2, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <UART_SetConfig+0x1b0>)
 800336e:	fba3 0302 	umull	r0, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2064      	movs	r0, #100	; 0x64
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a3d      	ldr	r2, [pc, #244]	; (8003478 <UART_SetConfig+0x1b0>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338c:	4419      	add	r1, r3
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009a      	lsls	r2, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <UART_SetConfig+0x1b0>)
 80033a6:	fba3 0302 	umull	r0, r3, r3, r2
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2064      	movs	r0, #100	; 0x64
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	3332      	adds	r3, #50	; 0x32
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <UART_SetConfig+0x1b0>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	440a      	add	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80033cc:	e04d      	b.n	800346a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7ff fa19 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80033d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009a      	lsls	r2, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	4a23      	ldr	r2, [pc, #140]	; (8003478 <UART_SetConfig+0x1b0>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	0119      	lsls	r1, r3, #4
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fbb2 f2f3 	udiv	r2, r2, r3
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <UART_SetConfig+0x1b0>)
 800340c:	fba3 0302 	umull	r0, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2064      	movs	r0, #100	; 0x64
 8003414:	fb00 f303 	mul.w	r3, r0, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <UART_SetConfig+0x1b0>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	4419      	add	r1, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <UART_SetConfig+0x1b0>)
 8003444:	fba3 0302 	umull	r0, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	2064      	movs	r0, #100	; 0x64
 800344c:	fb00 f303 	mul.w	r3, r0, r3
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	3332      	adds	r3, #50	; 0x32
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <UART_SetConfig+0x1b0>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	440a      	add	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40013800 	.word	0x40013800
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2500      	movs	r5, #0
 8003480:	4e0c      	ldr	r6, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1ba4      	subs	r4, r4, r6
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f000 f822 	bl	80034d4 <_init>
 8003490:	2500      	movs	r5, #0
 8003492:	4e0a      	ldr	r6, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1ba4      	subs	r4, r4, r6
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	080035a4 	.word	0x080035a4
 80034b8:	080035a4 	.word	0x080035a4
 80034bc:	080035a4 	.word	0x080035a4
 80034c0:	080035a8 	.word	0x080035a8

080034c4 <memset>:
 80034c4:	4603      	mov	r3, r0
 80034c6:	4402      	add	r2, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <_init>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr

080034e0 <_fini>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr
