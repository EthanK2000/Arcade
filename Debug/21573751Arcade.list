
21573751Arcade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d4  080063d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080063d4  080063d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063d4  080063d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  080063ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080063ec  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a084  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019e7  00000000  00000000  0002a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002c550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ed7  00000000  00000000  0002cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000092e7  00000000  00000000  00043e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085757  00000000  00000000  0004d106  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d285d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  000d28d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08006254 	.word	0x08006254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08006254 	.word	0x08006254

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	_Bool config = 1;
 8000152:	2301      	movs	r3, #1
 8000154:	71fb      	strb	r3, [r7, #7]
	ms = 0;
 8000156:	4b58      	ldr	r3, [pc, #352]	; (80002b8 <main+0x16c>)
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015c:	f003 f9b2 	bl	80034c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000160:	f000 f8b6 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000164:	f000 f9ca 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f974 	bl	8000454 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800016c:	f000 f906 	bl	800037c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000170:	f000 f942 	bl	80003f8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000174:	f000 f998 	bl	80004a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	if (config) {
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d004      	beq.n	8000188 <main+0x3c>
		HAL_Delay(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f003 fa02 	bl	8003588 <HAL_Delay>
		Configuration();
 8000184:	f000 fa8a 	bl	800069c <Configuration>
	}

	Up = 0;
 8000188:	4b4c      	ldr	r3, [pc, #304]	; (80002bc <main+0x170>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
	Down = 0;
 800018e:	4b4c      	ldr	r3, [pc, #304]	; (80002c0 <main+0x174>)
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
	Left = 0;
 8000194:	4b4b      	ldr	r3, [pc, #300]	; (80002c4 <main+0x178>)
 8000196:	2200      	movs	r2, #0
 8000198:	701a      	strb	r2, [r3, #0]
	Right = 0;
 800019a:	4b4b      	ldr	r3, [pc, #300]	; (80002c8 <main+0x17c>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
	Middle = 0;
 80001a0:	4b4a      	ldr	r3, [pc, #296]	; (80002cc <main+0x180>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
	resetLED();
 80001a6:	f000 fc3f 	bl	8000a28 <resetLED>
	displayHome();
 80001aa:	f000 fc27 	bl	80009fc <displayHome>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Left) {
 80001ae:	4b45      	ldr	r3, [pc, #276]	; (80002c4 <main+0x178>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d026      	beq.n	8000206 <main+0xba>
	  			Up = 0;
 80001b8:	4b40      	ldr	r3, [pc, #256]	; (80002bc <main+0x170>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 80001be:	4b40      	ldr	r3, [pc, #256]	; (80002c0 <main+0x174>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 80001c4:	4b3f      	ldr	r3, [pc, #252]	; (80002c4 <main+0x178>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 80001ca:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <main+0x17c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 80001d0:	4b3e      	ldr	r3, [pc, #248]	; (80002cc <main+0x180>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 80001d6:	f000 fc27 	bl	8000a28 <resetLED>
	  			Maze();
 80001da:	f000 fc4d 	bl	8000a78 <Maze>
	  			Up = 0;
 80001de:	4b37      	ldr	r3, [pc, #220]	; (80002bc <main+0x170>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 80001e4:	4b36      	ldr	r3, [pc, #216]	; (80002c0 <main+0x174>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 80001ea:	4b36      	ldr	r3, [pc, #216]	; (80002c4 <main+0x178>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 80001f0:	4b35      	ldr	r3, [pc, #212]	; (80002c8 <main+0x17c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 80001f6:	4b35      	ldr	r3, [pc, #212]	; (80002cc <main+0x180>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 80001fc:	f000 fc14 	bl	8000a28 <resetLED>
	  			displayHome();
 8000200:	f000 fbfc 	bl	80009fc <displayHome>
 8000204:	e7d3      	b.n	80001ae <main+0x62>
	  		}
	  		else if (Middle) {
 8000206:	4b31      	ldr	r3, [pc, #196]	; (80002cc <main+0x180>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	d026      	beq.n	800025e <main+0x112>
	  			Up = 0;
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <main+0x170>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 8000216:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <main+0x174>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <main+0x178>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 8000222:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0x17c>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <main+0x180>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 800022e:	f000 fbfb 	bl	8000a28 <resetLED>
	  			Tennis();
 8000232:	f001 fae1 	bl	80017f8 <Tennis>
	  			Up = 0;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0x170>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <main+0x174>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <main+0x178>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 8000248:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <main+0x17c>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <main+0x180>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 8000254:	f000 fbe8 	bl	8000a28 <resetLED>
	  			displayHome();
 8000258:	f000 fbd0 	bl	80009fc <displayHome>
 800025c:	e7a7      	b.n	80001ae <main+0x62>
	  		}
	  		else if (Right) {
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <main+0x17c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0a2      	beq.n	80001ae <main+0x62>
	  			Up = 0;
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x170>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <main+0x174>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0x178>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x17c>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <main+0x180>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 8000286:	f000 fbcf 	bl	8000a28 <resetLED>
	  			Tennis2();
 800028a:	f001 ff27 	bl	80020dc <Tennis2>
	  			Up = 0;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <main+0x170>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
	  			Down = 0;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <main+0x174>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
	  			Left = 0;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <main+0x178>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	  			Right = 0;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x17c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
	  			Middle = 0;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <main+0x180>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
	  			resetLED();
 80002ac:	f000 fbbc 	bl	8000a28 <resetLED>
	  			displayHome();
 80002b0:	f000 fba4 	bl	80009fc <displayHome>
	  if (Left) {
 80002b4:	e77b      	b.n	80001ae <main+0x62>
 80002b6:	bf00      	nop
 80002b8:	2000010c 	.word	0x2000010c
 80002bc:	20000149 	.word	0x20000149
 80002c0:	20000148 	.word	0x20000148
 80002c4:	20000110 	.word	0x20000110
 80002c8:	20000070 	.word	0x20000070
 80002cc:	20000112 	.word	0x20000112

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b094      	sub	sp, #80	; 0x50
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 ffb0 	bl	8006244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	2302      	movs	r3, #2
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2310      	movs	r3, #16
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000310:	2300      	movs	r3, #0
 8000312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000314:	2300      	movs	r3, #0
 8000316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031c:	4618      	mov	r0, r3
 800031e:	f004 fe65 	bl	8004fec <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000328:	f002 fcfc 	bl	8002d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f005 f8cf 	bl	80054ec <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000354:	f002 fce6 	bl	8002d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000358:	2302      	movs	r3, #2
 800035a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4618      	mov	r0, r3
 8000364:	f005 fa5e 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800036e:	f002 fcd9 	bl	8002d24 <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3750      	adds	r7, #80	; 0x50
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_ADC1_Init+0x74>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <MX_ADC1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_ADC1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_ADC1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003ba:	f003 f907 	bl	80035cc <HAL_ADC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003c4:	f002 fcae 	bl	8002d24 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80003c8:	230d      	movs	r3, #13
 80003ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_ADC1_Init+0x74>)
 80003da:	f003 f9cf 	bl	800377c <HAL_ADC_ConfigChannel>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003e4:	f002 fc9e 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000118 	.word	0x20000118
 80003f4:	40012400 	.word	0x40012400

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_I2C1_Init+0x50>)
 80003fe:	4a13      	ldr	r2, [pc, #76]	; (800044c <MX_I2C1_Init+0x54>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_I2C1_Init+0x50>)
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <MX_I2C1_Init+0x58>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_I2C1_Init+0x50>)
 8000416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800041a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <MX_I2C1_Init+0x50>)
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_I2C1_Init+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <MX_I2C1_Init+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_I2C1_Init+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_I2C1_Init+0x50>)
 8000436:	f003 fdeb 	bl	8004010 <HAL_I2C_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000440:	f002 fc70 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200000b4 	.word	0x200000b4
 800044c:	40005400 	.word	0x40005400
 8000450:	000186a0 	.word	0x000186a0

08000454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_USART2_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_USART2_UART_Init+0x4c>)
 800048c:	f005 fa80 	bl	8005990 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000496:	f002 fc45 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000014c 	.word	0x2000014c
 80004a4:	40004400 	.word	0x40004400

080004a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_USART3_UART_Init+0x50>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART3_UART_Init+0x4c>)
 80004e0:	f005 fa56 	bl	8005990 <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004ea:	f002 fc1b 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000074 	.word	0x20000074
 80004f8:	40004800 	.word	0x40004800

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b5d      	ldr	r3, [pc, #372]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a5c      	ldr	r2, [pc, #368]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b5a      	ldr	r3, [pc, #360]	; (8000688 <MX_GPIO_Init+0x18c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b57      	ldr	r3, [pc, #348]	; (8000688 <MX_GPIO_Init+0x18c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a56      	ldr	r2, [pc, #344]	; (8000688 <MX_GPIO_Init+0x18c>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b54      	ldr	r3, [pc, #336]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b51      	ldr	r3, [pc, #324]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a50      	ldr	r2, [pc, #320]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b4e      	ldr	r3, [pc, #312]	; (8000688 <MX_GPIO_Init+0x18c>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <MX_GPIO_Init+0x18c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a4a      	ldr	r2, [pc, #296]	; (8000688 <MX_GPIO_Init+0x18c>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b48      	ldr	r3, [pc, #288]	; (8000688 <MX_GPIO_Init+0x18c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8000576:	4845      	ldr	r0, [pc, #276]	; (800068c <MX_GPIO_Init+0x190>)
 8000578:	f003 fd10 	bl	8003f9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000582:	4843      	ldr	r0, [pc, #268]	; (8000690 <MX_GPIO_Init+0x194>)
 8000584:	f003 fd0a 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8000588:	2200      	movs	r2, #0
 800058a:	f64f 7106 	movw	r1, #65286	; 0xff06
 800058e:	4841      	ldr	r0, [pc, #260]	; (8000694 <MX_GPIO_Init+0x198>)
 8000590:	f003 fd04 	bl	8003f9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin PC1 PC2 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8000594:	f242 0306 	movw	r3, #8198	; 0x2006
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059a:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <MX_GPIO_Init+0x19c>)
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4839      	ldr	r0, [pc, #228]	; (8000690 <MX_GPIO_Init+0x194>)
 80005aa:	f003 fb9d 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80005ae:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 80005b2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2302      	movs	r3, #2
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4831      	ldr	r0, [pc, #196]	; (800068c <MX_GPIO_Init+0x190>)
 80005c8:	f003 fb8e 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80005cc:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	482a      	ldr	r0, [pc, #168]	; (8000690 <MX_GPIO_Init+0x194>)
 80005e6:	f003 fb7f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80005ea:	2331      	movs	r3, #49	; 0x31
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_GPIO_Init+0x19c>)
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4825      	ldr	r0, [pc, #148]	; (8000694 <MX_GPIO_Init+0x198>)
 80005fe:	f003 fb73 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8000602:	f64f 7306 	movw	r3, #65286	; 0xff06
 8000606:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	481e      	ldr	r0, [pc, #120]	; (8000694 <MX_GPIO_Init+0x198>)
 800061c:	f003 fb64 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2006      	movs	r0, #6
 8000626:	f003 fab2 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800062a:	2006      	movs	r0, #6
 800062c:	f003 facb 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2007      	movs	r0, #7
 8000636:	f003 faaa 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800063a:	2007      	movs	r0, #7
 800063c:	f003 fac3 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2008      	movs	r0, #8
 8000646:	f003 faa2 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800064a:	2008      	movs	r0, #8
 800064c:	f003 fabb 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	200a      	movs	r0, #10
 8000656:	f003 fa9a 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800065a:	200a      	movs	r0, #10
 800065c:	f003 fab3 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2017      	movs	r0, #23
 8000666:	f003 fa92 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800066a:	2017      	movs	r0, #23
 800066c:	f003 faab 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f003 fa8a 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f003 faa3 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800
 8000690:	40011000 	.word	0x40011000
 8000694:	40010c00 	.word	0x40010c00
 8000698:	10110000 	.word	0x10110000

0800069c <Configuration>:

/* USER CODE BEGIN 4 */
void Configuration()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
	uint8_t i = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]
	uint8_t posStr[] = "$1_______\n";
 80006aa:	4aab      	ldr	r2, [pc, #684]	; (8000958 <Configuration+0x2bc>)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80006b0:	c303      	stmia	r3!, {r0, r1}
 80006b2:	801a      	strh	r2, [r3, #0]
 80006b4:	3302      	adds	r3, #2
 80006b6:	0c12      	lsrs	r2, r2, #16
 80006b8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2,(uint8_t*) "$21573751\n", 10, 100);
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	220a      	movs	r2, #10
 80006be:	49a7      	ldr	r1, [pc, #668]	; (800095c <Configuration+0x2c0>)
 80006c0:	48a7      	ldr	r0, [pc, #668]	; (8000960 <Configuration+0x2c4>)
 80006c2:	f005 f9b2 	bl	8005a2a <HAL_UART_Transmit>
	posStr[2] = '0';
 80006c6:	2330      	movs	r3, #48	; 0x30
 80006c8:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 80006ca:	1d39      	adds	r1, r7, #4
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	220a      	movs	r2, #10
 80006d0:	48a3      	ldr	r0, [pc, #652]	; (8000960 <Configuration+0x2c4>)
 80006d2:	f005 f9aa 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 80006d6:	4ba3      	ldr	r3, [pc, #652]	; (8000964 <Configuration+0x2c8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	75fb      	strb	r3, [r7, #23]
 80006e0:	e007      	b.n	80006f2 <Configuration+0x56>
		ledMatrix[8*i] = 1;
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4aa0      	ldr	r2, [pc, #640]	; (8000968 <Configuration+0x2cc>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3301      	adds	r3, #1
 80006f0:	75fb      	strb	r3, [r7, #23]
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	2b07      	cmp	r3, #7
 80006f6:	d9f4      	bls.n	80006e2 <Configuration+0x46>
	}
	while((ms-now)<1000){
 80006f8:	bf00      	nop
 80006fa:	4b9a      	ldr	r3, [pc, #616]	; (8000964 <Configuration+0x2c8>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000706:	d3f8      	bcc.n	80006fa <Configuration+0x5e>
	}
	for (i = 0; i<8; i++){
 8000708:	2300      	movs	r3, #0
 800070a:	75fb      	strb	r3, [r7, #23]
 800070c:	e007      	b.n	800071e <Configuration+0x82>
		ledMatrix[8*i] = 0;
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4a95      	ldr	r2, [pc, #596]	; (8000968 <Configuration+0x2cc>)
 8000714:	2100      	movs	r1, #0
 8000716:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	3301      	adds	r3, #1
 800071c:	75fb      	strb	r3, [r7, #23]
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	2b07      	cmp	r3, #7
 8000722:	d9f4      	bls.n	800070e <Configuration+0x72>
	}

	posStr[2] = '1';
 8000724:	2331      	movs	r3, #49	; 0x31
 8000726:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	220a      	movs	r2, #10
 800072e:	488c      	ldr	r0, [pc, #560]	; (8000960 <Configuration+0x2c4>)
 8000730:	f005 f97b 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 8000734:	4b8b      	ldr	r3, [pc, #556]	; (8000964 <Configuration+0x2c8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 800073a:	2300      	movs	r3, #0
 800073c:	75fb      	strb	r3, [r7, #23]
 800073e:	e008      	b.n	8000752 <Configuration+0xb6>
		ledMatrix[8*i+1] = 1;
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	3301      	adds	r3, #1
 8000746:	4a88      	ldr	r2, [pc, #544]	; (8000968 <Configuration+0x2cc>)
 8000748:	2101      	movs	r1, #1
 800074a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 800074c:	7dfb      	ldrb	r3, [r7, #23]
 800074e:	3301      	adds	r3, #1
 8000750:	75fb      	strb	r3, [r7, #23]
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	2b07      	cmp	r3, #7
 8000756:	d9f3      	bls.n	8000740 <Configuration+0xa4>
	}
	while((ms-now)<1000){
 8000758:	bf00      	nop
 800075a:	4b82      	ldr	r3, [pc, #520]	; (8000964 <Configuration+0x2c8>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000766:	d3f8      	bcc.n	800075a <Configuration+0xbe>
	}
	for (i = 0; i<8; i++){
 8000768:	2300      	movs	r3, #0
 800076a:	75fb      	strb	r3, [r7, #23]
 800076c:	e008      	b.n	8000780 <Configuration+0xe4>
		ledMatrix[8*i+1] = 0;
 800076e:	7dfb      	ldrb	r3, [r7, #23]
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	3301      	adds	r3, #1
 8000774:	4a7c      	ldr	r2, [pc, #496]	; (8000968 <Configuration+0x2cc>)
 8000776:	2100      	movs	r1, #0
 8000778:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	3301      	adds	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	2b07      	cmp	r3, #7
 8000784:	d9f3      	bls.n	800076e <Configuration+0xd2>
	}

	posStr[2] = '2';
 8000786:	2332      	movs	r3, #50	; 0x32
 8000788:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2,posStr, 10, 100);
 800078a:	1d39      	adds	r1, r7, #4
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	220a      	movs	r2, #10
 8000790:	4873      	ldr	r0, [pc, #460]	; (8000960 <Configuration+0x2c4>)
 8000792:	f005 f94a 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 8000796:	4b73      	ldr	r3, [pc, #460]	; (8000964 <Configuration+0x2c8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	e008      	b.n	80007b4 <Configuration+0x118>
		ledMatrix[8*i+2] = 1;
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	3302      	adds	r3, #2
 80007a8:	4a6f      	ldr	r2, [pc, #444]	; (8000968 <Configuration+0x2cc>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	3301      	adds	r3, #1
 80007b2:	75fb      	strb	r3, [r7, #23]
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	d9f3      	bls.n	80007a2 <Configuration+0x106>
	}
	while((ms-now)<1000){
 80007ba:	bf00      	nop
 80007bc:	4b69      	ldr	r3, [pc, #420]	; (8000964 <Configuration+0x2c8>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007c8:	d3f8      	bcc.n	80007bc <Configuration+0x120>
	}
	for (i = 0; i<8; i++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	75fb      	strb	r3, [r7, #23]
 80007ce:	e008      	b.n	80007e2 <Configuration+0x146>
		ledMatrix[8*i+2] = 0;
 80007d0:	7dfb      	ldrb	r3, [r7, #23]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	3302      	adds	r3, #2
 80007d6:	4a64      	ldr	r2, [pc, #400]	; (8000968 <Configuration+0x2cc>)
 80007d8:	2100      	movs	r1, #0
 80007da:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	3301      	adds	r3, #1
 80007e0:	75fb      	strb	r3, [r7, #23]
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d9f3      	bls.n	80007d0 <Configuration+0x134>
	}

	posStr[2] = '3';
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2,posStr, 10, 100);
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	220a      	movs	r2, #10
 80007f2:	485b      	ldr	r0, [pc, #364]	; (8000960 <Configuration+0x2c4>)
 80007f4:	f005 f919 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 80007f8:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <Configuration+0x2c8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 80007fe:	2300      	movs	r3, #0
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	e008      	b.n	8000816 <Configuration+0x17a>
		ledMatrix[8*i+3] = 1;
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	3303      	adds	r3, #3
 800080a:	4a57      	ldr	r2, [pc, #348]	; (8000968 <Configuration+0x2cc>)
 800080c:	2101      	movs	r1, #1
 800080e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	3301      	adds	r3, #1
 8000814:	75fb      	strb	r3, [r7, #23]
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	2b07      	cmp	r3, #7
 800081a:	d9f3      	bls.n	8000804 <Configuration+0x168>
	}
	while((ms-now)<1000){
 800081c:	bf00      	nop
 800081e:	4b51      	ldr	r3, [pc, #324]	; (8000964 <Configuration+0x2c8>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082a:	d3f8      	bcc.n	800081e <Configuration+0x182>
	}
	for (i = 0; i<8; i++){
 800082c:	2300      	movs	r3, #0
 800082e:	75fb      	strb	r3, [r7, #23]
 8000830:	e008      	b.n	8000844 <Configuration+0x1a8>
		ledMatrix[8*i+3] = 0;
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	3303      	adds	r3, #3
 8000838:	4a4b      	ldr	r2, [pc, #300]	; (8000968 <Configuration+0x2cc>)
 800083a:	2100      	movs	r1, #0
 800083c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	3301      	adds	r3, #1
 8000842:	75fb      	strb	r3, [r7, #23]
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d9f3      	bls.n	8000832 <Configuration+0x196>
	}

	posStr[2] = '4';
 800084a:	2334      	movs	r3, #52	; 0x34
 800084c:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	220a      	movs	r2, #10
 8000854:	4842      	ldr	r0, [pc, #264]	; (8000960 <Configuration+0x2c4>)
 8000856:	f005 f8e8 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <Configuration+0x2c8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 8000860:	2300      	movs	r3, #0
 8000862:	75fb      	strb	r3, [r7, #23]
 8000864:	e008      	b.n	8000878 <Configuration+0x1dc>
		ledMatrix[8*i+4] = 1;
 8000866:	7dfb      	ldrb	r3, [r7, #23]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	3304      	adds	r3, #4
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <Configuration+0x2cc>)
 800086e:	2101      	movs	r1, #1
 8000870:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	3301      	adds	r3, #1
 8000876:	75fb      	strb	r3, [r7, #23]
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b07      	cmp	r3, #7
 800087c:	d9f3      	bls.n	8000866 <Configuration+0x1ca>
	}
	while((ms-now)<1000){
 800087e:	bf00      	nop
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <Configuration+0x2c8>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088c:	d3f8      	bcc.n	8000880 <Configuration+0x1e4>
	}
	for (i = 0; i<8; i++){
 800088e:	2300      	movs	r3, #0
 8000890:	75fb      	strb	r3, [r7, #23]
 8000892:	e008      	b.n	80008a6 <Configuration+0x20a>
		ledMatrix[8*i+4] = 0;
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	3304      	adds	r3, #4
 800089a:	4a33      	ldr	r2, [pc, #204]	; (8000968 <Configuration+0x2cc>)
 800089c:	2100      	movs	r1, #0
 800089e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	3301      	adds	r3, #1
 80008a4:	75fb      	strb	r3, [r7, #23]
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	d9f3      	bls.n	8000894 <Configuration+0x1f8>
	}

	posStr[2] = '5';
 80008ac:	2335      	movs	r3, #53	; 0x35
 80008ae:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 80008b0:	1d39      	adds	r1, r7, #4
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	220a      	movs	r2, #10
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <Configuration+0x2c4>)
 80008b8:	f005 f8b7 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <Configuration+0x2c8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]
 80008c6:	e008      	b.n	80008da <Configuration+0x23e>
		ledMatrix[8*i+5] = 1;
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	3305      	adds	r3, #5
 80008ce:	4a26      	ldr	r2, [pc, #152]	; (8000968 <Configuration+0x2cc>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	3301      	adds	r3, #1
 80008d8:	75fb      	strb	r3, [r7, #23]
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	2b07      	cmp	r3, #7
 80008de:	d9f3      	bls.n	80008c8 <Configuration+0x22c>
	}
	while((ms-now)<1000){
 80008e0:	bf00      	nop
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <Configuration+0x2c8>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ee:	d3f8      	bcc.n	80008e2 <Configuration+0x246>
	}
	for (i = 0; i<8; i++){
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]
 80008f4:	e008      	b.n	8000908 <Configuration+0x26c>
		ledMatrix[8*i+5] = 0;
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	3305      	adds	r3, #5
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <Configuration+0x2cc>)
 80008fe:	2100      	movs	r1, #0
 8000900:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	3301      	adds	r3, #1
 8000906:	75fb      	strb	r3, [r7, #23]
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	2b07      	cmp	r3, #7
 800090c:	d9f3      	bls.n	80008f6 <Configuration+0x25a>
	}

	posStr[2] = '6';
 800090e:	2336      	movs	r3, #54	; 0x36
 8000910:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8000912:	1d39      	adds	r1, r7, #4
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	220a      	movs	r2, #10
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <Configuration+0x2c4>)
 800091a:	f005 f886 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <Configuration+0x2c8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]
 8000928:	e008      	b.n	800093c <Configuration+0x2a0>
		ledMatrix[8*i+6] = 1;
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	3306      	adds	r3, #6
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <Configuration+0x2cc>)
 8000932:	2101      	movs	r1, #1
 8000934:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	3301      	adds	r3, #1
 800093a:	75fb      	strb	r3, [r7, #23]
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b07      	cmp	r3, #7
 8000940:	d9f3      	bls.n	800092a <Configuration+0x28e>
	}
	while((ms-now)<1000){
 8000942:	bf00      	nop
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <Configuration+0x2c8>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000950:	d3f8      	bcc.n	8000944 <Configuration+0x2a8>
	}
	for (i = 0; i<8; i++){
 8000952:	2300      	movs	r3, #0
 8000954:	75fb      	strb	r3, [r7, #23]
 8000956:	e012      	b.n	800097e <Configuration+0x2e2>
 8000958:	08006278 	.word	0x08006278
 800095c:	0800626c 	.word	0x0800626c
 8000960:	2000014c 	.word	0x2000014c
 8000964:	2000010c 	.word	0x2000010c
 8000968:	2000002c 	.word	0x2000002c
		ledMatrix[8*i+6] = 0;
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	3306      	adds	r3, #6
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <Configuration+0x354>)
 8000974:	2100      	movs	r1, #0
 8000976:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 8000978:	7dfb      	ldrb	r3, [r7, #23]
 800097a:	3301      	adds	r3, #1
 800097c:	75fb      	strb	r3, [r7, #23]
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d9f3      	bls.n	800096c <Configuration+0x2d0>
	}

	posStr[2] = '7';
 8000984:	2337      	movs	r3, #55	; 0x37
 8000986:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8000988:	1d39      	adds	r1, r7, #4
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	220a      	movs	r2, #10
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <Configuration+0x358>)
 8000990:	f005 f84b 	bl	8005a2a <HAL_UART_Transmit>
	now = ms;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <Configuration+0x35c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	613b      	str	r3, [r7, #16]
	for (i = 0; i<8; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	75fb      	strb	r3, [r7, #23]
 800099e:	e008      	b.n	80009b2 <Configuration+0x316>
		ledMatrix[8*i+7] = 1;
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	3307      	adds	r3, #7
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <Configuration+0x354>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	3301      	adds	r3, #1
 80009b0:	75fb      	strb	r3, [r7, #23]
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	d9f3      	bls.n	80009a0 <Configuration+0x304>
	}
	while((ms-now)<1000){
 80009b8:	bf00      	nop
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <Configuration+0x35c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009c6:	d3f8      	bcc.n	80009ba <Configuration+0x31e>
	}
	for (i = 0; i<8; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	75fb      	strb	r3, [r7, #23]
 80009cc:	e008      	b.n	80009e0 <Configuration+0x344>
		ledMatrix[8*i+7] = 0;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	3307      	adds	r3, #7
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <Configuration+0x354>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<8; i++){
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	3301      	adds	r3, #1
 80009de:	75fb      	strb	r3, [r7, #23]
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d9f3      	bls.n	80009ce <Configuration+0x332>
	}

	return;
 80009e6:	bf00      	nop
}
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	2000014c 	.word	0x2000014c
 80009f8:	2000010c 	.word	0x2000010c

080009fc <displayHome>:

void displayHome()
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	ledMatrix[0] = 1;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <displayHome+0x28>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
	ledMatrix[7] = 1;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <displayHome+0x28>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	71da      	strb	r2, [r3, #7]
	ledMatrix[56] = 1;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <displayHome+0x28>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	ledMatrix[63] = 1;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <displayHome+0x28>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	return;
 8000a1c:	bf00      	nop
}
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <resetLED>:

void resetLED(){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint8_t j = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i<8; i++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e012      	b.n	8000a62 <resetLED+0x3a>
		for (j = 0; j<8; j++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71bb      	strb	r3, [r7, #6]
 8000a40:	e009      	b.n	8000a56 <resetLED+0x2e>
			ledMatrix[i+8*j] = 0;
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <resetLED+0x4c>)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j<8; j++){
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d9f2      	bls.n	8000a42 <resetLED+0x1a>
	for (i = 0; i<8; i++){
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d9e9      	bls.n	8000a3c <resetLED+0x14>
		}
	}
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000002c 	.word	0x2000002c

08000a78 <Maze>:


void Maze()
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000a7e:	af04      	add	r7, sp, #16
	uint8_t xpos = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t ypos = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	uint8_t endPosX = 7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
	uint8_t endPosY = 7;
 8000a92:	2307      	movs	r3, #7
 8000a94:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
	uint8_t posStr[] = "$300_____\n";
 8000a98:	4ad9      	ldr	r2, [pc, #868]	; (8000e00 <Maze+0x388>)
 8000a9a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa0:	c303      	stmia	r3!, {r0, r1}
 8000aa2:	801a      	strh	r2, [r3, #0]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	0c12      	lsrs	r2, r2, #16
 8000aa8:	701a      	strb	r2, [r3, #0]
	_Bool gameEnd = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	uint8_t maze1[] = {
 8000ab0:	4bd4      	ldr	r3, [pc, #848]	; (8000e04 <Maze+0x38c>)
 8000ab2:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 0, 0, 0, 1, 0, 0, 0,
			1, 1, 0, 1, 1, 0, 1, 0,
			0, 0, 0, 1, 0, 0, 1, 0,
			0, 1, 0, 0, 0, 1, 1, 0,
	};
	uint8_t maze2[] = {
 8000acc:	4bce      	ldr	r3, [pc, #824]	; (8000e08 <Maze+0x390>)
 8000ace:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 8000ad2:	461d      	mov	r5, r3
 8000ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 0, 1, 1, 1, 1, 0, 0,
			1, 0, 1, 0, 0, 1, 1, 0,
			0, 0, 1, 0, 0, 0, 1, 0,
			0, 0, 0, 0, 1, 0, 0, 0,
	};
	uint8_t maze3[] = {
 8000ae8:	4bc8      	ldr	r3, [pc, #800]	; (8000e0c <Maze+0x394>)
 8000aea:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 8000aee:	461d      	mov	r5, r3
 8000af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 0, 1, 0, 1, 1, 1, 0,
			0, 1, 0, 0, 1, 0, 0, 0,
			0, 1, 0, 1, 1, 0, 1, 1,
			0, 0, 0, 0, 1, 0, 0, 0,
	};
	uint8_t maze4[] = {
 8000b04:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b08:	4ac1      	ldr	r2, [pc, #772]	; (8000e10 <Maze+0x398>)
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 1, 0, 1, 0, 0, 1, 0,
			0, 0, 0, 0, 0, 1, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 1,
			0, 0, 0, 0, 0, 0, 0, 0,
	};
	uint8_t one[] = {
 8000b22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b26:	4618      	mov	r0, r3
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f005 fb89 	bl	8006244 <memset>
 8000b32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b36:	2201      	movs	r2, #1
 8000b38:	72da      	strb	r2, [r3, #11]
 8000b3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b3e:	2201      	movs	r2, #1
 8000b40:	74da      	strb	r2, [r3, #19]
 8000b42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b46:	2201      	movs	r2, #1
 8000b48:	76da      	strb	r2, [r3, #27]
 8000b4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000b54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000b5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b62:	2201      	movs	r2, #1
 8000b64:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
	};
	uint8_t two[] = {
 8000b68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	461a      	mov	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	f005 fb66 	bl	8006244 <memset>
 8000b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	72da      	strb	r2, [r3, #11]
 8000b80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b84:	2201      	movs	r2, #1
 8000b86:	731a      	strb	r2, [r3, #12]
 8000b88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	749a      	strb	r2, [r3, #18]
 8000b90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b94:	2201      	movs	r2, #1
 8000b96:	755a      	strb	r2, [r3, #21]
 8000b98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	775a      	strb	r2, [r3, #29]
 8000ba0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000baa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000bb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000bbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000bc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000bd2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			0, 0, 0, 0, 1, 0, 0, 0,
			0, 0, 0, 1, 0, 0, 0, 0,
			0, 0, 1, 1, 1, 1, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
	};
	uint8_t three[] = {
 8000bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000be0:	4618      	mov	r0, r3
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	461a      	mov	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f005 fb2c 	bl	8006244 <memset>
 8000bec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	729a      	strb	r2, [r3, #10]
 8000bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	72da      	strb	r2, [r3, #11]
 8000bfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c00:	2201      	movs	r2, #1
 8000c02:	751a      	strb	r2, [r3, #20]
 8000c04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c08:	2201      	movs	r2, #1
 8000c0a:	769a      	strb	r2, [r3, #26]
 8000c0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c10:	2201      	movs	r2, #1
 8000c12:	76da      	strb	r2, [r3, #27]
 8000c14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000c1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000c28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000c32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			0, 0, 0, 0, 1, 0, 0, 0,
			0, 0, 0, 0, 1, 0, 0, 0,
			0, 0, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
	};
	uint8_t four[] = {
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	2340      	movs	r3, #64	; 0x40
 8000c42:	461a      	mov	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	f005 fafd 	bl	8006244 <memset>
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	739a      	strb	r2, [r3, #14]
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2201      	movs	r2, #1
 8000c54:	755a      	strb	r2, [r3, #21]
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2201      	movs	r2, #1
 8000c5a:	771a      	strb	r2, [r3, #28]
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			0, 0, 0, 1, 0, 1, 0, 0,
			0, 0, 1, 1, 1, 1, 1, 0,
			0, 0, 0, 0, 0, 1, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
	};
	uint8_t i = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
	uint8_t j = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
	_Bool ledOn = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
	uint8_t mazeNumber = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	_Bool changeMaze = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	uint8_t i2c[2];
	int16_t imuX;
	int16_t imuY;

	Up = 0;
 8000cba:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <Maze+0x39c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	Down = 0;
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <Maze+0x3a0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	Middle = 0;
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <Maze+0x3a4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

	for (i = 0; i<8; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000cd2:	e02d      	b.n	8000d30 <Maze+0x2b8>
		for (j = 0; j<8; j++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000cda:	e01a      	b.n	8000d12 <Maze+0x29a>
			ledMatrix[8*i+j] = one[8*i+j];
 8000cdc:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000ce0:	00da      	lsls	r2, r3, #3
 8000ce2:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000cec:	5cd2      	ldrb	r2, [r2, r3]
 8000cee:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000cf2:	00d9      	lsls	r1, r3, #3
 8000cf4:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000cf8:	440b      	add	r3, r1
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2201      	movne	r2, #1
 8000d00:	2200      	moveq	r2, #0
 8000d02:	b2d1      	uxtb	r1, r2
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <Maze+0x3a8>)
 8000d06:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j<8; j++){
 8000d08:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000d12:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d9e0      	bls.n	8000cdc <Maze+0x264>
		}
		HAL_GPIO_WritePin(LED1A, LED1, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4840      	ldr	r0, [pc, #256]	; (8000e24 <Maze+0x3ac>)
 8000d22:	f003 f93b 	bl	8003f9c <HAL_GPIO_WritePin>
	for (i = 0; i<8; i++){
 8000d26:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000d30:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000d34:	2b07      	cmp	r3, #7
 8000d36:	d9cd      	bls.n	8000cd4 <Maze+0x25c>
	}
	while(!Middle){
 8000d38:	e14c      	b.n	8000fd4 <Maze+0x55c>
		if(Up) {
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <Maze+0x39c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d011      	beq.n	8000d68 <Maze+0x2f0>
			mazeNumber++;
 8000d44:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			if (mazeNumber>4){
 8000d4e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d902      	bls.n	8000d5c <Maze+0x2e4>
				mazeNumber = 4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			}
			changeMaze = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			Up = 0;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <Maze+0x39c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		}
		if(Down){
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <Maze+0x3a0>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d011      	beq.n	8000d96 <Maze+0x31e>
			mazeNumber--;
 8000d72:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			if (mazeNumber < 1){
 8000d7c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <Maze+0x312>
				mazeNumber = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
			}
			changeMaze = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
			Down = 0;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <Maze+0x3a0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
		}
		if (changeMaze) {
 8000d96:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 811a 	beq.w	8000fd4 <Maze+0x55c>
			HAL_GPIO_WritePin(LED1A, LED1, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da6:	481f      	ldr	r0, [pc, #124]	; (8000e24 <Maze+0x3ac>)
 8000da8:	f003 f8f8 	bl	8003f9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2A, LED2, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <Maze+0x3ac>)
 8000db4:	f003 f8f2 	bl	8003f9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3A, LED3, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <Maze+0x3b0>)
 8000dbe:	f003 f8ed 	bl	8003f9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4A, LED4, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	4818      	ldr	r0, [pc, #96]	; (8000e28 <Maze+0x3b0>)
 8000dc8:	f003 f8e8 	bl	8003f9c <HAL_GPIO_WritePin>
			switch (mazeNumber){
 8000dcc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	f200 80fb 	bhi.w	8000fce <Maze+0x556>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <Maze+0x368>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000e8b 	.word	0x08000e8b
 8000de8:	08000ef9 	.word	0x08000ef9
 8000dec:	08000f65 	.word	0x08000f65
			case 1:
				for (i = 0; i<8; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000df6:	e03d      	b.n	8000e74 <Maze+0x3fc>
					for (j = 0; j<8; j++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000dfe:	e030      	b.n	8000e62 <Maze+0x3ea>
 8000e00:	08006284 	.word	0x08006284
 8000e04:	08006290 	.word	0x08006290
 8000e08:	080062d0 	.word	0x080062d0
 8000e0c:	08006310 	.word	0x08006310
 8000e10:	08006350 	.word	0x08006350
 8000e14:	20000149 	.word	0x20000149
 8000e18:	20000148 	.word	0x20000148
 8000e1c:	20000112 	.word	0x20000112
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40010800 	.word	0x40010800
						ledMatrix[8*i+j] = one[8*i+j];
 8000e2c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000e30:	00da      	lsls	r2, r3, #3
 8000e32:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000e36:	4413      	add	r3, r2
 8000e38:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000e3c:	5cd2      	ldrb	r2, [r2, r3]
 8000e3e:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000e42:	00d9      	lsls	r1, r3, #3
 8000e44:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000e48:	440b      	add	r3, r1
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2201      	movne	r2, #1
 8000e50:	2200      	moveq	r2, #0
 8000e52:	b2d1      	uxtb	r1, r2
 8000e54:	4ac8      	ldr	r2, [pc, #800]	; (8001178 <Maze+0x700>)
 8000e56:	54d1      	strb	r1, [r2, r3]
					for (j = 0; j<8; j++){
 8000e58:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000e62:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	d9e0      	bls.n	8000e2c <Maze+0x3b4>
				for (i = 0; i<8; i++){
 8000e6a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000e74:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d9bd      	bls.n	8000df8 <Maze+0x380>
					}
				}
				HAL_GPIO_WritePin(LED1A, LED1, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e82:	48be      	ldr	r0, [pc, #760]	; (800117c <Maze+0x704>)
 8000e84:	f003 f88a 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8000e88:	e0a1      	b.n	8000fce <Maze+0x556>
			case 2:
				for (i = 0; i<8; i++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000e90:	e027      	b.n	8000ee2 <Maze+0x46a>
					for (j = 0; j<8; j++){
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000e98:	e01a      	b.n	8000ed0 <Maze+0x458>
						ledMatrix[8*i+j] = two[8*i+j];
 8000e9a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000e9e:	00da      	lsls	r2, r3, #3
 8000ea0:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000eaa:	5cd2      	ldrb	r2, [r2, r3]
 8000eac:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000eb0:	00d9      	lsls	r1, r3, #3
 8000eb2:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000eb6:	440b      	add	r3, r1
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2201      	movne	r2, #1
 8000ebe:	2200      	moveq	r2, #0
 8000ec0:	b2d1      	uxtb	r1, r2
 8000ec2:	4aad      	ldr	r2, [pc, #692]	; (8001178 <Maze+0x700>)
 8000ec4:	54d1      	strb	r1, [r2, r3]
					for (j = 0; j<8; j++){
 8000ec6:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000ed0:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d9e0      	bls.n	8000e9a <Maze+0x422>
				for (i = 0; i<8; i++){
 8000ed8:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000edc:	3301      	adds	r3, #1
 8000ede:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000ee2:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000ee6:	2b07      	cmp	r3, #7
 8000ee8:	d9d3      	bls.n	8000e92 <Maze+0x41a>
					}
				}
				HAL_GPIO_WritePin(LED2A, LED2, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	48a2      	ldr	r0, [pc, #648]	; (800117c <Maze+0x704>)
 8000ef2:	f003 f853 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8000ef6:	e06a      	b.n	8000fce <Maze+0x556>
			case 3:
				for (i = 0; i<8; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000efe:	e027      	b.n	8000f50 <Maze+0x4d8>
					for (j = 0; j<8; j++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000f06:	e01a      	b.n	8000f3e <Maze+0x4c6>
						ledMatrix[8*i+j] = three[8*i+j];
 8000f08:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f0c:	00da      	lsls	r2, r3, #3
 8000f0e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f12:	4413      	add	r3, r2
 8000f14:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f18:	5cd2      	ldrb	r2, [r2, r3]
 8000f1a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f1e:	00d9      	lsls	r1, r3, #3
 8000f20:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f24:	440b      	add	r3, r1
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2201      	movne	r2, #1
 8000f2c:	2200      	moveq	r2, #0
 8000f2e:	b2d1      	uxtb	r1, r2
 8000f30:	4a91      	ldr	r2, [pc, #580]	; (8001178 <Maze+0x700>)
 8000f32:	54d1      	strb	r1, [r2, r3]
					for (j = 0; j<8; j++){
 8000f34:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000f3e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d9e0      	bls.n	8000f08 <Maze+0x490>
				for (i = 0; i<8; i++){
 8000f46:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000f50:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d9d3      	bls.n	8000f00 <Maze+0x488>
					}
				}
				HAL_GPIO_WritePin(LED3A, LED3, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4888      	ldr	r0, [pc, #544]	; (8001180 <Maze+0x708>)
 8000f5e:	f003 f81d 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8000f62:	e034      	b.n	8000fce <Maze+0x556>
			case 4:
				for (i = 0; i<8; i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000f6a:	e026      	b.n	8000fba <Maze+0x542>
					for (j = 0; j<8; j++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000f72:	e019      	b.n	8000fa8 <Maze+0x530>
						ledMatrix[8*i+j] = four[8*i+j];
 8000f74:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f78:	00da      	lsls	r2, r3, #3
 8000f7a:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f7e:	4413      	add	r3, r2
 8000f80:	1d3a      	adds	r2, r7, #4
 8000f82:	5cd2      	ldrb	r2, [r2, r3]
 8000f84:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000f88:	00d9      	lsls	r1, r3, #3
 8000f8a:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000f8e:	440b      	add	r3, r1
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2201      	movne	r2, #1
 8000f96:	2200      	moveq	r2, #0
 8000f98:	b2d1      	uxtb	r1, r2
 8000f9a:	4a77      	ldr	r2, [pc, #476]	; (8001178 <Maze+0x700>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
					for (j = 0; j<8; j++){
 8000f9e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8000fa8:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d9e1      	bls.n	8000f74 <Maze+0x4fc>
				for (i = 0; i<8; i++){
 8000fb0:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8000fba:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8000fbe:	2b07      	cmp	r3, #7
 8000fc0:	d9d4      	bls.n	8000f6c <Maze+0x4f4>
					}
				}
				HAL_GPIO_WritePin(LED4A, LED4, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	486e      	ldr	r0, [pc, #440]	; (8001180 <Maze+0x708>)
 8000fc8:	f002 ffe8 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8000fcc:	bf00      	nop
			}
			changeMaze = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	while(!Middle){
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <Maze+0x70c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f aeaa 	bne.w	8000d3a <Maze+0x2c2>
		}
	}

	Middle = 0;
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <Maze+0x70c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	switch (mazeNumber){
 8000fec:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	f200 80f7 	bhi.w	80011e6 <Maze+0x76e>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <Maze+0x588>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	08001083 	.word	0x08001083
 8001008:	080010f5 	.word	0x080010f5
 800100c:	08001167 	.word	0x08001167
	case 1:
		for (i = 0; i<8; i++){
 8001010:	2300      	movs	r3, #0
 8001012:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8001016:	e029      	b.n	800106c <Maze+0x5f4>
			for (j = 0; j<8; j++){
 8001018:	2300      	movs	r3, #0
 800101a:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 800101e:	e01c      	b.n	800105a <Maze+0x5e2>
				ledMatrix[8*i+j] = maze1[8*i+j];
 8001020:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001024:	00da      	lsls	r2, r3, #3
 8001026:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800102a:	4413      	add	r3, r2
 800102c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001030:	4413      	add	r3, r2
 8001032:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
 8001036:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800103a:	00d9      	lsls	r1, r3, #3
 800103c:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001040:	440b      	add	r3, r1
 8001042:	2a00      	cmp	r2, #0
 8001044:	bf14      	ite	ne
 8001046:	2201      	movne	r2, #1
 8001048:	2200      	moveq	r2, #0
 800104a:	b2d1      	uxtb	r1, r2
 800104c:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <Maze+0x700>)
 800104e:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j<8; j++){
 8001050:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001054:	3301      	adds	r3, #1
 8001056:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 800105a:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800105e:	2b07      	cmp	r3, #7
 8001060:	d9de      	bls.n	8001020 <Maze+0x5a8>
		for (i = 0; i<8; i++){
 8001062:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001066:	3301      	adds	r3, #1
 8001068:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 800106c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9d1      	bls.n	8001018 <Maze+0x5a0>
			}
		}
		endPosX = 7;
 8001074:	2307      	movs	r3, #7
 8001076:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
		endPosY = 7;
 800107a:	2307      	movs	r3, #7
 800107c:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
		break;
 8001080:	e0b1      	b.n	80011e6 <Maze+0x76e>
	case 2:
		for (i = 0; i<8; i++){
 8001082:	2300      	movs	r3, #0
 8001084:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8001088:	e029      	b.n	80010de <Maze+0x666>
			for (j = 0; j<8; j++){
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8001090:	e01c      	b.n	80010cc <Maze+0x654>
				ledMatrix[8*i+j] = maze2[8*i+j];
 8001092:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800109c:	4413      	add	r3, r2
 800109e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80010a2:	4413      	add	r3, r2
 80010a4:	f813 2c9c 	ldrb.w	r2, [r3, #-156]
 80010a8:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80010ac:	00d9      	lsls	r1, r3, #3
 80010ae:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80010b2:	440b      	add	r3, r1
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2201      	movne	r2, #1
 80010ba:	2200      	moveq	r2, #0
 80010bc:	b2d1      	uxtb	r1, r2
 80010be:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <Maze+0x700>)
 80010c0:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j<8; j++){
 80010c2:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80010c6:	3301      	adds	r3, #1
 80010c8:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 80010cc:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d9de      	bls.n	8001092 <Maze+0x61a>
		for (i = 0; i<8; i++){
 80010d4:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 80010de:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d9d1      	bls.n	800108a <Maze+0x612>
			}
		}
		endPosX = 3;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
		endPosY = 3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
		break;
 80010f2:	e078      	b.n	80011e6 <Maze+0x76e>
	case 3:
		for (i = 0; i<8; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 80010fa:	e029      	b.n	8001150 <Maze+0x6d8>
			for (j = 0; j<8; j++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8001102:	e01c      	b.n	800113e <Maze+0x6c6>
				ledMatrix[8*i+j] = maze3[8*i+j];
 8001104:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001108:	00da      	lsls	r2, r3, #3
 800110a:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800110e:	4413      	add	r3, r2
 8001110:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001114:	4413      	add	r3, r2
 8001116:	f813 2cdc 	ldrb.w	r2, [r3, #-220]
 800111a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800111e:	00d9      	lsls	r1, r3, #3
 8001120:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001124:	440b      	add	r3, r1
 8001126:	2a00      	cmp	r2, #0
 8001128:	bf14      	ite	ne
 800112a:	2201      	movne	r2, #1
 800112c:	2200      	moveq	r2, #0
 800112e:	b2d1      	uxtb	r1, r2
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <Maze+0x700>)
 8001132:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j<8; j++){
 8001134:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001138:	3301      	adds	r3, #1
 800113a:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 800113e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001142:	2b07      	cmp	r3, #7
 8001144:	d9de      	bls.n	8001104 <Maze+0x68c>
		for (i = 0; i<8; i++){
 8001146:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800114a:	3301      	adds	r3, #1
 800114c:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8001150:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8001154:	2b07      	cmp	r3, #7
 8001156:	d9d1      	bls.n	80010fc <Maze+0x684>
			}
		}
		endPosX = 7;
 8001158:	2307      	movs	r3, #7
 800115a:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
		endPosY = 7;
 800115e:	2307      	movs	r3, #7
 8001160:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
		break;
 8001164:	e03f      	b.n	80011e6 <Maze+0x76e>
	case 4:
		for (i = 0; i<8; i++){
 8001166:	2300      	movs	r3, #0
 8001168:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 800116c:	e030      	b.n	80011d0 <Maze+0x758>
			for (j = 0; j<8; j++){
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8001174:	e023      	b.n	80011be <Maze+0x746>
 8001176:	bf00      	nop
 8001178:	2000002c 	.word	0x2000002c
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40010800 	.word	0x40010800
 8001184:	20000112 	.word	0x20000112
				ledMatrix[8*i+j] = maze4[8*i+j];
 8001188:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001192:	4413      	add	r3, r2
 8001194:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001198:	5cd2      	ldrb	r2, [r2, r3]
 800119a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800119e:	00d9      	lsls	r1, r3, #3
 80011a0:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80011a4:	440b      	add	r3, r1
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2201      	movne	r2, #1
 80011ac:	2200      	moveq	r2, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	4a80      	ldr	r2, [pc, #512]	; (80013b4 <Maze+0x93c>)
 80011b2:	54d1      	strb	r1, [r2, r3]
			for (j = 0; j<8; j++){
 80011b4:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80011b8:	3301      	adds	r3, #1
 80011ba:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 80011be:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d9e0      	bls.n	8001188 <Maze+0x710>
		for (i = 0; i<8; i++){
 80011c6:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80011ca:	3301      	adds	r3, #1
 80011cc:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 80011d0:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9ca      	bls.n	800116e <Maze+0x6f6>
			}
		}
		endPosX = 2;
 80011d8:	2302      	movs	r3, #2
 80011da:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
		endPosY = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
		break;
 80011e4:	bf00      	nop
	}
	vel = 9;
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <Maze+0x940>)
 80011e8:	2209      	movs	r2, #9
 80011ea:	701a      	strb	r2, [r3, #0]
	mod = 0;
 80011ec:	4b73      	ldr	r3, [pc, #460]	; (80013bc <Maze+0x944>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
	ms100 = 0;
 80011f2:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <Maze+0x948>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	varTim = 0;
 80011f8:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <Maze+0x94c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

	while(!varTim){
 80011fe:	bf00      	nop
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <Maze+0x94c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f7      	bne.n	8001200 <Maze+0x788>
	}
	while ((!Middle)&&(!gameEnd))
 8001210:	e2bc      	b.n	800178c <Maze+0xd14>
	{
		if(ms100)
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <Maze+0x948>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d019      	beq.n	8001250 <Maze+0x7d8>
		{
			ms100 = 0;
 800121c:	4b68      	ldr	r3, [pc, #416]	; (80013c0 <Maze+0x948>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
			ledMatrix[endPosX + 8*endPosY] = 1 - ledMatrix[endPosX + 8*endPosY];
 8001222:	f897 221d 	ldrb.w	r2, [r7, #541]	; 0x21d
 8001226:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	4a61      	ldr	r2, [pc, #388]	; (80013b4 <Maze+0x93c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	f1c3 0201 	rsb	r2, r3, #1
 8001236:	f897 121d 	ldrb.w	r1, [r7, #541]	; 0x21d
 800123a:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	2a00      	cmp	r2, #0
 8001244:	bf14      	ite	ne
 8001246:	2201      	movne	r2, #1
 8001248:	2200      	moveq	r2, #0
 800124a:	b2d1      	uxtb	r1, r2
 800124c:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <Maze+0x93c>)
 800124e:	54d1      	strb	r1, [r2, r3]
		}
		if(varTim)
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <Maze+0x94c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8298 	beq.w	800178c <Maze+0xd14>
		{
			ledOn = 1 - ledOn;
 800125c:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 8001260:	f1c3 0301 	rsb	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
			varTim = 0;
 8001270:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <Maze+0x94c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
			if(Left && xpos>0 && ((ledMatrix[xpos-1 + 8*ypos] == 0)||((xpos == endPosX+1) && (ypos == endPosY))))
 8001276:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <Maze+0x950>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02d      	beq.n	80012dc <Maze+0x864>
 8001280:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001284:	2b00      	cmp	r3, #0
 8001286:	d029      	beq.n	80012dc <Maze+0x864>
 8001288:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800128c:	1e5a      	subs	r2, r3, #1
 800128e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <Maze+0x93c>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10c      	bne.n	80012be <Maze+0x846>
 80012a4:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80012a8:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 80012ac:	3301      	adds	r3, #1
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d114      	bne.n	80012dc <Maze+0x864>
 80012b2:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 80012b6:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d10e      	bne.n	80012dc <Maze+0x864>
			{
				ledMatrix[xpos+8*ypos] = 0;
 80012be:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80012c2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <Maze+0x93c>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	54d1      	strb	r1, [r2, r3]
				xpos -= 1;
 80012d0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80012d4:	3b01      	subs	r3, #1
 80012d6:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 80012da:	e031      	b.n	8001340 <Maze+0x8c8>
			}
			else if(Right && xpos<7  && ((ledMatrix[xpos+1 + 8*ypos] == 0)||((xpos == endPosX-1) && (ypos == endPosY))))
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <Maze+0x954>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02c      	beq.n	8001340 <Maze+0x8c8>
 80012e6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d828      	bhi.n	8001340 <Maze+0x8c8>
 80012ee:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <Maze+0x93c>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	f083 0301 	eor.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <Maze+0x8ac>
 800130a:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800130e:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8001312:	3b01      	subs	r3, #1
 8001314:	429a      	cmp	r2, r3
 8001316:	d113      	bne.n	8001340 <Maze+0x8c8>
 8001318:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 800131c:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 8001320:	429a      	cmp	r2, r3
 8001322:	d10d      	bne.n	8001340 <Maze+0x8c8>
			{
				ledMatrix[xpos+8*ypos] = 0;
 8001324:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001328:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <Maze+0x93c>)
 8001332:	2100      	movs	r1, #0
 8001334:	54d1      	strb	r1, [r2, r3]
				xpos += 1;
 8001336:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800133a:	3301      	adds	r3, #1
 800133c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
			}
			Left = 0;
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <Maze+0x950>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
			Right = 0;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <Maze+0x954>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
			if(Up && ypos>0 && ((ledMatrix[xpos + 8*(ypos-1)] == 0)||((xpos == endPosX) && (ypos == endPosY+1))))
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <Maze+0x958>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d03e      	beq.n	80013d4 <Maze+0x95c>
 8001356:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03a      	beq.n	80013d4 <Maze+0x95c>
 800135e:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001362:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001366:	3b01      	subs	r3, #1
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <Maze+0x93c>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <Maze+0x91c>
 800137a:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800137e:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8001382:	429a      	cmp	r2, r3
 8001384:	d126      	bne.n	80013d4 <Maze+0x95c>
 8001386:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 800138a:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 800138e:	3301      	adds	r3, #1
 8001390:	429a      	cmp	r2, r3
 8001392:	d11f      	bne.n	80013d4 <Maze+0x95c>
			{
				ledMatrix[xpos+8*ypos] = 0;
 8001394:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001398:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <Maze+0x93c>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	54d1      	strb	r1, [r2, r3]
				ypos -= 1;
 80013a6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
 80013b0:	e042      	b.n	8001438 <Maze+0x9c0>
 80013b2:	bf00      	nop
 80013b4:	2000002c 	.word	0x2000002c
 80013b8:	20000111 	.word	0x20000111
 80013bc:	20000114 	.word	0x20000114
 80013c0:	2000014a 	.word	0x2000014a
 80013c4:	20000108 	.word	0x20000108
 80013c8:	20000110 	.word	0x20000110
 80013cc:	20000070 	.word	0x20000070
 80013d0:	20000149 	.word	0x20000149
			}
			else if(Down && ypos<7  && ((ledMatrix[xpos + 8*(ypos+1)] == 0)||((xpos == endPosX) && (ypos == endPosY-1))))
 80013d4:	4bc5      	ldr	r3, [pc, #788]	; (80016ec <Maze+0xc74>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02c      	beq.n	8001438 <Maze+0x9c0>
 80013de:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d828      	bhi.n	8001438 <Maze+0x9c0>
 80013e6:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80013ea:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80013ee:	3301      	adds	r3, #1
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	4abe      	ldr	r2, [pc, #760]	; (80016f0 <Maze+0xc78>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <Maze+0x9a4>
 8001402:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001406:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 800140a:	429a      	cmp	r2, r3
 800140c:	d114      	bne.n	8001438 <Maze+0x9c0>
 800140e:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 8001412:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 8001416:	3b01      	subs	r3, #1
 8001418:	429a      	cmp	r2, r3
 800141a:	d10d      	bne.n	8001438 <Maze+0x9c0>
			{
				ledMatrix[xpos+8*ypos] = 0;
 800141c:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001420:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	4ab1      	ldr	r2, [pc, #708]	; (80016f0 <Maze+0xc78>)
 800142a:	2100      	movs	r1, #0
 800142c:	54d1      	strb	r1, [r2, r3]
				ypos += 1;
 800142e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001432:	3301      	adds	r3, #1
 8001434:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
			}
			Up = 0;
 8001438:	4bae      	ldr	r3, [pc, #696]	; (80016f4 <Maze+0xc7c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
			Down = 0;
 800143e:	4bab      	ldr	r3, [pc, #684]	; (80016ec <Maze+0xc74>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]

			posStr[6] = 'N';
 8001444:	234e      	movs	r3, #78	; 0x4e
 8001446:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
			i2c[0] = 0x37;
 800144a:	463b      	mov	r3, r7
 800144c:	2237      	movs	r2, #55	; 0x37
 800144e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x20, 1, (uint8_t*) i2c, 1, 100);
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2301      	movs	r3, #1
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	463b      	mov	r3, r7
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	2220      	movs	r2, #32
 8001460:	2132      	movs	r1, #50	; 0x32
 8001462:	48a5      	ldr	r0, [pc, #660]	; (80016f8 <Maze+0xc80>)
 8001464:	f002 ff0c 	bl	8004280 <HAL_I2C_Mem_Write>
			i2c[0] = 0x08;
 8001468:	463b      	mov	r3, r7
 800146a:	2208      	movs	r2, #8
 800146c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x23, 1, (uint8_t*) i2c, 1, 100);
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	463b      	mov	r3, r7
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2223      	movs	r2, #35	; 0x23
 800147e:	2132      	movs	r1, #50	; 0x32
 8001480:	489d      	ldr	r0, [pc, #628]	; (80016f8 <Maze+0xc80>)
 8001482:	f002 fefd 	bl	8004280 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xA8, 1, i2c, 2, 100);
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	463b      	mov	r3, r7
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	22a8      	movs	r2, #168	; 0xa8
 8001496:	2133      	movs	r1, #51	; 0x33
 8001498:	4897      	ldr	r0, [pc, #604]	; (80016f8 <Maze+0xc80>)
 800149a:	f002 ffeb 	bl	8004474 <HAL_I2C_Mem_Read>
			imuX = (i2c[1]<<4)+(i2c[0]>>4);
 800149e:	463b      	mov	r3, r7
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	463b      	mov	r3, r7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
			if ((imuX>>11) == 1){
 80014ba:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80014be:	12db      	asrs	r3, r3, #11
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <Maze+0xa5c>
				imuX = (0xF<<12) + imuX;
 80014c6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80014ca:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
			}
			if (imuX>512) {
 80014d4:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 80014d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014dc:	dd30      	ble.n	8001540 <Maze+0xac8>
				if (xpos>0 && ((ledMatrix[xpos-1 + 8*ypos] == 0)||((xpos == endPosX+1) && (ypos == endPosY)))) {
 80014de:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d028      	beq.n	8001538 <Maze+0xac0>
 80014e6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80014ea:	1e5a      	subs	r2, r3, #1
 80014ec:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	4a7e      	ldr	r2, [pc, #504]	; (80016f0 <Maze+0xc78>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <Maze+0xaa4>
 8001502:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001506:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 800150a:	3301      	adds	r3, #1
 800150c:	429a      	cmp	r2, r3
 800150e:	d113      	bne.n	8001538 <Maze+0xac0>
 8001510:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 8001514:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 8001518:	429a      	cmp	r2, r3
 800151a:	d10d      	bne.n	8001538 <Maze+0xac0>
					ledMatrix[xpos+8*ypos] = 0;
 800151c:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001520:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <Maze+0xc78>)
 800152a:	2100      	movs	r1, #0
 800152c:	54d1      	strb	r1, [r2, r3]
					xpos--;
 800152e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001532:	3b01      	subs	r3, #1
 8001534:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
				}
				posStr[6] = 'L';
 8001538:	234c      	movs	r3, #76	; 0x4c
 800153a:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 800153e:	e034      	b.n	80015aa <Maze+0xb32>
			}
			else if (imuX<-512) {
 8001540:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8001544:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8001548:	da2f      	bge.n	80015aa <Maze+0xb32>
				if (xpos<7  && ((ledMatrix[xpos+1 + 8*ypos] == 0)||((xpos == endPosX-1) && (ypos == endPosY)))) {
 800154a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800154e:	2b06      	cmp	r3, #6
 8001550:	d828      	bhi.n	80015a4 <Maze+0xb2c>
 8001552:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <Maze+0xc78>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <Maze+0xb10>
 800156e:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001572:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8001576:	3b01      	subs	r3, #1
 8001578:	429a      	cmp	r2, r3
 800157a:	d113      	bne.n	80015a4 <Maze+0xb2c>
 800157c:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 8001580:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 8001584:	429a      	cmp	r2, r3
 8001586:	d10d      	bne.n	80015a4 <Maze+0xb2c>
					ledMatrix[xpos+8*ypos] = 0;
 8001588:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800158c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <Maze+0xc78>)
 8001596:	2100      	movs	r1, #0
 8001598:	54d1      	strb	r1, [r2, r3]
					xpos++;
 800159a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800159e:	3301      	adds	r3, #1
 80015a0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
				}
				posStr[6] = 'R';
 80015a4:	2352      	movs	r3, #82	; 0x52
 80015a6:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
			}
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xAA, 1, i2c, 2, 100);
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2302      	movs	r3, #2
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	463b      	mov	r3, r7
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	22aa      	movs	r2, #170	; 0xaa
 80015ba:	2133      	movs	r1, #51	; 0x33
 80015bc:	484e      	ldr	r0, [pc, #312]	; (80016f8 <Maze+0xc80>)
 80015be:	f002 ff59 	bl	8004474 <HAL_I2C_Mem_Read>
			imuY = (i2c[1]<<4)+(i2c[0]>>4);
 80015c2:	463b      	mov	r3, r7
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	463b      	mov	r3, r7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			if ((imuY>>11) == 1){
 80015de:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	; 0x212
 80015e2:	12db      	asrs	r3, r3, #11
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <Maze+0xb80>
				imuY = (0xF<<12) + imuY;
 80015ea:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80015ee:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
			}
			if (imuY>512) {
 80015f8:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	; 0x212
 80015fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001600:	dd30      	ble.n	8001664 <Maze+0xbec>
				if (ypos<7  && ((ledMatrix[xpos + 8*(ypos+1)] == 0)||((xpos == endPosX) && (ypos == endPosY-1)))) {
 8001602:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001606:	2b06      	cmp	r3, #6
 8001608:	d828      	bhi.n	800165c <Maze+0xbe4>
 800160a:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800160e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001612:	3301      	adds	r3, #1
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <Maze+0xc78>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <Maze+0xbc8>
 8001626:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800162a:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 800162e:	429a      	cmp	r2, r3
 8001630:	d114      	bne.n	800165c <Maze+0xbe4>
 8001632:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 8001636:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 800163a:	3b01      	subs	r3, #1
 800163c:	429a      	cmp	r2, r3
 800163e:	d10d      	bne.n	800165c <Maze+0xbe4>
					ledMatrix[xpos+8*ypos] = 0;
 8001640:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001644:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <Maze+0xc78>)
 800164e:	2100      	movs	r1, #0
 8001650:	54d1      	strb	r1, [r2, r3]
					ypos++;
 8001652:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001656:	3301      	adds	r3, #1
 8001658:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
				}
				posStr[6] = 'D';
 800165c:	2344      	movs	r3, #68	; 0x44
 800165e:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8001662:	e034      	b.n	80016ce <Maze+0xc56>
			}
			else if (imuY<-512) {
 8001664:	f9b7 3212 	ldrsh.w	r3, [r7, #530]	; 0x212
 8001668:	f513 7f00 	cmn.w	r3, #512	; 0x200
 800166c:	da2f      	bge.n	80016ce <Maze+0xc56>
				if (ypos>0 && ((ledMatrix[xpos + 8*(ypos-1)] == 0)||((xpos == endPosX) && (ypos == endPosY+1)))) {
 800166e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001672:	2b00      	cmp	r3, #0
 8001674:	d028      	beq.n	80016c8 <Maze+0xc50>
 8001676:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800167a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800167e:	3b01      	subs	r3, #1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <Maze+0xc78>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <Maze+0xc34>
 8001692:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001696:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 800169a:	429a      	cmp	r2, r3
 800169c:	d114      	bne.n	80016c8 <Maze+0xc50>
 800169e:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 80016a2:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 80016a6:	3301      	adds	r3, #1
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10d      	bne.n	80016c8 <Maze+0xc50>
					ledMatrix[xpos+8*ypos] = 0;
 80016ac:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80016b0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <Maze+0xc78>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	54d1      	strb	r1, [r2, r3]
					ypos--;
 80016be:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
				}
				posStr[6] = 'U';
 80016c8:	2355      	movs	r3, #85	; 0x55
 80016ca:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
			}

			if (ledOn){
 80016ce:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d012      	beq.n	80016fc <Maze+0xc84>
				ledMatrix[xpos+8*ypos] = 1;
 80016d6:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80016da:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <Maze+0xc78>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	54d1      	strb	r1, [r2, r3]
 80016e8:	e011      	b.n	800170e <Maze+0xc96>
 80016ea:	bf00      	nop
 80016ec:	20000148 	.word	0x20000148
 80016f0:	2000002c 	.word	0x2000002c
 80016f4:	20000149 	.word	0x20000149
 80016f8:	200000b4 	.word	0x200000b4
			}
			else {
				ledMatrix[xpos+8*ypos] = 0;
 80016fc:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001700:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <Maze+0xd6c>)
 800170a:	2100      	movs	r1, #0
 800170c:	54d1      	strb	r1, [r2, r3]
			}
			posStr[2] = xpos+48;
 800170e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001712:	3330      	adds	r3, #48	; 0x30
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
			posStr[3] = ypos+48;
 800171a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800171e:	3330      	adds	r3, #48	; 0x30
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
			if (ledMatrix[xpos+8*ypos]) {
 8001726:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 800172a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <Maze+0xd6c>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <Maze+0xcca>
				posStr[4] = 49;
 800173a:	2331      	movs	r3, #49	; 0x31
 800173c:	f887 3208 	strb.w	r3, [r7, #520]	; 0x208
 8001740:	e002      	b.n	8001748 <Maze+0xcd0>
			}
			else {
				posStr[4] = 48;
 8001742:	2330      	movs	r3, #48	; 0x30
 8001744:	f887 3208 	strb.w	r3, [r7, #520]	; 0x208
			}
			if (ledMatrix[63]) {
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <Maze+0xd6c>)
 800174a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <Maze+0xce2>
				posStr[5] = 49;
 8001752:	2331      	movs	r3, #49	; 0x31
 8001754:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 8001758:	e002      	b.n	8001760 <Maze+0xce8>
			}
			else {
				posStr[5] = 48;
 800175a:	2330      	movs	r3, #48	; 0x30
 800175c:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
			}
			HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8001760:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	220a      	movs	r2, #10
 8001768:	481f      	ldr	r0, [pc, #124]	; (80017e8 <Maze+0xd70>)
 800176a:	f004 f95e 	bl	8005a2a <HAL_UART_Transmit>
			if ((xpos == endPosX) && (ypos == endPosY))
 800176e:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8001772:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8001776:	429a      	cmp	r2, r3
 8001778:	d108      	bne.n	800178c <Maze+0xd14>
 800177a:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 800177e:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 8001782:	429a      	cmp	r2, r3
 8001784:	d102      	bne.n	800178c <Maze+0xd14>
			{
				gameEnd = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	while ((!Middle)&&(!gameEnd))
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <Maze+0xd74>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f083 0301 	eor.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <Maze+0xd34>
 800179c:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f47f ad33 	bne.w	8001212 <Maze+0x79a>
			}
		}
	}
	HAL_GPIO_WritePin(LED1A, LED1, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <Maze+0xd78>)
 80017b4:	f002 fbf2 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2A, LED2, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <Maze+0xd78>)
 80017c0:	f002 fbec 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3A, LED3, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <Maze+0xd7c>)
 80017ca:	f002 fbe7 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4A, LED4, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <Maze+0xd7c>)
 80017d4:	f002 fbe2 	bl	8003f9c <HAL_GPIO_WritePin>
	return;
 80017d8:	bf00      	nop
}
 80017da:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80017de:	46bd      	mov	sp, r7
 80017e0:	bdb0      	pop	{r4, r5, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000002c 	.word	0x2000002c
 80017e8:	2000014c 	.word	0x2000014c
 80017ec:	20000112 	.word	0x20000112
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	40010800 	.word	0x40010800

080017f8 <Tennis>:

void Tennis()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af04      	add	r7, sp, #16
	uint8_t xpos = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	77fb      	strb	r3, [r7, #31]
	uint8_t ypos = 4;
 8001802:	2304      	movs	r3, #4
 8001804:	77bb      	strb	r3, [r7, #30]
	uint8_t xpospre = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	74fb      	strb	r3, [r7, #19]
	uint8_t ypospre = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	74bb      	strb	r3, [r7, #18]
	uint8_t posStr[] = "$200_____\n";
 800180e:	4aa2      	ldr	r2, [pc, #648]	; (8001a98 <Tennis+0x2a0>)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	ca07      	ldmia	r2, {r0, r1, r2}
 8001814:	c303      	stmia	r3!, {r0, r1}
 8001816:	801a      	strh	r2, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	0c12      	lsrs	r2, r2, #16
 800181c:	701a      	strb	r2, [r3, #0]
	uint8_t ballX = 7;
 800181e:	2307      	movs	r3, #7
 8001820:	777b      	strb	r3, [r7, #29]
	uint8_t ballY = 4;
 8001822:	2304      	movs	r3, #4
 8001824:	773b      	strb	r3, [r7, #28]
	uint8_t ballXpre = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	747b      	strb	r3, [r7, #17]
	uint8_t ballYpre = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	743b      	strb	r3, [r7, #16]
	uint8_t dir = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	76fb      	strb	r3, [r7, #27]
	uint8_t hitCtr = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	76bb      	strb	r3, [r7, #26]
	_Bool gameEnd = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	767b      	strb	r3, [r7, #25]
	uint8_t i2c[2];
	int16_t imuX;
	int16_t imuY;

	vel = 1;
 800183a:	4b98      	ldr	r3, [pc, #608]	; (8001a9c <Tennis+0x2a4>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
	mod = 0;
 8001840:	4b97      	ldr	r3, [pc, #604]	; (8001aa0 <Tennis+0x2a8>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
	varTim = 0;
 8001846:	4b97      	ldr	r3, [pc, #604]	; (8001aa4 <Tennis+0x2ac>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
	while(!varTim){
 800184c:	bf00      	nop
 800184e:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <Tennis+0x2ac>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f7      	bne.n	800184e <Tennis+0x56>
	}
	varTim = 0;
 800185e:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <Tennis+0x2ac>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
	ms100 = 0;
 8001864:	4b90      	ldr	r3, [pc, #576]	; (8001aa8 <Tennis+0x2b0>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
	while(!ms100){
 800186a:	bf00      	nop
 800186c:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <Tennis+0x2b0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f7      	bne.n	800186c <Tennis+0x74>
	}
	ms100 = 0;
 800187c:	4b8a      	ldr	r3, [pc, #552]	; (8001aa8 <Tennis+0x2b0>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]

	posStr[8] = 'N';
 8001882:	234e      	movs	r3, #78	; 0x4e
 8001884:	733b      	strb	r3, [r7, #12]
	i2c[0] = 0x37;
 8001886:	2337      	movs	r3, #55	; 0x37
 8001888:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x20, 1, (uint8_t*) i2c, 1, 100);
 800188a:	2364      	movs	r3, #100	; 0x64
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2301      	movs	r3, #1
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	463b      	mov	r3, r7
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	2220      	movs	r2, #32
 800189a:	2132      	movs	r1, #50	; 0x32
 800189c:	4883      	ldr	r0, [pc, #524]	; (8001aac <Tennis+0x2b4>)
 800189e:	f002 fcef 	bl	8004280 <HAL_I2C_Mem_Write>
	i2c[0] = 0x08;
 80018a2:	2308      	movs	r3, #8
 80018a4:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x23, 1, (uint8_t*) i2c, 1, 100);
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	463b      	mov	r3, r7
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	2223      	movs	r2, #35	; 0x23
 80018b6:	2132      	movs	r1, #50	; 0x32
 80018b8:	487c      	ldr	r0, [pc, #496]	; (8001aac <Tennis+0x2b4>)
 80018ba:	f002 fce1 	bl	8004280 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xA8, 1, i2c, 2, 100);
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	463b      	mov	r3, r7
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	22a8      	movs	r2, #168	; 0xa8
 80018ce:	2133      	movs	r1, #51	; 0x33
 80018d0:	4876      	ldr	r0, [pc, #472]	; (8001aac <Tennis+0x2b4>)
 80018d2:	f002 fdcf 	bl	8004474 <HAL_I2C_Mem_Read>
	imuX = (i2c[1]<<4)+(i2c[0]>>4);
 80018d6:	787b      	ldrb	r3, [r7, #1]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	b29a      	uxth	r2, r3
 80018de:	783b      	ldrb	r3, [r7, #0]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	82fb      	strh	r3, [r7, #22]
	if ((imuX>>11) == 1){
 80018ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f0:	12db      	asrs	r3, r3, #11
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <Tennis+0x10a>
		imuX = (0xF<<12) + imuX;
 80018f8:	8afb      	ldrh	r3, [r7, #22]
 80018fa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80018fe:	b29b      	uxth	r3, r3
 8001900:	82fb      	strh	r3, [r7, #22]
	}
	if (imuX>512) {
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190a:	dd08      	ble.n	800191e <Tennis+0x126>
		if (xpos>0) {
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <Tennis+0x120>
			xpos--;
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	3b01      	subs	r3, #1
 8001916:	77fb      	strb	r3, [r7, #31]
		}
		posStr[8] = 'L';
 8001918:	234c      	movs	r3, #76	; 0x4c
 800191a:	733b      	strb	r3, [r7, #12]
 800191c:	e00c      	b.n	8001938 <Tennis+0x140>
	}
	else if (imuX<-512) {
 800191e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001922:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8001926:	da07      	bge.n	8001938 <Tennis+0x140>
		if (xpos<7) {
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	2b06      	cmp	r3, #6
 800192c:	d802      	bhi.n	8001934 <Tennis+0x13c>
			xpos++;
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	3301      	adds	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
		}
		posStr[8] = 'R';
 8001934:	2352      	movs	r3, #82	; 0x52
 8001936:	733b      	strb	r3, [r7, #12]
	}
	HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xAA, 1, i2c, 2, 100);
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	2302      	movs	r3, #2
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	463b      	mov	r3, r7
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	22aa      	movs	r2, #170	; 0xaa
 8001948:	2133      	movs	r1, #51	; 0x33
 800194a:	4858      	ldr	r0, [pc, #352]	; (8001aac <Tennis+0x2b4>)
 800194c:	f002 fd92 	bl	8004474 <HAL_I2C_Mem_Read>
	imuY = (i2c[1]<<4)+(i2c[0]>>4);
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	b29b      	uxth	r3, r3
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	b29a      	uxth	r2, r3
 8001958:	783b      	ldrb	r3, [r7, #0]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	b2db      	uxtb	r3, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	82bb      	strh	r3, [r7, #20]
	if ((imuY>>11) == 1){
 8001966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800196a:	12db      	asrs	r3, r3, #11
 800196c:	b21b      	sxth	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d104      	bne.n	800197c <Tennis+0x184>
		imuY = (0xF<<12) + imuY;
 8001972:	8abb      	ldrh	r3, [r7, #20]
 8001974:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001978:	b29b      	uxth	r3, r3
 800197a:	82bb      	strh	r3, [r7, #20]
	}
	if (imuY>512) {
 800197c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001984:	dd08      	ble.n	8001998 <Tennis+0x1a0>
		if (ypos<6) {
 8001986:	7fbb      	ldrb	r3, [r7, #30]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d802      	bhi.n	8001992 <Tennis+0x19a>
			ypos++;
 800198c:	7fbb      	ldrb	r3, [r7, #30]
 800198e:	3301      	adds	r3, #1
 8001990:	77bb      	strb	r3, [r7, #30]
		}
		posStr[8] = 'D';
 8001992:	2344      	movs	r3, #68	; 0x44
 8001994:	733b      	strb	r3, [r7, #12]
 8001996:	e00c      	b.n	80019b2 <Tennis+0x1ba>
	}
	else if (imuY<-512) {
 8001998:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800199c:	f513 7f00 	cmn.w	r3, #512	; 0x200
 80019a0:	da07      	bge.n	80019b2 <Tennis+0x1ba>
		if (ypos>0) {
 80019a2:	7fbb      	ldrb	r3, [r7, #30]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <Tennis+0x1b6>
			ypos--;
 80019a8:	7fbb      	ldrb	r3, [r7, #30]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	77bb      	strb	r3, [r7, #30]
		}
		posStr[8] = 'U';
 80019ae:	2355      	movs	r3, #85	; 0x55
 80019b0:	733b      	strb	r3, [r7, #12]
	}
	ledMatrix[xpos+8*ypos] = 1;
 80019b2:	7ffa      	ldrb	r2, [r7, #31]
 80019b4:	7fbb      	ldrb	r3, [r7, #30]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <Tennis+0x2b8>)
 80019bc:	2101      	movs	r1, #1
 80019be:	54d1      	strb	r1, [r2, r3]
	ledMatrix[xpos+8*(ypos+1)] = 1;
 80019c0:	7ffa      	ldrb	r2, [r7, #31]
 80019c2:	7fbb      	ldrb	r3, [r7, #30]
 80019c4:	3301      	adds	r3, #1
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <Tennis+0x2b8>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	54d1      	strb	r1, [r2, r3]
	ledMatrix[ballX + 8*ballY] = 1;
 80019d0:	7f7a      	ldrb	r2, [r7, #29]
 80019d2:	7f3b      	ldrb	r3, [r7, #28]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <Tennis+0x2b8>)
 80019da:	2101      	movs	r1, #1
 80019dc:	54d1      	strb	r1, [r2, r3]
	posStr[2] = ballX+48;
 80019de:	7f7b      	ldrb	r3, [r7, #29]
 80019e0:	3330      	adds	r3, #48	; 0x30
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	71bb      	strb	r3, [r7, #6]
	posStr[3] = ballY+48;
 80019e6:	7f3b      	ldrb	r3, [r7, #28]
 80019e8:	3330      	adds	r3, #48	; 0x30
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	71fb      	strb	r3, [r7, #7]
	posStr[4] = vel+48;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <Tennis+0x2a4>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3330      	adds	r3, #48	; 0x30
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	723b      	strb	r3, [r7, #8]
	posStr[5] = dir+48;
 80019f8:	7efb      	ldrb	r3, [r7, #27]
 80019fa:	3330      	adds	r3, #48	; 0x30
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	727b      	strb	r3, [r7, #9]
	posStr[6] = xpos+48;
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	3330      	adds	r3, #48	; 0x30
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	72bb      	strb	r3, [r7, #10]
	posStr[7] = ypos+48;
 8001a08:	7fbb      	ldrb	r3, [r7, #30]
 8001a0a:	3330      	adds	r3, #48	; 0x30
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8001a10:	1d39      	adds	r1, r7, #4
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	220a      	movs	r2, #10
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <Tennis+0x2bc>)
 8001a18:	f004 f807 	bl	8005a2a <HAL_UART_Transmit>
	Up = 0;
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <Tennis+0x2c0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	Down = 0;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <Tennis+0x2c4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
	Left = 0;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <Tennis+0x2c8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
	Right = 0;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <Tennis+0x2cc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]

	while((!Middle)&&(!gameEnd)){
 8001a34:	e32d      	b.n	8002092 <Tennis+0x89a>
		if(ms100){
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <Tennis+0x2b0>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8136 	beq.w	8001cae <Tennis+0x4b6>
			ms100 = 0;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <Tennis+0x2b0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			xpospre = xpos;
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	74fb      	strb	r3, [r7, #19]
			ypospre = ypos;
 8001a4c:	7fbb      	ldrb	r3, [r7, #30]
 8001a4e:	74bb      	strb	r3, [r7, #18]
			if(Up) {
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Tennis+0x2c0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <Tennis+0x270>
				if (ypos>0){
 8001a5a:	7fbb      	ldrb	r3, [r7, #30]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00e      	beq.n	8001a7e <Tennis+0x286>
					ypos--;
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	77bb      	strb	r3, [r7, #30]
 8001a66:	e00a      	b.n	8001a7e <Tennis+0x286>
				}
			}
			else if(Down) {
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <Tennis+0x2c4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <Tennis+0x286>
				if (ypos<6){
 8001a72:	7fbb      	ldrb	r3, [r7, #30]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d802      	bhi.n	8001a7e <Tennis+0x286>
					ypos++;
 8001a78:	7fbb      	ldrb	r3, [r7, #30]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	77bb      	strb	r3, [r7, #30]
				}
			}
			if(Right) {
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <Tennis+0x2cc>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01f      	beq.n	8001ac8 <Tennis+0x2d0>
				if (xpos<7){
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d827      	bhi.n	8001ade <Tennis+0x2e6>
					xpos++;
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	3301      	adds	r3, #1
 8001a92:	77fb      	strb	r3, [r7, #31]
 8001a94:	e023      	b.n	8001ade <Tennis+0x2e6>
 8001a96:	bf00      	nop
 8001a98:	08006390 	.word	0x08006390
 8001a9c:	20000111 	.word	0x20000111
 8001aa0:	20000114 	.word	0x20000114
 8001aa4:	20000108 	.word	0x20000108
 8001aa8:	2000014a 	.word	0x2000014a
 8001aac:	200000b4 	.word	0x200000b4
 8001ab0:	2000002c 	.word	0x2000002c
 8001ab4:	2000014c 	.word	0x2000014c
 8001ab8:	20000149 	.word	0x20000149
 8001abc:	20000148 	.word	0x20000148
 8001ac0:	20000110 	.word	0x20000110
 8001ac4:	20000070 	.word	0x20000070
				}
			}
			else if(Left) {
 8001ac8:	4bb7      	ldr	r3, [pc, #732]	; (8001da8 <Tennis+0x5b0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <Tennis+0x2e6>
				if (xpos>0){
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <Tennis+0x2e6>
					xpos--;
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
				}
			}
			Up = 0;
 8001ade:	4bb3      	ldr	r3, [pc, #716]	; (8001dac <Tennis+0x5b4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
			Down = 0;
 8001ae4:	4bb2      	ldr	r3, [pc, #712]	; (8001db0 <Tennis+0x5b8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
			Left = 0;
 8001aea:	4baf      	ldr	r3, [pc, #700]	; (8001da8 <Tennis+0x5b0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			Right = 0;
 8001af0:	4bb0      	ldr	r3, [pc, #704]	; (8001db4 <Tennis+0x5bc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]

			posStr[8] = 'N';
 8001af6:	234e      	movs	r3, #78	; 0x4e
 8001af8:	733b      	strb	r3, [r7, #12]
			i2c[0] = 0x37;
 8001afa:	2337      	movs	r3, #55	; 0x37
 8001afc:	703b      	strb	r3, [r7, #0]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x20, 1, (uint8_t*) i2c, 1, 100);
 8001afe:	2364      	movs	r3, #100	; 0x64
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	463b      	mov	r3, r7
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	2132      	movs	r1, #50	; 0x32
 8001b10:	48a9      	ldr	r0, [pc, #676]	; (8001db8 <Tennis+0x5c0>)
 8001b12:	f002 fbb5 	bl	8004280 <HAL_I2C_Mem_Write>
			i2c[0] = 0x08;
 8001b16:	2308      	movs	r3, #8
 8001b18:	703b      	strb	r3, [r7, #0]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x23, 1, (uint8_t*) i2c, 1, 100);
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	463b      	mov	r3, r7
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2223      	movs	r2, #35	; 0x23
 8001b2a:	2132      	movs	r1, #50	; 0x32
 8001b2c:	48a2      	ldr	r0, [pc, #648]	; (8001db8 <Tennis+0x5c0>)
 8001b2e:	f002 fba7 	bl	8004280 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xA8, 1, i2c, 2, 100);
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	2302      	movs	r3, #2
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	22a8      	movs	r2, #168	; 0xa8
 8001b42:	2133      	movs	r1, #51	; 0x33
 8001b44:	489c      	ldr	r0, [pc, #624]	; (8001db8 <Tennis+0x5c0>)
 8001b46:	f002 fc95 	bl	8004474 <HAL_I2C_Mem_Read>
			imuX = (i2c[1]<<4)+(i2c[0]>>4);
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	783b      	ldrb	r3, [r7, #0]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	82fb      	strh	r3, [r7, #22]
			if ((imuX>>11) == 1){
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	12db      	asrs	r3, r3, #11
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d104      	bne.n	8001b76 <Tennis+0x37e>
				imuX = (0xF<<12) + imuX;
 8001b6c:	8afb      	ldrh	r3, [r7, #22]
 8001b6e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	82fb      	strh	r3, [r7, #22]
			}
			if (imuX>512) {
 8001b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7e:	dd08      	ble.n	8001b92 <Tennis+0x39a>
				if (xpos>0) {
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <Tennis+0x394>
					xpos--;
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]
				}
				posStr[8] = 'L';
 8001b8c:	234c      	movs	r3, #76	; 0x4c
 8001b8e:	733b      	strb	r3, [r7, #12]
 8001b90:	e00c      	b.n	8001bac <Tennis+0x3b4>
			}
			else if (imuX<-512) {
 8001b92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b96:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8001b9a:	da07      	bge.n	8001bac <Tennis+0x3b4>
				if (xpos<7) {
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d802      	bhi.n	8001ba8 <Tennis+0x3b0>
					xpos++;
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
				}
				posStr[8] = 'R';
 8001ba8:	2352      	movs	r3, #82	; 0x52
 8001baa:	733b      	strb	r3, [r7, #12]
			}
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xAA, 1, i2c, 2, 100);
 8001bac:	2364      	movs	r3, #100	; 0x64
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	22aa      	movs	r2, #170	; 0xaa
 8001bbc:	2133      	movs	r1, #51	; 0x33
 8001bbe:	487e      	ldr	r0, [pc, #504]	; (8001db8 <Tennis+0x5c0>)
 8001bc0:	f002 fc58 	bl	8004474 <HAL_I2C_Mem_Read>
			imuY = (i2c[1]<<4)+(i2c[0]>>4);
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	783b      	ldrb	r3, [r7, #0]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82bb      	strh	r3, [r7, #20]
			if ((imuY>>11) == 1){
 8001bda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bde:	12db      	asrs	r3, r3, #11
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d104      	bne.n	8001bf0 <Tennis+0x3f8>
				imuY = (0xF<<12) + imuY;
 8001be6:	8abb      	ldrh	r3, [r7, #20]
 8001be8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	82bb      	strh	r3, [r7, #20]
			}
			if (imuY>512) {
 8001bf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf8:	dd08      	ble.n	8001c0c <Tennis+0x414>
				if (ypos<6) {
 8001bfa:	7fbb      	ldrb	r3, [r7, #30]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d802      	bhi.n	8001c06 <Tennis+0x40e>
					ypos++;
 8001c00:	7fbb      	ldrb	r3, [r7, #30]
 8001c02:	3301      	adds	r3, #1
 8001c04:	77bb      	strb	r3, [r7, #30]
				}
				posStr[8] = 'D';
 8001c06:	2344      	movs	r3, #68	; 0x44
 8001c08:	733b      	strb	r3, [r7, #12]
 8001c0a:	e00c      	b.n	8001c26 <Tennis+0x42e>
			}
			else if (imuY<-512) {
 8001c0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c10:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8001c14:	da07      	bge.n	8001c26 <Tennis+0x42e>
				if (ypos>0) {
 8001c16:	7fbb      	ldrb	r3, [r7, #30]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <Tennis+0x42a>
					ypos--;
 8001c1c:	7fbb      	ldrb	r3, [r7, #30]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	77bb      	strb	r3, [r7, #30]
				}
				posStr[8] = 'U';
 8001c22:	2355      	movs	r3, #85	; 0x55
 8001c24:	733b      	strb	r3, [r7, #12]
			}

			ledMatrix[xpospre+8*ypospre] = 0;
 8001c26:	7cfa      	ldrb	r2, [r7, #19]
 8001c28:	7cbb      	ldrb	r3, [r7, #18]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <Tennis+0x5c4>)
 8001c30:	2100      	movs	r1, #0
 8001c32:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpospre+8*(ypospre+1)] = 0;
 8001c34:	7cfa      	ldrb	r2, [r7, #19]
 8001c36:	7cbb      	ldrb	r3, [r7, #18]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a5f      	ldr	r2, [pc, #380]	; (8001dbc <Tennis+0x5c4>)
 8001c40:	2100      	movs	r1, #0
 8001c42:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpos+8*ypos] = 1;
 8001c44:	7ffa      	ldrb	r2, [r7, #31]
 8001c46:	7fbb      	ldrb	r3, [r7, #30]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <Tennis+0x5c4>)
 8001c4e:	2101      	movs	r1, #1
 8001c50:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpos+8*(ypos+1)] = 1;
 8001c52:	7ffa      	ldrb	r2, [r7, #31]
 8001c54:	7fbb      	ldrb	r3, [r7, #30]
 8001c56:	3301      	adds	r3, #1
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <Tennis+0x5c4>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	54d1      	strb	r1, [r2, r3]
			ledMatrix[ballX + 8*ballY] = 1;
 8001c62:	7f7a      	ldrb	r2, [r7, #29]
 8001c64:	7f3b      	ldrb	r3, [r7, #28]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <Tennis+0x5c4>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
			posStr[2] = ballX+48;
 8001c70:	7f7b      	ldrb	r3, [r7, #29]
 8001c72:	3330      	adds	r3, #48	; 0x30
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	71bb      	strb	r3, [r7, #6]
			posStr[3] = ballY+48;
 8001c78:	7f3b      	ldrb	r3, [r7, #28]
 8001c7a:	3330      	adds	r3, #48	; 0x30
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	71fb      	strb	r3, [r7, #7]
			posStr[4] = vel+48;
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <Tennis+0x5c8>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3330      	adds	r3, #48	; 0x30
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	723b      	strb	r3, [r7, #8]
			posStr[5] = dir+48;
 8001c8a:	7efb      	ldrb	r3, [r7, #27]
 8001c8c:	3330      	adds	r3, #48	; 0x30
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	727b      	strb	r3, [r7, #9]
			posStr[6] = xpos+48;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	3330      	adds	r3, #48	; 0x30
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	72bb      	strb	r3, [r7, #10]
			posStr[7] = ypos+48;
 8001c9a:	7fbb      	ldrb	r3, [r7, #30]
 8001c9c:	3330      	adds	r3, #48	; 0x30
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8001ca2:	1d39      	adds	r1, r7, #4
 8001ca4:	2364      	movs	r3, #100	; 0x64
 8001ca6:	220a      	movs	r2, #10
 8001ca8:	4846      	ldr	r0, [pc, #280]	; (8001dc4 <Tennis+0x5cc>)
 8001caa:	f003 febe 	bl	8005a2a <HAL_UART_Transmit>
		}
		if (varTim)
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <Tennis+0x5d0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 81ec 	beq.w	8002092 <Tennis+0x89a>
		{
			varTim = 0;
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <Tennis+0x5d0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			ballXpre = ballX;
 8001cc0:	7f7b      	ldrb	r3, [r7, #29]
 8001cc2:	747b      	strb	r3, [r7, #17]
			ballYpre = ballY;
 8001cc4:	7f3b      	ldrb	r3, [r7, #28]
 8001cc6:	743b      	strb	r3, [r7, #16]
			switch(dir) {
 8001cc8:	7efb      	ldrb	r3, [r7, #27]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	f200 8178 	bhi.w	8001fc0 <Tennis+0x7c8>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <Tennis+0x4e0>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001cf1 	.word	0x08001cf1
 8001cdc:	08001d4f 	.word	0x08001d4f
 8001ce0:	08001d6b 	.word	0x08001d6b
 8001ce4:	08001df5 	.word	0x08001df5
 8001ce8:	08001ea5 	.word	0x08001ea5
 8001cec:	08001f09 	.word	0x08001f09
			case 0:
				if (ledMatrix[ballX-1 + 8*ballY])
 8001cf0:	7f7b      	ldrb	r3, [r7, #29]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	7f3b      	ldrb	r3, [r7, #28]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <Tennis+0x5c4>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d021      	beq.n	8001d46 <Tennis+0x54e>
				{
					if(ballY == ypos)
 8001d02:	7f3a      	ldrb	r2, [r7, #28]
 8001d04:	7fbb      	ldrb	r3, [r7, #30]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d10b      	bne.n	8001d22 <Tennis+0x52a>
					{
						ballX++;
 8001d0a:	7f7b      	ldrb	r3, [r7, #29]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	777b      	strb	r3, [r7, #29]
						ballY--;
 8001d10:	7f3b      	ldrb	r3, [r7, #28]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	773b      	strb	r3, [r7, #28]
						dir = 4;
 8001d16:	2304      	movs	r3, #4
 8001d18:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001d1a:	7ebb      	ldrb	r3, [r7, #26]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	76bb      	strb	r3, [r7, #26]
					}
				}
				else {
					ballX--;
				}
				break;
 8001d20:	e149      	b.n	8001fb6 <Tennis+0x7be>
					else if(ballY == (ypos+1))
 8001d22:	7f3a      	ldrb	r2, [r7, #28]
 8001d24:	7fbb      	ldrb	r3, [r7, #30]
 8001d26:	3301      	adds	r3, #1
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8144 	bne.w	8001fb6 <Tennis+0x7be>
						ballX++;
 8001d2e:	7f7b      	ldrb	r3, [r7, #29]
 8001d30:	3301      	adds	r3, #1
 8001d32:	777b      	strb	r3, [r7, #29]
						ballY++;
 8001d34:	7f3b      	ldrb	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	773b      	strb	r3, [r7, #28]
						dir = 2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001d3e:	7ebb      	ldrb	r3, [r7, #26]
 8001d40:	3301      	adds	r3, #1
 8001d42:	76bb      	strb	r3, [r7, #26]
				break;
 8001d44:	e137      	b.n	8001fb6 <Tennis+0x7be>
					ballX--;
 8001d46:	7f7b      	ldrb	r3, [r7, #29]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	777b      	strb	r3, [r7, #29]
				break;
 8001d4c:	e133      	b.n	8001fb6 <Tennis+0x7be>
			case 1:
				if ((ballX+1) > 7)
 8001d4e:	7f7b      	ldrb	r3, [r7, #29]
 8001d50:	3301      	adds	r3, #1
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	dd05      	ble.n	8001d62 <Tennis+0x56a>
				{
					ballX--;
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
					dir = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	76fb      	strb	r3, [r7, #27]
				}
				else {
					ballX++;
				}
				break;
 8001d60:	e12e      	b.n	8001fc0 <Tennis+0x7c8>
					ballX++;
 8001d62:	7f7b      	ldrb	r3, [r7, #29]
 8001d64:	3301      	adds	r3, #1
 8001d66:	777b      	strb	r3, [r7, #29]
				break;
 8001d68:	e12a      	b.n	8001fc0 <Tennis+0x7c8>
			case 2:
				if (((ballX+1) > 7) && ((ballY+1) > 7))
 8001d6a:	7f7b      	ldrb	r3, [r7, #29]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	2b07      	cmp	r3, #7
 8001d70:	dd0c      	ble.n	8001d8c <Tennis+0x594>
 8001d72:	7f3b      	ldrb	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	dd08      	ble.n	8001d8c <Tennis+0x594>
				{
					ballX--;
 8001d7a:	7f7b      	ldrb	r3, [r7, #29]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	777b      	strb	r3, [r7, #29]
					ballY--;
 8001d80:	7f3b      	ldrb	r3, [r7, #28]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	773b      	strb	r3, [r7, #28]
					dir = 3;
 8001d86:	2303      	movs	r3, #3
 8001d88:	76fb      	strb	r3, [r7, #27]
				}
				else {
					ballX++;
					ballY++;
				}
				break;
 8001d8a:	e119      	b.n	8001fc0 <Tennis+0x7c8>
				else if ((ballX+1) > 7)
 8001d8c:	7f7b      	ldrb	r3, [r7, #29]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2b07      	cmp	r3, #7
 8001d92:	dd1b      	ble.n	8001dcc <Tennis+0x5d4>
					ballX--;
 8001d94:	7f7b      	ldrb	r3, [r7, #29]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	777b      	strb	r3, [r7, #29]
					ballY++;
 8001d9a:	7f3b      	ldrb	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	773b      	strb	r3, [r7, #28]
					dir = 5;
 8001da0:	2305      	movs	r3, #5
 8001da2:	76fb      	strb	r3, [r7, #27]
				break;
 8001da4:	e10c      	b.n	8001fc0 <Tennis+0x7c8>
 8001da6:	bf00      	nop
 8001da8:	20000110 	.word	0x20000110
 8001dac:	20000149 	.word	0x20000149
 8001db0:	20000148 	.word	0x20000148
 8001db4:	20000070 	.word	0x20000070
 8001db8:	200000b4 	.word	0x200000b4
 8001dbc:	2000002c 	.word	0x2000002c
 8001dc0:	20000111 	.word	0x20000111
 8001dc4:	2000014c 	.word	0x2000014c
 8001dc8:	20000108 	.word	0x20000108
				else if ((ballY+1) > 7)
 8001dcc:	7f3b      	ldrb	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	dd08      	ble.n	8001de6 <Tennis+0x5ee>
					ballX++;
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	777b      	strb	r3, [r7, #29]
					ballY--;
 8001dda:	7f3b      	ldrb	r3, [r7, #28]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	773b      	strb	r3, [r7, #28]
					dir = 4;
 8001de0:	2304      	movs	r3, #4
 8001de2:	76fb      	strb	r3, [r7, #27]
				break;
 8001de4:	e0ec      	b.n	8001fc0 <Tennis+0x7c8>
					ballX++;
 8001de6:	7f7b      	ldrb	r3, [r7, #29]
 8001de8:	3301      	adds	r3, #1
 8001dea:	777b      	strb	r3, [r7, #29]
					ballY++;
 8001dec:	7f3b      	ldrb	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	773b      	strb	r3, [r7, #28]
				break;
 8001df2:	e0e5      	b.n	8001fc0 <Tennis+0x7c8>
			case 3:
				if ((ballY-1) < 0)
 8001df4:	7f3b      	ldrb	r3, [r7, #28]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da1e      	bge.n	8001e3a <Tennis+0x642>
				{
					if (ledMatrix[ballX-1 + 8*(ballY+1)]){
 8001dfc:	7f7b      	ldrb	r3, [r7, #29]
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	7f3b      	ldrb	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	4aac      	ldr	r2, [pc, #688]	; (80020bc <Tennis+0x8c4>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <Tennis+0x630>
						ballX++;
 8001e10:	7f7b      	ldrb	r3, [r7, #29]
 8001e12:	3301      	adds	r3, #1
 8001e14:	777b      	strb	r3, [r7, #29]
						ballY++;
 8001e16:	7f3b      	ldrb	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	773b      	strb	r3, [r7, #28]
						dir = 2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001e20:	7ebb      	ldrb	r3, [r7, #26]
 8001e22:	3301      	adds	r3, #1
 8001e24:	76bb      	strb	r3, [r7, #26]
				}
				else{
					ballX--;
					ballY--;
				}
				break;
 8001e26:	e0c8      	b.n	8001fba <Tennis+0x7c2>
						ballX--;
 8001e28:	7f7b      	ldrb	r3, [r7, #29]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	777b      	strb	r3, [r7, #29]
						ballY++;
 8001e2e:	7f3b      	ldrb	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	773b      	strb	r3, [r7, #28]
						dir = 5;
 8001e34:	2305      	movs	r3, #5
 8001e36:	76fb      	strb	r3, [r7, #27]
				break;
 8001e38:	e0bf      	b.n	8001fba <Tennis+0x7c2>
				else if (ledMatrix[ballX-1 + 8*(ballY-1)])
 8001e3a:	7f7b      	ldrb	r3, [r7, #29]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	7f3b      	ldrb	r3, [r7, #28]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	4a9d      	ldr	r2, [pc, #628]	; (80020bc <Tennis+0x8c4>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d023      	beq.n	8001e96 <Tennis+0x69e>
					if((ballY-1) == ypos)
 8001e4e:	7f3b      	ldrb	r3, [r7, #28]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	7fbb      	ldrb	r3, [r7, #30]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d10b      	bne.n	8001e70 <Tennis+0x678>
						ballX++;
 8001e58:	7f7b      	ldrb	r3, [r7, #29]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	777b      	strb	r3, [r7, #29]
						ballY--;
 8001e5e:	7f3b      	ldrb	r3, [r7, #28]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	773b      	strb	r3, [r7, #28]
						dir = 4;
 8001e64:	2304      	movs	r3, #4
 8001e66:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001e68:	7ebb      	ldrb	r3, [r7, #26]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	76bb      	strb	r3, [r7, #26]
				break;
 8001e6e:	e0a4      	b.n	8001fba <Tennis+0x7c2>
					else if((ballY-1) == (ypos+1))
 8001e70:	7f3b      	ldrb	r3, [r7, #28]
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	7fbb      	ldrb	r3, [r7, #30]
 8001e76:	3301      	adds	r3, #1
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 809e 	bne.w	8001fba <Tennis+0x7c2>
						ballX++;
 8001e7e:	7f7b      	ldrb	r3, [r7, #29]
 8001e80:	3301      	adds	r3, #1
 8001e82:	777b      	strb	r3, [r7, #29]
						ballY++;
 8001e84:	7f3b      	ldrb	r3, [r7, #28]
 8001e86:	3301      	adds	r3, #1
 8001e88:	773b      	strb	r3, [r7, #28]
						dir = 2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001e8e:	7ebb      	ldrb	r3, [r7, #26]
 8001e90:	3301      	adds	r3, #1
 8001e92:	76bb      	strb	r3, [r7, #26]
				break;
 8001e94:	e091      	b.n	8001fba <Tennis+0x7c2>
					ballX--;
 8001e96:	7f7b      	ldrb	r3, [r7, #29]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	777b      	strb	r3, [r7, #29]
					ballY--;
 8001e9c:	7f3b      	ldrb	r3, [r7, #28]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	773b      	strb	r3, [r7, #28]
				break;
 8001ea2:	e08a      	b.n	8001fba <Tennis+0x7c2>
			case 4:
				if (((ballX+1) > 7) && ((ballY-1) < 0))
 8001ea4:	7f7b      	ldrb	r3, [r7, #29]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	dd0c      	ble.n	8001ec6 <Tennis+0x6ce>
 8001eac:	7f3b      	ldrb	r3, [r7, #28]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da08      	bge.n	8001ec6 <Tennis+0x6ce>
				{
					ballX--;
 8001eb4:	7f7b      	ldrb	r3, [r7, #29]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	777b      	strb	r3, [r7, #29]
					ballY++;
 8001eba:	7f3b      	ldrb	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	773b      	strb	r3, [r7, #28]
					dir = 5;
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	76fb      	strb	r3, [r7, #27]
				}
				else{
					ballX++;
					ballY--;
				}
				break;
 8001ec4:	e07c      	b.n	8001fc0 <Tennis+0x7c8>
				else if ((ballX+1) > 7)
 8001ec6:	7f7b      	ldrb	r3, [r7, #29]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	dd08      	ble.n	8001ee0 <Tennis+0x6e8>
					ballX--;
 8001ece:	7f7b      	ldrb	r3, [r7, #29]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	777b      	strb	r3, [r7, #29]
					ballY--;
 8001ed4:	7f3b      	ldrb	r3, [r7, #28]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	773b      	strb	r3, [r7, #28]
					dir = 3;
 8001eda:	2303      	movs	r3, #3
 8001edc:	76fb      	strb	r3, [r7, #27]
				break;
 8001ede:	e06f      	b.n	8001fc0 <Tennis+0x7c8>
				else if ((ballY-1) < 0)
 8001ee0:	7f3b      	ldrb	r3, [r7, #28]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da08      	bge.n	8001efa <Tennis+0x702>
					ballX++;
 8001ee8:	7f7b      	ldrb	r3, [r7, #29]
 8001eea:	3301      	adds	r3, #1
 8001eec:	777b      	strb	r3, [r7, #29]
					ballY++;
 8001eee:	7f3b      	ldrb	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	773b      	strb	r3, [r7, #28]
					dir = 2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	76fb      	strb	r3, [r7, #27]
				break;
 8001ef8:	e062      	b.n	8001fc0 <Tennis+0x7c8>
					ballX++;
 8001efa:	7f7b      	ldrb	r3, [r7, #29]
 8001efc:	3301      	adds	r3, #1
 8001efe:	777b      	strb	r3, [r7, #29]
					ballY--;
 8001f00:	7f3b      	ldrb	r3, [r7, #28]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	773b      	strb	r3, [r7, #28]
				break;
 8001f06:	e05b      	b.n	8001fc0 <Tennis+0x7c8>
			case 5:
				if ((ballY+1) > 7)
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	dd1e      	ble.n	8001f4e <Tennis+0x756>
				{
					if (ledMatrix[ballX-1 + 8*(ballY-1)]){
 8001f10:	7f7b      	ldrb	r3, [r7, #29]
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	7f3b      	ldrb	r3, [r7, #28]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <Tennis+0x8c4>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <Tennis+0x744>
						ballX++;
 8001f24:	7f7b      	ldrb	r3, [r7, #29]
 8001f26:	3301      	adds	r3, #1
 8001f28:	777b      	strb	r3, [r7, #29]
						ballY--;
 8001f2a:	7f3b      	ldrb	r3, [r7, #28]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	773b      	strb	r3, [r7, #28]
						dir = 4;
 8001f30:	2304      	movs	r3, #4
 8001f32:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001f34:	7ebb      	ldrb	r3, [r7, #26]
 8001f36:	3301      	adds	r3, #1
 8001f38:	76bb      	strb	r3, [r7, #26]
				}
				else {
					ballX--;
					ballY++;
				}
				break;
 8001f3a:	e040      	b.n	8001fbe <Tennis+0x7c6>
						ballX--;
 8001f3c:	7f7b      	ldrb	r3, [r7, #29]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	777b      	strb	r3, [r7, #29]
						ballY--;
 8001f42:	7f3b      	ldrb	r3, [r7, #28]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	773b      	strb	r3, [r7, #28]
						dir = 3;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	76fb      	strb	r3, [r7, #27]
				break;
 8001f4c:	e037      	b.n	8001fbe <Tennis+0x7c6>
				else if (ledMatrix[ballX-1 + 8*(ballY+1)])
 8001f4e:	7f7b      	ldrb	r3, [r7, #29]
 8001f50:	1e5a      	subs	r2, r3, #1
 8001f52:	7f3b      	ldrb	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a58      	ldr	r2, [pc, #352]	; (80020bc <Tennis+0x8c4>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d022      	beq.n	8001fa8 <Tennis+0x7b0>
					if((ballY+1) == ypos)
 8001f62:	7f3b      	ldrb	r3, [r7, #28]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	7fbb      	ldrb	r3, [r7, #30]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10b      	bne.n	8001f84 <Tennis+0x78c>
						ballX++;
 8001f6c:	7f7b      	ldrb	r3, [r7, #29]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	777b      	strb	r3, [r7, #29]
						ballY--;
 8001f72:	7f3b      	ldrb	r3, [r7, #28]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	773b      	strb	r3, [r7, #28]
						dir = 4;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001f7c:	7ebb      	ldrb	r3, [r7, #26]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	76bb      	strb	r3, [r7, #26]
				break;
 8001f82:	e01c      	b.n	8001fbe <Tennis+0x7c6>
					else if((ballY+1) == (ypos+1))
 8001f84:	7f3b      	ldrb	r3, [r7, #28]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	7fbb      	ldrb	r3, [r7, #30]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d116      	bne.n	8001fbe <Tennis+0x7c6>
						ballX++;
 8001f90:	7f7b      	ldrb	r3, [r7, #29]
 8001f92:	3301      	adds	r3, #1
 8001f94:	777b      	strb	r3, [r7, #29]
						ballY++;
 8001f96:	7f3b      	ldrb	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	773b      	strb	r3, [r7, #28]
						dir = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	76fb      	strb	r3, [r7, #27]
						hitCtr++;
 8001fa0:	7ebb      	ldrb	r3, [r7, #26]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	76bb      	strb	r3, [r7, #26]
				break;
 8001fa6:	e00a      	b.n	8001fbe <Tennis+0x7c6>
					ballX--;
 8001fa8:	7f7b      	ldrb	r3, [r7, #29]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	777b      	strb	r3, [r7, #29]
					ballY++;
 8001fae:	7f3b      	ldrb	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	773b      	strb	r3, [r7, #28]
				break;
 8001fb4:	e003      	b.n	8001fbe <Tennis+0x7c6>
				break;
 8001fb6:	bf00      	nop
 8001fb8:	e002      	b.n	8001fc0 <Tennis+0x7c8>
				break;
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <Tennis+0x7c8>
				break;
 8001fbe:	bf00      	nop
			}
			ledMatrix[ballXpre + 8*ballYpre] = 0;
 8001fc0:	7c7a      	ldrb	r2, [r7, #17]
 8001fc2:	7c3b      	ldrb	r3, [r7, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <Tennis+0x8c4>)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	54d1      	strb	r1, [r2, r3]
			ledMatrix[ballX + 8*ballY] = 1;
 8001fce:	7f7a      	ldrb	r2, [r7, #29]
 8001fd0:	7f3b      	ldrb	r3, [r7, #28]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a39      	ldr	r2, [pc, #228]	; (80020bc <Tennis+0x8c4>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	54d1      	strb	r1, [r2, r3]

			if (ballX == 0)
 8001fdc:	7f7b      	ldrb	r3, [r7, #29]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d136      	bne.n	8002050 <Tennis+0x858>
			{
				while (!ms100){
 8001fe2:	bf00      	nop
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <Tennis+0x8c8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f7      	bne.n	8001fe4 <Tennis+0x7ec>
				}
				posStr[2] = ballX+48;
 8001ff4:	7f7b      	ldrb	r3, [r7, #29]
 8001ff6:	3330      	adds	r3, #48	; 0x30
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	71bb      	strb	r3, [r7, #6]
				posStr[3] = ballY+48;
 8001ffc:	7f3b      	ldrb	r3, [r7, #28]
 8001ffe:	3330      	adds	r3, #48	; 0x30
 8002000:	b2db      	uxtb	r3, r3
 8002002:	71fb      	strb	r3, [r7, #7]
				posStr[4] = vel+48;
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <Tennis+0x8cc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	b2db      	uxtb	r3, r3
 800200c:	723b      	strb	r3, [r7, #8]
				posStr[5] = dir+48;
 800200e:	7efb      	ldrb	r3, [r7, #27]
 8002010:	3330      	adds	r3, #48	; 0x30
 8002012:	b2db      	uxtb	r3, r3
 8002014:	727b      	strb	r3, [r7, #9]
				posStr[6] = xpos+48;
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	3330      	adds	r3, #48	; 0x30
 800201a:	b2db      	uxtb	r3, r3
 800201c:	72bb      	strb	r3, [r7, #10]
				posStr[7] = ypos+48;
 800201e:	7fbb      	ldrb	r3, [r7, #30]
 8002020:	3330      	adds	r3, #48	; 0x30
 8002022:	b2db      	uxtb	r3, r3
 8002024:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8002026:	1d39      	adds	r1, r7, #4
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	220a      	movs	r2, #10
 800202c:	4826      	ldr	r0, [pc, #152]	; (80020c8 <Tennis+0x8d0>)
 800202e:	f003 fcfc 	bl	8005a2a <HAL_UART_Transmit>
				while (!varTim){
 8002032:	bf00      	nop
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <Tennis+0x8d4>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f7      	bne.n	8002034 <Tennis+0x83c>
				}
				varTim = 0;
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <Tennis+0x8d4>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
				gameEnd = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	767b      	strb	r3, [r7, #25]
 800204e:	e020      	b.n	8002092 <Tennis+0x89a>
			}
			else if((hitCtr==3)&&(vel<10))
 8002050:	7ebb      	ldrb	r3, [r7, #26]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d11d      	bne.n	8002092 <Tennis+0x89a>
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <Tennis+0x8cc>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b09      	cmp	r3, #9
 800205c:	d819      	bhi.n	8002092 <Tennis+0x89a>
			{
				vel++;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <Tennis+0x8cc>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <Tennis+0x8cc>)
 8002068:	701a      	strb	r2, [r3, #0]
				mod = ms%(750-vel*50);
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <Tennis+0x8d8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <Tennis+0x8cc>)
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	4611      	mov	r1, r2
 8002074:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002078:	fb02 f201 	mul.w	r2, r2, r1
 800207c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
 8002080:	fbb3 f1f2 	udiv	r1, r3, r2
 8002084:	fb02 f201 	mul.w	r2, r2, r1
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <Tennis+0x8dc>)
 800208c:	6013      	str	r3, [r2, #0]
				hitCtr=0;
 800208e:	2300      	movs	r3, #0
 8002090:	76bb      	strb	r3, [r7, #26]
	while((!Middle)&&(!gameEnd)){
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <Tennis+0x8e0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <Tennis+0x8ba>
 80020a2:	7e7b      	ldrb	r3, [r7, #25]
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f acc3 	bne.w	8001a36 <Tennis+0x23e>
			}
		}
	}
	return;
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
}
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000002c 	.word	0x2000002c
 80020c0:	2000014a 	.word	0x2000014a
 80020c4:	20000111 	.word	0x20000111
 80020c8:	2000014c 	.word	0x2000014c
 80020cc:	20000108 	.word	0x20000108
 80020d0:	2000010c 	.word	0x2000010c
 80020d4:	20000114 	.word	0x20000114
 80020d8:	20000112 	.word	0x20000112

080020dc <Tennis2>:

void Tennis2()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b090      	sub	sp, #64	; 0x40
 80020e0:	af04      	add	r7, sp, #16
	uint8_t xpos = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t ypos = 4;
 80020e8:	2304      	movs	r3, #4
 80020ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t xpospre = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t ypospre = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t posStr[] = "$2_______\n";
 80020fa:	4aba      	ldr	r2, [pc, #744]	; (80023e4 <Tennis2+0x308>)
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	ca07      	ldmia	r2, {r0, r1, r2}
 8002102:	c303      	stmia	r3!, {r0, r1}
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	3302      	adds	r3, #2
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	701a      	strb	r2, [r3, #0]
	uint8_t posStrEnd[] = "$2_______\n";
 800210c:	4ab5      	ldr	r2, [pc, #724]	; (80023e4 <Tennis2+0x308>)
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	ca07      	ldmia	r2, {r0, r1, r2}
 8002114:	c303      	stmia	r3!, {r0, r1}
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	3302      	adds	r3, #2
 800211a:	0c12      	lsrs	r2, r2, #16
 800211c:	701a      	strb	r2, [r3, #0]
	uint8_t ballX = 7;
 800211e:	2307      	movs	r3, #7
 8002120:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t ballY = 4;
 8002124:	2304      	movs	r3, #4
 8002126:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t ballXpre = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t ballYpre = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	77fb      	strb	r3, [r7, #31]
	uint8_t dir = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t hitCtr = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	_Bool gameEnd = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	_Bool gameEndO = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t i2c[2];
	int16_t imuX;
	int16_t imuY;
	_Bool rec = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	HAL_UART_Transmit(&huart3, posStrEnd, 10, 100);
 8002152:	f107 0108 	add.w	r1, r7, #8
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	220a      	movs	r2, #10
 800215a:	48a3      	ldr	r0, [pc, #652]	; (80023e8 <Tennis2+0x30c>)
 800215c:	f003 fc65 	bl	8005a2a <HAL_UART_Transmit>
	vel = 1;
 8002160:	4ba2      	ldr	r3, [pc, #648]	; (80023ec <Tennis2+0x310>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
	mod = 0;
 8002166:	4ba2      	ldr	r3, [pc, #648]	; (80023f0 <Tennis2+0x314>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
	varTim = 0;
 800216c:	4ba1      	ldr	r3, [pc, #644]	; (80023f4 <Tennis2+0x318>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
	while(!varTim){
 8002172:	bf00      	nop
 8002174:	4b9f      	ldr	r3, [pc, #636]	; (80023f4 <Tennis2+0x318>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f7      	bne.n	8002174 <Tennis2+0x98>
	}
	varTim = 0;
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <Tennis2+0x318>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
	ms100 = 0;
 800218a:	4b9b      	ldr	r3, [pc, #620]	; (80023f8 <Tennis2+0x31c>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
	while(!ms100){
 8002190:	bf00      	nop
 8002192:	4b99      	ldr	r3, [pc, #612]	; (80023f8 <Tennis2+0x31c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f7      	bne.n	8002192 <Tennis2+0xb6>
	}
	ms100 = 0;
 80021a2:	4b95      	ldr	r3, [pc, #596]	; (80023f8 <Tennis2+0x31c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]

	posStr[8] = 'N';
 80021a8:	234e      	movs	r3, #78	; 0x4e
 80021aa:	773b      	strb	r3, [r7, #28]
	i2c[0] = 0x37;
 80021ac:	2337      	movs	r3, #55	; 0x37
 80021ae:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x20, 1, (uint8_t*) i2c, 1, 100);
 80021b0:	2364      	movs	r3, #100	; 0x64
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2301      	movs	r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	2220      	movs	r2, #32
 80021c0:	2132      	movs	r1, #50	; 0x32
 80021c2:	488e      	ldr	r0, [pc, #568]	; (80023fc <Tennis2+0x320>)
 80021c4:	f002 f85c 	bl	8004280 <HAL_I2C_Mem_Write>
	i2c[0] = 0x08;
 80021c8:	2308      	movs	r3, #8
 80021ca:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x23, 1, (uint8_t*) i2c, 1, 100);
 80021cc:	2364      	movs	r3, #100	; 0x64
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2301      	movs	r3, #1
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	2223      	movs	r2, #35	; 0x23
 80021dc:	2132      	movs	r1, #50	; 0x32
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <Tennis2+0x320>)
 80021e0:	f002 f84e 	bl	8004280 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xA8, 1, i2c, 2, 100);
 80021e4:	2364      	movs	r3, #100	; 0x64
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	2302      	movs	r3, #2
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	22a8      	movs	r2, #168	; 0xa8
 80021f4:	2133      	movs	r1, #51	; 0x33
 80021f6:	4881      	ldr	r0, [pc, #516]	; (80023fc <Tennis2+0x320>)
 80021f8:	f002 f93c 	bl	8004474 <HAL_I2C_Mem_Read>
	imuX = (i2c[1]<<4)+(i2c[0]>>4);
 80021fc:	797b      	ldrb	r3, [r7, #5]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	b29a      	uxth	r2, r3
 8002204:	793b      	ldrb	r3, [r7, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	4413      	add	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	84fb      	strh	r3, [r7, #38]	; 0x26
	if ((imuX>>11) == 1){
 8002212:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002216:	12db      	asrs	r3, r3, #11
 8002218:	b21b      	sxth	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d104      	bne.n	8002228 <Tennis2+0x14c>
		imuX = (0xF<<12) + imuX;
 800221e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002220:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002224:	b29b      	uxth	r3, r3
 8002226:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	if (imuX>512) {
 8002228:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800222c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002230:	dd0b      	ble.n	800224a <Tennis2+0x16e>
		if (xpos>0) {
 8002232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <Tennis2+0x168>
			xpos--;
 800223a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800223e:	3b01      	subs	r3, #1
 8002240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		posStr[8] = 'L';
 8002244:	234c      	movs	r3, #76	; 0x4c
 8002246:	773b      	strb	r3, [r7, #28]
 8002248:	e00f      	b.n	800226a <Tennis2+0x18e>
	}
	else if (imuX<-512) {
 800224a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800224e:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8002252:	da0a      	bge.n	800226a <Tennis2+0x18e>
		if (xpos<7) {
 8002254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002258:	2b06      	cmp	r3, #6
 800225a:	d804      	bhi.n	8002266 <Tennis2+0x18a>
			xpos++;
 800225c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002260:	3301      	adds	r3, #1
 8002262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		posStr[8] = 'R';
 8002266:	2352      	movs	r3, #82	; 0x52
 8002268:	773b      	strb	r3, [r7, #28]
	}
	HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xAA, 1, i2c, 2, 100);
 800226a:	2364      	movs	r3, #100	; 0x64
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2302      	movs	r3, #2
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	22aa      	movs	r2, #170	; 0xaa
 800227a:	2133      	movs	r1, #51	; 0x33
 800227c:	485f      	ldr	r0, [pc, #380]	; (80023fc <Tennis2+0x320>)
 800227e:	f002 f8f9 	bl	8004474 <HAL_I2C_Mem_Read>
	imuY = (i2c[1]<<4)+(i2c[0]>>4);
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	b29b      	uxth	r3, r3
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	b29a      	uxth	r2, r3
 800228a:	793b      	ldrb	r3, [r7, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	b2db      	uxtb	r3, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	4413      	add	r3, r2
 8002294:	b29b      	uxth	r3, r3
 8002296:	84bb      	strh	r3, [r7, #36]	; 0x24
	if ((imuY>>11) == 1){
 8002298:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800229c:	12db      	asrs	r3, r3, #11
 800229e:	b21b      	sxth	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d104      	bne.n	80022ae <Tennis2+0x1d2>
		imuY = (0xF<<12) + imuY;
 80022a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	}
	if (imuY>512) {
 80022ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80022b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b6:	dd0b      	ble.n	80022d0 <Tennis2+0x1f4>
		if (ypos<6) {
 80022b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d804      	bhi.n	80022ca <Tennis2+0x1ee>
			ypos++;
 80022c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022c4:	3301      	adds	r3, #1
 80022c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
		posStr[8] = 'D';
 80022ca:	2344      	movs	r3, #68	; 0x44
 80022cc:	773b      	strb	r3, [r7, #28]
 80022ce:	e00f      	b.n	80022f0 <Tennis2+0x214>
	}
	else if (imuY<-512) {
 80022d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80022d4:	f513 7f00 	cmn.w	r3, #512	; 0x200
 80022d8:	da0a      	bge.n	80022f0 <Tennis2+0x214>
		if (ypos>0) {
 80022da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <Tennis2+0x210>
			ypos--;
 80022e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
		posStr[8] = 'U';
 80022ec:	2355      	movs	r3, #85	; 0x55
 80022ee:	773b      	strb	r3, [r7, #28]
	}
	ledMatrix[xpos+8*ypos] = 1;
 80022f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	4a40      	ldr	r2, [pc, #256]	; (8002400 <Tennis2+0x324>)
 80022fe:	2101      	movs	r1, #1
 8002300:	54d1      	strb	r1, [r2, r3]
	ledMatrix[xpos+8*(ypos+1)] = 1;
 8002302:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002306:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800230a:	3301      	adds	r3, #1
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <Tennis2+0x324>)
 8002312:	2101      	movs	r1, #1
 8002314:	54d1      	strb	r1, [r2, r3]
	ledMatrix[ballX + 8*ballY] = 1;
 8002316:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800231a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	4a37      	ldr	r2, [pc, #220]	; (8002400 <Tennis2+0x324>)
 8002324:	2101      	movs	r1, #1
 8002326:	54d1      	strb	r1, [r2, r3]
	posStr[2] = ballX+48;
 8002328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800232c:	3330      	adds	r3, #48	; 0x30
 800232e:	b2db      	uxtb	r3, r3
 8002330:	75bb      	strb	r3, [r7, #22]
	posStr[3] = ballY+48;
 8002332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002336:	3330      	adds	r3, #48	; 0x30
 8002338:	b2db      	uxtb	r3, r3
 800233a:	75fb      	strb	r3, [r7, #23]
	posStr[4] = vel+48;
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <Tennis2+0x310>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3330      	adds	r3, #48	; 0x30
 8002342:	b2db      	uxtb	r3, r3
 8002344:	763b      	strb	r3, [r7, #24]
	posStr[5] = dir+48;
 8002346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800234a:	3330      	adds	r3, #48	; 0x30
 800234c:	b2db      	uxtb	r3, r3
 800234e:	767b      	strb	r3, [r7, #25]
	posStr[6] = xpos+48;
 8002350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002354:	3330      	adds	r3, #48	; 0x30
 8002356:	b2db      	uxtb	r3, r3
 8002358:	76bb      	strb	r3, [r7, #26]
	posStr[7] = ypos+48;
 800235a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800235e:	3330      	adds	r3, #48	; 0x30
 8002360:	b2db      	uxtb	r3, r3
 8002362:	76fb      	strb	r3, [r7, #27]
	HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8002364:	f107 0114 	add.w	r1, r7, #20
 8002368:	2364      	movs	r3, #100	; 0x64
 800236a:	220a      	movs	r2, #10
 800236c:	4825      	ldr	r0, [pc, #148]	; (8002404 <Tennis2+0x328>)
 800236e:	f003 fb5c 	bl	8005a2a <HAL_UART_Transmit>
	Up = 0;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <Tennis2+0x32c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
	Down = 0;
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <Tennis2+0x330>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
	Left = 0;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <Tennis2+0x334>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
	Right = 0;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <Tennis2+0x338>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, posStr, 10);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	220a      	movs	r2, #10
 8002390:	4619      	mov	r1, r3
 8002392:	4815      	ldr	r0, [pc, #84]	; (80023e8 <Tennis2+0x30c>)
 8002394:	f003 fbdb 	bl	8005b4e <HAL_UART_Receive_IT>
	recd = 0;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <Tennis2+0x33c>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]

	while((!Middle)&&(!gameEnd)){
 800239e:	f000 bc7a 	b.w	8002c96 <Tennis2+0xbba>
		if(ms100){
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <Tennis2+0x31c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8183 	beq.w	80026b4 <Tennis2+0x5d8>
			ms100 = 0;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <Tennis2+0x31c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
			xpospre = xpos;
 80023b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			ypospre = ypos;
 80023bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if(Up) {
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <Tennis2+0x32c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d026      	beq.n	800241c <Tennis2+0x340>
				if (ypos>0){
 80023ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d030      	beq.n	8002438 <Tennis2+0x35c>
					ypos--;
 80023d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023da:	3b01      	subs	r3, #1
 80023dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80023e0:	e02a      	b.n	8002438 <Tennis2+0x35c>
 80023e2:	bf00      	nop
 80023e4:	0800639c 	.word	0x0800639c
 80023e8:	20000074 	.word	0x20000074
 80023ec:	20000111 	.word	0x20000111
 80023f0:	20000114 	.word	0x20000114
 80023f4:	20000108 	.word	0x20000108
 80023f8:	2000014a 	.word	0x2000014a
 80023fc:	200000b4 	.word	0x200000b4
 8002400:	2000002c 	.word	0x2000002c
 8002404:	2000014c 	.word	0x2000014c
 8002408:	20000149 	.word	0x20000149
 800240c:	20000148 	.word	0x20000148
 8002410:	20000110 	.word	0x20000110
 8002414:	20000070 	.word	0x20000070
 8002418:	20000071 	.word	0x20000071
				}
			}
			else if(Down) {
 800241c:	4bc3      	ldr	r3, [pc, #780]	; (800272c <Tennis2+0x650>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <Tennis2+0x35c>
				if (ypos<6){
 8002426:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800242a:	2b05      	cmp	r3, #5
 800242c:	d804      	bhi.n	8002438 <Tennis2+0x35c>
					ypos++;
 800242e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002432:	3301      	adds	r3, #1
 8002434:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				}
			}
			if(Right) {
 8002438:	4bbd      	ldr	r3, [pc, #756]	; (8002730 <Tennis2+0x654>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <Tennis2+0x37a>
				if (xpos<7){
 8002442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002446:	2b06      	cmp	r3, #6
 8002448:	d813      	bhi.n	8002472 <Tennis2+0x396>
					xpos++;
 800244a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800244e:	3301      	adds	r3, #1
 8002450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002454:	e00d      	b.n	8002472 <Tennis2+0x396>
				}
			}
			else if(Left) {
 8002456:	4bb7      	ldr	r3, [pc, #732]	; (8002734 <Tennis2+0x658>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <Tennis2+0x396>
				if (xpos>0){
 8002460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <Tennis2+0x396>
					xpos--;
 8002468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800246c:	3b01      	subs	r3, #1
 800246e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
			}
			Up = 0;
 8002472:	4bb1      	ldr	r3, [pc, #708]	; (8002738 <Tennis2+0x65c>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
			Down = 0;
 8002478:	4bac      	ldr	r3, [pc, #688]	; (800272c <Tennis2+0x650>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
			Left = 0;
 800247e:	4bad      	ldr	r3, [pc, #692]	; (8002734 <Tennis2+0x658>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
			Right = 0;
 8002484:	4baa      	ldr	r3, [pc, #680]	; (8002730 <Tennis2+0x654>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]

			posStr[8] = 'N';
 800248a:	234e      	movs	r3, #78	; 0x4e
 800248c:	773b      	strb	r3, [r7, #28]
			i2c[0] = 0x37;
 800248e:	2337      	movs	r3, #55	; 0x37
 8002490:	713b      	strb	r3, [r7, #4]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x20, 1, (uint8_t*) i2c, 1, 100);
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	2301      	movs	r3, #1
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2220      	movs	r2, #32
 80024a2:	2132      	movs	r1, #50	; 0x32
 80024a4:	48a5      	ldr	r0, [pc, #660]	; (800273c <Tennis2+0x660>)
 80024a6:	f001 feeb 	bl	8004280 <HAL_I2C_Mem_Write>
			i2c[0] = 0x08;
 80024aa:	2308      	movs	r3, #8
 80024ac:	713b      	strb	r3, [r7, #4]
			HAL_I2C_Mem_Write(&hi2c1, 0x32, 0x23, 1, (uint8_t*) i2c, 1, 100);
 80024ae:	2364      	movs	r3, #100	; 0x64
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2301      	movs	r3, #1
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2301      	movs	r3, #1
 80024bc:	2223      	movs	r2, #35	; 0x23
 80024be:	2132      	movs	r1, #50	; 0x32
 80024c0:	489e      	ldr	r0, [pc, #632]	; (800273c <Tennis2+0x660>)
 80024c2:	f001 fedd 	bl	8004280 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xA8, 1, i2c, 2, 100);
 80024c6:	2364      	movs	r3, #100	; 0x64
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	2302      	movs	r3, #2
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	22a8      	movs	r2, #168	; 0xa8
 80024d6:	2133      	movs	r1, #51	; 0x33
 80024d8:	4898      	ldr	r0, [pc, #608]	; (800273c <Tennis2+0x660>)
 80024da:	f001 ffcb 	bl	8004474 <HAL_I2C_Mem_Read>
			imuX = (i2c[1]<<4)+(i2c[0]>>4);
 80024de:	797b      	ldrb	r3, [r7, #5]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	793b      	ldrb	r3, [r7, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ((imuX>>11) == 1){
 80024f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80024f8:	12db      	asrs	r3, r3, #11
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d104      	bne.n	800250a <Tennis2+0x42e>
				imuX = (0xF<<12) + imuX;
 8002500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002502:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002506:	b29b      	uxth	r3, r3
 8002508:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (imuX>512) {
 800250a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	dd0b      	ble.n	800252c <Tennis2+0x450>
				if (xpos>0) {
 8002514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <Tennis2+0x44a>
					xpos--;
 800251c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002520:	3b01      	subs	r3, #1
 8002522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
				posStr[8] = 'L';
 8002526:	234c      	movs	r3, #76	; 0x4c
 8002528:	773b      	strb	r3, [r7, #28]
 800252a:	e00f      	b.n	800254c <Tennis2+0x470>
			}
			else if (imuX<-512) {
 800252c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002530:	f513 7f00 	cmn.w	r3, #512	; 0x200
 8002534:	da0a      	bge.n	800254c <Tennis2+0x470>
				if (xpos<7) {
 8002536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800253a:	2b06      	cmp	r3, #6
 800253c:	d804      	bhi.n	8002548 <Tennis2+0x46c>
					xpos++;
 800253e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002542:	3301      	adds	r3, #1
 8002544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
				posStr[8] = 'R';
 8002548:	2352      	movs	r3, #82	; 0x52
 800254a:	773b      	strb	r3, [r7, #28]
			}
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0xAA, 1, i2c, 2, 100);
 800254c:	2364      	movs	r3, #100	; 0x64
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	2302      	movs	r3, #2
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2301      	movs	r3, #1
 800255a:	22aa      	movs	r2, #170	; 0xaa
 800255c:	2133      	movs	r1, #51	; 0x33
 800255e:	4877      	ldr	r0, [pc, #476]	; (800273c <Tennis2+0x660>)
 8002560:	f001 ff88 	bl	8004474 <HAL_I2C_Mem_Read>
			imuY = (i2c[1]<<4)+(i2c[0]>>4);
 8002564:	797b      	ldrb	r3, [r7, #5]
 8002566:	b29b      	uxth	r3, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	b29a      	uxth	r2, r3
 800256c:	793b      	ldrb	r3, [r7, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	b2db      	uxtb	r3, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	4413      	add	r3, r2
 8002576:	b29b      	uxth	r3, r3
 8002578:	84bb      	strh	r3, [r7, #36]	; 0x24
			if ((imuY>>11) == 1){
 800257a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800257e:	12db      	asrs	r3, r3, #11
 8002580:	b21b      	sxth	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d104      	bne.n	8002590 <Tennis2+0x4b4>
				imuY = (0xF<<12) + imuY;
 8002586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002588:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800258c:	b29b      	uxth	r3, r3
 800258e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			if (imuY>512) {
 8002590:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	dd0b      	ble.n	80025b2 <Tennis2+0x4d6>
				if (ypos<6) {
 800259a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d804      	bhi.n	80025ac <Tennis2+0x4d0>
					ypos++;
 80025a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025a6:	3301      	adds	r3, #1
 80025a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				}
				posStr[8] = 'D';
 80025ac:	2344      	movs	r3, #68	; 0x44
 80025ae:	773b      	strb	r3, [r7, #28]
 80025b0:	e00f      	b.n	80025d2 <Tennis2+0x4f6>
			}
			else if (imuY<-512) {
 80025b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80025b6:	f513 7f00 	cmn.w	r3, #512	; 0x200
 80025ba:	da0a      	bge.n	80025d2 <Tennis2+0x4f6>
				if (ypos>0) {
 80025bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <Tennis2+0x4f2>
					ypos--;
 80025c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025c8:	3b01      	subs	r3, #1
 80025ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				}
				posStr[8] = 'U';
 80025ce:	2355      	movs	r3, #85	; 0x55
 80025d0:	773b      	strb	r3, [r7, #28]
			}
			if(!rec) {
 80025d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <Tennis2+0x52c>
				ledMatrix[ballX + 8*ballY] = 1;
 80025e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <Tennis2+0x664>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	54d1      	strb	r1, [r2, r3]
				posStr[2] = ballX+48;
 80025f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f6:	3330      	adds	r3, #48	; 0x30
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	75bb      	strb	r3, [r7, #22]
				posStr[3] = ballY+48;
 80025fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002600:	3330      	adds	r3, #48	; 0x30
 8002602:	b2db      	uxtb	r3, r3
 8002604:	75fb      	strb	r3, [r7, #23]
 8002606:	e003      	b.n	8002610 <Tennis2+0x534>
			}
			else {
				posStr[2] = ':';
 8002608:	233a      	movs	r3, #58	; 0x3a
 800260a:	75bb      	strb	r3, [r7, #22]
				posStr[3] = ')';
 800260c:	2329      	movs	r3, #41	; 0x29
 800260e:	75fb      	strb	r3, [r7, #23]
			}
			ledMatrix[xpospre+8*ypospre] = 0;
 8002610:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002614:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <Tennis2+0x664>)
 800261e:	2100      	movs	r1, #0
 8002620:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpospre+8*(ypospre+1)] = 0;
 8002622:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002626:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800262a:	3301      	adds	r3, #1
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	4a43      	ldr	r2, [pc, #268]	; (8002740 <Tennis2+0x664>)
 8002632:	2100      	movs	r1, #0
 8002634:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpos+8*ypos] = 1;
 8002636:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800263a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <Tennis2+0x664>)
 8002644:	2101      	movs	r1, #1
 8002646:	54d1      	strb	r1, [r2, r3]
			ledMatrix[xpos+8*(ypos+1)] = 1;
 8002648:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800264c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002650:	3301      	adds	r3, #1
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <Tennis2+0x664>)
 8002658:	2101      	movs	r1, #1
 800265a:	54d1      	strb	r1, [r2, r3]
			posStr[4] = vel+48;
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <Tennis2+0x668>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3330      	adds	r3, #48	; 0x30
 8002662:	b2db      	uxtb	r3, r3
 8002664:	763b      	strb	r3, [r7, #24]
			posStr[5] = dir+48;
 8002666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800266a:	3330      	adds	r3, #48	; 0x30
 800266c:	b2db      	uxtb	r3, r3
 800266e:	767b      	strb	r3, [r7, #25]
			posStr[6] = xpos+48;
 8002670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002674:	3330      	adds	r3, #48	; 0x30
 8002676:	b2db      	uxtb	r3, r3
 8002678:	76bb      	strb	r3, [r7, #26]
			posStr[7] = ypos+48;
 800267a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800267e:	3330      	adds	r3, #48	; 0x30
 8002680:	b2db      	uxtb	r3, r3
 8002682:	76fb      	strb	r3, [r7, #27]
			HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8002684:	f107 0114 	add.w	r1, r7, #20
 8002688:	2364      	movs	r3, #100	; 0x64
 800268a:	220a      	movs	r2, #10
 800268c:	482e      	ldr	r0, [pc, #184]	; (8002748 <Tennis2+0x66c>)
 800268e:	f003 f9cc 	bl	8005a2a <HAL_UART_Transmit>
			if(recd){
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <Tennis2+0x670>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <Tennis2+0x5d8>
				if (recduart[5] == '_'){
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <Tennis2+0x674>)
 800269c:	795b      	ldrb	r3, [r3, #5]
 800269e:	2b5f      	cmp	r3, #95	; 0x5f
 80026a0:	d105      	bne.n	80026ae <Tennis2+0x5d2>
					gameEnd = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					gameEndO = 1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				}
				recd = 0;
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <Tennis2+0x670>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
			}
		}

		if (varTim && rec)
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <Tennis2+0x678>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d071      	beq.n	80027a2 <Tennis2+0x6c6>
 80026be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d06d      	beq.n	80027a2 <Tennis2+0x6c6>
		{
			varTim = 0;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <Tennis2+0x678>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
			ledMatrix[ballX + 8*ballY] = 0;
 80026cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <Tennis2+0x664>)
 80026da:	2100      	movs	r1, #0
 80026dc:	54d1      	strb	r1, [r2, r3]
			if (recd){
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <Tennis2+0x670>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d05d      	beq.n	80027a2 <Tennis2+0x6c6>
				recd = 0;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <Tennis2+0x670>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
				rec = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				dir = recduart[5]-48;
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <Tennis2+0x674>)
 80026f4:	795b      	ldrb	r3, [r3, #5]
 80026f6:	3b30      	subs	r3, #48	; 0x30
 80026f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (recduart[5] == '_'){
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <Tennis2+0x674>)
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	2b5f      	cmp	r3, #95	; 0x5f
 8002702:	d106      	bne.n	8002712 <Tennis2+0x636>
					gameEnd = 1;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					gameEndO = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002710:	e047      	b.n	80027a2 <Tennis2+0x6c6>
				}
				else {
					ballX = 7;
 8002712:	2307      	movs	r3, #7
 8002714:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if (dir == 3) {
 8002718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800271c:	2b03      	cmp	r3, #3
 800271e:	d11b      	bne.n	8002758 <Tennis2+0x67c>
						ballY = recduart[3] - 48 - 1;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <Tennis2+0x674>)
 8002722:	78db      	ldrb	r3, [r3, #3]
 8002724:	3b31      	subs	r3, #49	; 0x31
 8002726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800272a:	e031      	b.n	8002790 <Tennis2+0x6b4>
 800272c:	20000148 	.word	0x20000148
 8002730:	20000070 	.word	0x20000070
 8002734:	20000110 	.word	0x20000110
 8002738:	20000149 	.word	0x20000149
 800273c:	200000b4 	.word	0x200000b4
 8002740:	2000002c 	.word	0x2000002c
 8002744:	20000111 	.word	0x20000111
 8002748:	2000014c 	.word	0x2000014c
 800274c:	20000071 	.word	0x20000071
 8002750:	2000018c 	.word	0x2000018c
 8002754:	20000108 	.word	0x20000108
						if (ballY < 0){
							dir = 5;
							ballY = 1;
						}
					}
					else if (dir == 5) {
 8002758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10f      	bne.n	8002780 <Tennis2+0x6a4>
						ballY = recduart[3] - 48 - 1;
 8002760:	4bdb      	ldr	r3, [pc, #876]	; (8002ad0 <Tennis2+0x9f4>)
 8002762:	78db      	ldrb	r3, [r3, #3]
 8002764:	3b31      	subs	r3, #49	; 0x31
 8002766:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						if (ballY < 7){
 800276a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800276e:	2b06      	cmp	r3, #6
 8002770:	d80e      	bhi.n	8002790 <Tennis2+0x6b4>
							dir = 3;
 8002772:	2303      	movs	r3, #3
 8002774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
							ballY = 6;
 8002778:	2306      	movs	r3, #6
 800277a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800277e:	e007      	b.n	8002790 <Tennis2+0x6b4>
						}
					}
					else {
						dir = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						ballY = recduart[3] - 48;
 8002786:	4bd2      	ldr	r3, [pc, #840]	; (8002ad0 <Tennis2+0x9f4>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	3b30      	subs	r3, #48	; 0x30
 800278c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					}
					ledMatrix[ballX + 8*ballY] = 1;
 8002790:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002794:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	4acd      	ldr	r2, [pc, #820]	; (8002ad4 <Tennis2+0x9f8>)
 800279e:	2101      	movs	r1, #1
 80027a0:	54d1      	strb	r1, [r2, r3]
				}
			}
		}

		if (varTim && !rec)
 80027a2:	4bcd      	ldr	r3, [pc, #820]	; (8002ad8 <Tennis2+0x9fc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8274 	beq.w	8002c96 <Tennis2+0xbba>
 80027ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 826c 	beq.w	8002c96 <Tennis2+0xbba>
		{
			varTim = 0;
 80027be:	4bc6      	ldr	r3, [pc, #792]	; (8002ad8 <Tennis2+0x9fc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
			ballXpre = ballX;
 80027c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c8:	f887 3020 	strb.w	r3, [r7, #32]
			ballYpre = ballY;
 80027cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027d0:	77fb      	strb	r3, [r7, #31]
			switch(dir) {
 80027d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	f200 8203 	bhi.w	8002be2 <Tennis2+0xb06>
 80027dc:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <Tennis2+0x708>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	080027fd 	.word	0x080027fd
 80027e8:	08002887 	.word	0x08002887
 80027ec:	080028af 	.word	0x080028af
 80027f0:	08002941 	.word	0x08002941
 80027f4:	08002a3f 	.word	0x08002a3f
 80027f8:	08002add 	.word	0x08002add
			case 0:
				if (ledMatrix[ballX-1 + 8*ballY])
 80027fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	4ab2      	ldr	r2, [pc, #712]	; (8002ad4 <Tennis2+0x9f8>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d033      	beq.n	800287a <Tennis2+0x79e>
				{
					if(ballY == ypos)
 8002812:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002816:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800281a:	429a      	cmp	r2, r3
 800281c:	d112      	bne.n	8002844 <Tennis2+0x768>
					{
						ballX++;
 800281e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002822:	3301      	adds	r3, #1
 8002824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY--;
 8002828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800282c:	3b01      	subs	r3, #1
 800282e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 4;
 8002832:	2304      	movs	r3, #4
 8002834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 8002838:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800283c:	3301      	adds	r3, #1
 800283e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					}
				}
				else {
					ballX--;
				}
				break;
 8002842:	e1c9      	b.n	8002bd8 <Tennis2+0xafc>
					else if(ballY == (ypos+1))
 8002844:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002848:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800284c:	3301      	adds	r3, #1
 800284e:	429a      	cmp	r2, r3
 8002850:	f040 81c2 	bne.w	8002bd8 <Tennis2+0xafc>
						ballX++;
 8002854:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002858:	3301      	adds	r3, #1
 800285a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY++;
 800285e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002862:	3301      	adds	r3, #1
 8002864:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 2;
 8002868:	2302      	movs	r3, #2
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 800286e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002872:	3301      	adds	r3, #1
 8002874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 8002878:	e1ae      	b.n	8002bd8 <Tennis2+0xafc>
					ballX--;
 800287a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800287e:	3b01      	subs	r3, #1
 8002880:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				break;
 8002884:	e1a8      	b.n	8002bd8 <Tennis2+0xafc>
			case 1:
				if ((ballX+1) > 7)
 8002886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800288a:	3301      	adds	r3, #1
 800288c:	2b07      	cmp	r3, #7
 800288e:	dd08      	ble.n	80028a2 <Tennis2+0x7c6>
				{
					ballX--;
 8002890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002894:	3b01      	subs	r3, #1
 8002896:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					dir = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				}
				else {
					ballX++;
				}
				break;
 80028a0:	e19f      	b.n	8002be2 <Tennis2+0xb06>
					ballX++;
 80028a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028a6:	3301      	adds	r3, #1
 80028a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				break;
 80028ac:	e199      	b.n	8002be2 <Tennis2+0xb06>
			case 2:
				if (((ballX+1) > 7) && ((ballY+1) > 7))
 80028ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b2:	3301      	adds	r3, #1
 80028b4:	2b07      	cmp	r3, #7
 80028b6:	dd12      	ble.n	80028de <Tennis2+0x802>
 80028b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028bc:	3301      	adds	r3, #1
 80028be:	2b07      	cmp	r3, #7
 80028c0:	dd0d      	ble.n	80028de <Tennis2+0x802>
				{
					ballX--;
 80028c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY--;
 80028cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028d0:	3b01      	subs	r3, #1
 80028d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 3;
 80028d6:	2303      	movs	r3, #3
 80028d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				}
				else {
					ballX++;
					ballY++;
				}
				break;
 80028dc:	e181      	b.n	8002be2 <Tennis2+0xb06>
				else if ((ballX+1) > 7)
 80028de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e2:	3301      	adds	r3, #1
 80028e4:	2b07      	cmp	r3, #7
 80028e6:	dd0d      	ble.n	8002904 <Tennis2+0x828>
					ballX--;
 80028e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ec:	3b01      	subs	r3, #1
 80028ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY++;
 80028f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028f6:	3301      	adds	r3, #1
 80028f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 5;
 80028fc:	2305      	movs	r3, #5
 80028fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8002902:	e16e      	b.n	8002be2 <Tennis2+0xb06>
				else if ((ballY+1) > 7)
 8002904:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002908:	3301      	adds	r3, #1
 800290a:	2b07      	cmp	r3, #7
 800290c:	dd0d      	ble.n	800292a <Tennis2+0x84e>
					ballX++;
 800290e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002912:	3301      	adds	r3, #1
 8002914:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY--;
 8002918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800291c:	3b01      	subs	r3, #1
 800291e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 4;
 8002922:	2304      	movs	r3, #4
 8002924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8002928:	e15b      	b.n	8002be2 <Tennis2+0xb06>
					ballX++;
 800292a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800292e:	3301      	adds	r3, #1
 8002930:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY++;
 8002934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002938:	3301      	adds	r3, #1
 800293a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				break;
 800293e:	e150      	b.n	8002be2 <Tennis2+0xb06>
			case 3:
				if ((ballY-1) < 0)
 8002940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002944:	3b01      	subs	r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	da2c      	bge.n	80029a4 <Tennis2+0x8c8>
				{
					if (ledMatrix[ballX-1 + 8*(ballY+1)]){
 800294a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002954:	3301      	adds	r3, #1
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	4a5e      	ldr	r2, [pc, #376]	; (8002ad4 <Tennis2+0x9f8>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <Tennis2+0x8ac>
						ballX++;
 8002962:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002966:	3301      	adds	r3, #1
 8002968:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY++;
 800296c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002970:	3301      	adds	r3, #1
 8002972:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 2;
 8002976:	2302      	movs	r3, #2
 8002978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 800297c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002980:	3301      	adds	r3, #1
 8002982:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				}
				else{
					ballX--;
					ballY--;
				}
				break;
 8002986:	e129      	b.n	8002bdc <Tennis2+0xb00>
						ballX--;
 8002988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800298c:	3b01      	subs	r3, #1
 800298e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY++;
 8002992:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002996:	3301      	adds	r3, #1
 8002998:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 5;
 800299c:	2305      	movs	r3, #5
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80029a2:	e11b      	b.n	8002bdc <Tennis2+0xb00>
				else if (ledMatrix[ballX-1 + 8*(ballY-1)])
 80029a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029ae:	3b01      	subs	r3, #1
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	4a47      	ldr	r2, [pc, #284]	; (8002ad4 <Tennis2+0x9f8>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d035      	beq.n	8002a28 <Tennis2+0x94c>
					if((ballY-1) == ypos)
 80029bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029c0:	1e5a      	subs	r2, r3, #1
 80029c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d112      	bne.n	80029f0 <Tennis2+0x914>
						ballX++;
 80029ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029ce:	3301      	adds	r3, #1
 80029d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY--;
 80029d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029d8:	3b01      	subs	r3, #1
 80029da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 4;
 80029de:	2304      	movs	r3, #4
 80029e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 80029e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80029e8:	3301      	adds	r3, #1
 80029ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 80029ee:	e0f5      	b.n	8002bdc <Tennis2+0xb00>
					else if((ballY-1) == (ypos+1))
 80029f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029fa:	3301      	adds	r3, #1
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 80ed 	bne.w	8002bdc <Tennis2+0xb00>
						ballX++;
 8002a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a06:	3301      	adds	r3, #1
 8002a08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY++;
 8002a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a10:	3301      	adds	r3, #1
 8002a12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 2;
 8002a16:	2302      	movs	r3, #2
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 8002a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002a20:	3301      	adds	r3, #1
 8002a22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 8002a26:	e0d9      	b.n	8002bdc <Tennis2+0xb00>
					ballX--;
 8002a28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY--;
 8002a32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				break;
 8002a3c:	e0ce      	b.n	8002bdc <Tennis2+0xb00>
			case 4:
				if (((ballX+1) > 7) && ((ballY-1) < 0))
 8002a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a42:	3301      	adds	r3, #1
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	dd12      	ble.n	8002a6e <Tennis2+0x992>
 8002a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da0d      	bge.n	8002a6e <Tennis2+0x992>
				{
					ballX--;
 8002a52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY++;
 8002a5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 5;
 8002a66:	2305      	movs	r3, #5
 8002a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				}
				else{
					ballX++;
					ballY--;
				}
				break;
 8002a6c:	e0b9      	b.n	8002be2 <Tennis2+0xb06>
				else if ((ballX+1) > 7)
 8002a6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a72:	3301      	adds	r3, #1
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	dd0d      	ble.n	8002a94 <Tennis2+0x9b8>
					ballX--;
 8002a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY--;
 8002a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 3;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8002a92:	e0a6      	b.n	8002be2 <Tennis2+0xb06>
				else if ((ballY-1) < 0)
 8002a94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da0d      	bge.n	8002aba <Tennis2+0x9de>
					ballX++;
 8002a9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY++;
 8002aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002aac:	3301      	adds	r3, #1
 8002aae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					dir = 2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8002ab8:	e093      	b.n	8002be2 <Tennis2+0xb06>
					ballX++;
 8002aba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY--;
 8002ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				break;
 8002ace:	e088      	b.n	8002be2 <Tennis2+0xb06>
 8002ad0:	2000018c 	.word	0x2000018c
 8002ad4:	2000002c 	.word	0x2000002c
 8002ad8:	20000108 	.word	0x20000108
			case 5:
				if ((ballY+1) > 7)
 8002adc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	dd2c      	ble.n	8002b40 <Tennis2+0xa64>
				{
					if (ledMatrix[ballX-1 + 8*(ballY-1)]){
 8002ae6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002af0:	3b01      	subs	r3, #1
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <Tennis2+0xc00>)
 8002af8:	5cd3      	ldrb	r3, [r2, r3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <Tennis2+0xa48>
						ballX++;
 8002afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b02:	3301      	adds	r3, #1
 8002b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY--;
 8002b08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 4;
 8002b12:	2304      	movs	r3, #4
 8002b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 8002b18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				}
				else {
					ballX--;
					ballY++;
				}
				break;
 8002b22:	e05d      	b.n	8002be0 <Tennis2+0xb04>
						ballX--;
 8002b24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY--;
 8002b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 3;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8002b3e:	e04f      	b.n	8002be0 <Tennis2+0xb04>
				else if (ledMatrix[ballX-1 + 8*(ballY+1)])
 8002b40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a62      	ldr	r2, [pc, #392]	; (8002cdc <Tennis2+0xc00>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d034      	beq.n	8002bc2 <Tennis2+0xae6>
					if((ballY+1) == ypos)
 8002b58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d112      	bne.n	8002b8c <Tennis2+0xab0>
						ballX++;
 8002b66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY--;
 8002b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b74:	3b01      	subs	r3, #1
 8002b76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 4;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 8002b80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002b84:	3301      	adds	r3, #1
 8002b86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 8002b8a:	e029      	b.n	8002be0 <Tennis2+0xb04>
					else if((ballY+1) == (ypos+1))
 8002b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b96:	3301      	adds	r3, #1
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d121      	bne.n	8002be0 <Tennis2+0xb04>
						ballX++;
 8002b9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
						ballY++;
 8002ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002baa:	3301      	adds	r3, #1
 8002bac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						dir = 2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						hitCtr++;
 8002bb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 8002bc0:	e00e      	b.n	8002be0 <Tennis2+0xb04>
					ballX--;
 8002bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ballY++;
 8002bcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				break;
 8002bd6:	e003      	b.n	8002be0 <Tennis2+0xb04>
				break;
 8002bd8:	bf00      	nop
 8002bda:	e002      	b.n	8002be2 <Tennis2+0xb06>
				break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <Tennis2+0xb06>
				break;
 8002be0:	bf00      	nop
			}
			ledMatrix[ballXpre + 8*ballYpre] = 0;
 8002be2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <Tennis2+0xc00>)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	54d1      	strb	r1, [r2, r3]
			ledMatrix[ballX + 8*ballY] = 1;
 8002bf2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <Tennis2+0xc00>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	54d1      	strb	r1, [r2, r3]
			if ((ballX+1) > 7) {
 8002c04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c08:	3301      	adds	r3, #1
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	dd02      	ble.n	8002c14 <Tennis2+0xb38>
				rec = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			}
			if (ballX == 0)
 8002c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d13c      	bne.n	8002c96 <Tennis2+0xbba>
			{
				while (!ms100){
 8002c1c:	bf00      	nop
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <Tennis2+0xc04>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f7      	bne.n	8002c1e <Tennis2+0xb42>
				}
				posStr[2] = ballX+48;
 8002c2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c32:	3330      	adds	r3, #48	; 0x30
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	75bb      	strb	r3, [r7, #22]
				posStr[3] = ballY+48;
 8002c38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c3c:	3330      	adds	r3, #48	; 0x30
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	75fb      	strb	r3, [r7, #23]
				posStr[4] = vel+48;
 8002c42:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <Tennis2+0xc08>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3330      	adds	r3, #48	; 0x30
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	763b      	strb	r3, [r7, #24]
				posStr[5] = dir+48;
 8002c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c50:	3330      	adds	r3, #48	; 0x30
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	767b      	strb	r3, [r7, #25]
				posStr[6] = xpos+48;
 8002c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c5a:	3330      	adds	r3, #48	; 0x30
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	76bb      	strb	r3, [r7, #26]
				posStr[7] = ypos+48;
 8002c60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c64:	3330      	adds	r3, #48	; 0x30
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	76fb      	strb	r3, [r7, #27]
				HAL_UART_Transmit(&huart2, posStr, 10, 100);
 8002c6a:	f107 0114 	add.w	r1, r7, #20
 8002c6e:	2364      	movs	r3, #100	; 0x64
 8002c70:	220a      	movs	r2, #10
 8002c72:	481d      	ldr	r0, [pc, #116]	; (8002ce8 <Tennis2+0xc0c>)
 8002c74:	f002 fed9 	bl	8005a2a <HAL_UART_Transmit>
				while (!varTim){
 8002c78:	bf00      	nop
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <Tennis2+0xc10>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f7      	bne.n	8002c7a <Tennis2+0xb9e>
				}
				varTim = 0;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <Tennis2+0xc10>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
				gameEnd = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	while((!Middle)&&(!gameEnd)){
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <Tennis2+0xc14>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <Tennis2+0xbda>
 8002ca6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f ab76 	bne.w	80023a2 <Tennis2+0x2c6>
			}
		}

	}

	if (!gameEndO) {
 8002cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <Tennis2+0xbf8>
		HAL_UART_Transmit(&huart3, posStrEnd, 10, 100);
 8002cc4:	f107 0108 	add.w	r1, r7, #8
 8002cc8:	2364      	movs	r3, #100	; 0x64
 8002cca:	220a      	movs	r2, #10
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <Tennis2+0xc18>)
 8002cce:	f002 feac 	bl	8005a2a <HAL_UART_Transmit>
	}

	return;
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
}
 8002cd6:	3730      	adds	r7, #48	; 0x30
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000002c 	.word	0x2000002c
 8002ce0:	2000014a 	.word	0x2000014a
 8002ce4:	20000111 	.word	0x20000111
 8002ce8:	2000014c 	.word	0x2000014c
 8002cec:	20000108 	.word	0x20000108
 8002cf0:	20000112 	.word	0x20000112
 8002cf4:	20000074 	.word	0x20000074

08002cf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  recd = 1;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_UART_RxCpltCallback+0x20>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, recduart, 10);
 8002d06:	220a      	movs	r2, #10
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <HAL_UART_RxCpltCallback+0x24>)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <HAL_UART_RxCpltCallback+0x28>)
 8002d0c:	f002 ff1f 	bl	8005b4e <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000071 	.word	0x20000071
 8002d1c:	2000018c 	.word	0x2000018c
 8002d20:	20000074 	.word	0x20000074

08002d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_MspInit+0x5c>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_MspInit+0x60>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_MspInit+0x60>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000

08002d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_ADC_MspInit+0x6c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d121      	bne.n	8002df8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	6193      	str	r3, [r2, #24]
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_ADC_MspInit+0x70>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de4:	2308      	movs	r3, #8
 8002de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de8:	2303      	movs	r3, #3
 8002dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4619      	mov	r1, r3
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <HAL_ADC_MspInit+0x74>)
 8002df4:	f000 ff78 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012400 	.word	0x40012400
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40011000 	.word	0x40011000

08002e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_I2C_MspInit+0x70>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d123      	bne.n	8002e74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6193      	str	r3, [r2, #24]
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e44:	23c0      	movs	r3, #192	; 0xc0
 8002e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e48:	2312      	movs	r3, #18
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4619      	mov	r1, r3
 8002e56:	480b      	ldr	r0, [pc, #44]	; (8002e84 <HAL_I2C_MspInit+0x78>)
 8002e58:	f000 ff46 	bl	8003ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e66:	61d3      	str	r3, [r2, #28]
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_I2C_MspInit+0x74>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e74:	bf00      	nop
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010c00 	.word	0x40010c00

08002e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3e      	ldr	r2, [pc, #248]	; (8002f9c <HAL_UART_MspInit+0x114>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d124      	bne.n	8002ef2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ea8:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a3c      	ldr	r2, [pc, #240]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb2:	61d3      	str	r3, [r2, #28]
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ed8:	230c      	movs	r3, #12
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	482e      	ldr	r0, [pc, #184]	; (8002fa4 <HAL_UART_MspInit+0x11c>)
 8002eec:	f000 fefc 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ef0:	e050      	b.n	8002f94 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_UART_MspInit+0x120>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d14b      	bne.n	8002f94 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f06:	61d3      	str	r3, [r2, #28]
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002f1a:	f043 0310 	orr.w	r3, r3, #16
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_UART_MspInit+0x118>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481a      	ldr	r0, [pc, #104]	; (8002fac <HAL_UART_MspInit+0x124>)
 8002f42:	f000 fed1 	bl	8003ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4814      	ldr	r0, [pc, #80]	; (8002fac <HAL_UART_MspInit+0x124>)
 8002f5c:	f000 fec4 	bl	8003ce8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_UART_MspInit+0x128>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	f043 0310 	orr.w	r3, r3, #16
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_UART_MspInit+0x128>)
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2100      	movs	r1, #0
 8002f88:	2027      	movs	r0, #39	; 0x27
 8002f8a:	f000 fe00 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f8e:	2027      	movs	r0, #39	; 0x27
 8002f90:	f000 fe19 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
}
 8002f94:	bf00      	nop
 8002f96:	3730      	adds	r7, #48	; 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40010000 	.word	0x40010000

08002fb4 <displayLED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayLED(uint8_t row)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_RESET);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	4883      	ldr	r0, [pc, #524]	; (80031d4 <displayLED+0x220>)
 8002fc8:	f000 ffe8 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd2:	4880      	ldr	r0, [pc, #512]	; (80031d4 <displayLED+0x220>)
 8002fd4:	f000 ffe2 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fde:	487d      	ldr	r0, [pc, #500]	; (80031d4 <displayLED+0x220>)
 8002fe0:	f000 ffdc 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_RESET);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fea:	487a      	ldr	r0, [pc, #488]	; (80031d4 <displayLED+0x220>)
 8002fec:	f000 ffd6 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_RESET);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	4878      	ldr	r0, [pc, #480]	; (80031d8 <displayLED+0x224>)
 8002ff6:	f000 ffd1 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_RESET);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003000:	4874      	ldr	r0, [pc, #464]	; (80031d4 <displayLED+0x220>)
 8003002:	f000 ffcb 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300c:	4873      	ldr	r0, [pc, #460]	; (80031dc <displayLED+0x228>)
 800300e:	f000 ffc5 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003018:	4870      	ldr	r0, [pc, #448]	; (80031dc <displayLED+0x228>)
 800301a:	f000 ffbf 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003024:	486c      	ldr	r0, [pc, #432]	; (80031d8 <displayLED+0x224>)
 8003026:	f000 ffb9 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	486a      	ldr	r0, [pc, #424]	; (80031d8 <displayLED+0x224>)
 8003030:	f000 ffb4 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	2120      	movs	r1, #32
 8003038:	4867      	ldr	r0, [pc, #412]	; (80031d8 <displayLED+0x224>)
 800303a:	f000 ffaf 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003044:	4865      	ldr	r0, [pc, #404]	; (80031dc <displayLED+0x228>)
 8003046:	f000 ffa9 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003050:	4862      	ldr	r0, [pc, #392]	; (80031dc <displayLED+0x228>)
 8003052:	f000 ffa3 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800305c:	485d      	ldr	r0, [pc, #372]	; (80031d4 <displayLED+0x220>)
 800305e:	f000 ff9d 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003068:	485a      	ldr	r0, [pc, #360]	; (80031d4 <displayLED+0x220>)
 800306a:	f000 ff97 	bl	8003f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	2104      	movs	r1, #4
 8003072:	4858      	ldr	r0, [pc, #352]	; (80031d4 <displayLED+0x220>)
 8003074:	f000 ff92 	bl	8003f9c <HAL_GPIO_WritePin>

	switch (row)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b07      	cmp	r3, #7
 800307c:	d848      	bhi.n	8003110 <displayLED+0x15c>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <displayLED+0xd0>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	080030a5 	.word	0x080030a5
 8003088:	080030b1 	.word	0x080030b1
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030cd 	.word	0x080030cd
 8003094:	080030db 	.word	0x080030db
 8003098:	080030e7 	.word	0x080030e7
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003103 	.word	0x08003103
	{
	case 0:
		HAL_GPIO_WritePin(R0A, R0, GPIO_PIN_SET);
 80030a4:	2201      	movs	r2, #1
 80030a6:	2102      	movs	r1, #2
 80030a8:	484a      	ldr	r0, [pc, #296]	; (80031d4 <displayLED+0x220>)
 80030aa:	f000 ff77 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030ae:	e02f      	b.n	8003110 <displayLED+0x15c>
	case 1:
		HAL_GPIO_WritePin(R1A, R1, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b6:	4847      	ldr	r0, [pc, #284]	; (80031d4 <displayLED+0x220>)
 80030b8:	f000 ff70 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030bc:	e028      	b.n	8003110 <displayLED+0x15c>
	case 2:
		HAL_GPIO_WritePin(R2A, R2, GPIO_PIN_SET);
 80030be:	2201      	movs	r2, #1
 80030c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030c4:	4843      	ldr	r0, [pc, #268]	; (80031d4 <displayLED+0x220>)
 80030c6:	f000 ff69 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030ca:	e021      	b.n	8003110 <displayLED+0x15c>
	case 3:
		HAL_GPIO_WritePin(R3A, R3, GPIO_PIN_SET);
 80030cc:	2201      	movs	r2, #1
 80030ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d2:	4840      	ldr	r0, [pc, #256]	; (80031d4 <displayLED+0x220>)
 80030d4:	f000 ff62 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030d8:	e01a      	b.n	8003110 <displayLED+0x15c>
	case 4:
		HAL_GPIO_WritePin(R4A, R4, GPIO_PIN_SET);
 80030da:	2201      	movs	r2, #1
 80030dc:	2110      	movs	r1, #16
 80030de:	483e      	ldr	r0, [pc, #248]	; (80031d8 <displayLED+0x224>)
 80030e0:	f000 ff5c 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030e4:	e014      	b.n	8003110 <displayLED+0x15c>
	case 5:
		HAL_GPIO_WritePin(R5A, R5, GPIO_PIN_SET);
 80030e6:	2201      	movs	r2, #1
 80030e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030ec:	4839      	ldr	r0, [pc, #228]	; (80031d4 <displayLED+0x220>)
 80030ee:	f000 ff55 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 80030f2:	e00d      	b.n	8003110 <displayLED+0x15c>
	case 6:
		HAL_GPIO_WritePin(R6A, R6, GPIO_PIN_SET);
 80030f4:	2201      	movs	r2, #1
 80030f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fa:	4838      	ldr	r0, [pc, #224]	; (80031dc <displayLED+0x228>)
 80030fc:	f000 ff4e 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 8003100:	e006      	b.n	8003110 <displayLED+0x15c>
	case 7:
		HAL_GPIO_WritePin(R7A, R7, GPIO_PIN_SET);
 8003102:	2201      	movs	r2, #1
 8003104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003108:	4834      	ldr	r0, [pc, #208]	; (80031dc <displayLED+0x228>)
 800310a:	f000 ff47 	bl	8003f9c <HAL_GPIO_WritePin>
		break;
 800310e:	bf00      	nop
	}
	for (i = 0; i<8; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e056      	b.n	80031c4 <displayLED+0x210>
	{
		if(ledMatrix[8*row+i]==1)
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	00da      	lsls	r2, r3, #3
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	4413      	add	r3, r2
 800311e:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <displayLED+0x22c>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04b      	beq.n	80031be <displayLED+0x20a>
		{
			switch (i)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b07      	cmp	r3, #7
 800312a:	d848      	bhi.n	80031be <displayLED+0x20a>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <displayLED+0x180>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003155 	.word	0x08003155
 8003138:	08003163 	.word	0x08003163
 800313c:	0800316f 	.word	0x0800316f
 8003140:	0800317b 	.word	0x0800317b
 8003144:	08003189 	.word	0x08003189
 8003148:	08003197 	.word	0x08003197
 800314c:	080031a5 	.word	0x080031a5
 8003150:	080031b3 	.word	0x080031b3
			{
			case 0:
				HAL_GPIO_WritePin(C0A, C0, GPIO_PIN_SET);
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315a:	481f      	ldr	r0, [pc, #124]	; (80031d8 <displayLED+0x224>)
 800315c:	f000 ff1e 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8003160:	e02d      	b.n	80031be <displayLED+0x20a>
			case 1:
				HAL_GPIO_WritePin(C1A, C1, GPIO_PIN_SET);
 8003162:	2201      	movs	r2, #1
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	481c      	ldr	r0, [pc, #112]	; (80031d8 <displayLED+0x224>)
 8003168:	f000 ff18 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 800316c:	e027      	b.n	80031be <displayLED+0x20a>
			case 2:
				HAL_GPIO_WritePin(C2A, C2, GPIO_PIN_SET);
 800316e:	2201      	movs	r2, #1
 8003170:	2120      	movs	r1, #32
 8003172:	4819      	ldr	r0, [pc, #100]	; (80031d8 <displayLED+0x224>)
 8003174:	f000 ff12 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8003178:	e021      	b.n	80031be <displayLED+0x20a>
			case 3:
				HAL_GPIO_WritePin(C3A, C3, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
 800317c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003180:	4816      	ldr	r0, [pc, #88]	; (80031dc <displayLED+0x228>)
 8003182:	f000 ff0b 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8003186:	e01a      	b.n	80031be <displayLED+0x20a>
			case 4:
				HAL_GPIO_WritePin(C4A, C4, GPIO_PIN_SET);
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800318e:	4813      	ldr	r0, [pc, #76]	; (80031dc <displayLED+0x228>)
 8003190:	f000 ff04 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 8003194:	e013      	b.n	80031be <displayLED+0x20a>
			case 5:
				HAL_GPIO_WritePin(C5A, C5, GPIO_PIN_SET);
 8003196:	2201      	movs	r2, #1
 8003198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <displayLED+0x220>)
 800319e:	f000 fefd 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 80031a2:	e00c      	b.n	80031be <displayLED+0x20a>
			case 6:
				HAL_GPIO_WritePin(C6A, C6, GPIO_PIN_SET);
 80031a4:	2201      	movs	r2, #1
 80031a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031aa:	480a      	ldr	r0, [pc, #40]	; (80031d4 <displayLED+0x220>)
 80031ac:	f000 fef6 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 80031b0:	e005      	b.n	80031be <displayLED+0x20a>
			case 7:
				HAL_GPIO_WritePin(C7A, C7, GPIO_PIN_SET);
 80031b2:	2201      	movs	r2, #1
 80031b4:	2104      	movs	r1, #4
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <displayLED+0x220>)
 80031b8:	f000 fef0 	bl	8003f9c <HAL_GPIO_WritePin>
				break;
 80031bc:	bf00      	nop
	for (i = 0; i<8; i++)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3301      	adds	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b07      	cmp	r3, #7
 80031c8:	d9a5      	bls.n	8003116 <displayLED+0x162>
			}
		}
	}
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40010c00 	.word	0x40010c00
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	2000002c 	.word	0x2000002c

080031e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <HardFault_Handler+0x4>

080031f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <MemManage_Handler+0x4>

080031fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <BusFault_Handler+0x4>

08003202 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <UsageFault_Handler+0x4>

08003208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ms++;
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <SysTick_Handler+0x74>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <SysTick_Handler+0x74>)
 8003238:	6013      	str	r3, [r2, #0]
	if((ms%100)==89){
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <SysTick_Handler+0x74>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <SysTick_Handler+0x78>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b59      	cmp	r3, #89	; 0x59
 8003250:	d102      	bne.n	8003258 <SysTick_Handler+0x2c>
		ms100 = 1;
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <SysTick_Handler+0x7c>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
	}
	if((ms%(750-vel*50))==mod){
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <SysTick_Handler+0x74>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <SysTick_Handler+0x80>)
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	4611      	mov	r1, r2
 8003262:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8003266:	fb02 f201 	mul.w	r2, r2, r1
 800326a:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
 800326e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003272:	fb02 f201 	mul.w	r2, r2, r1
 8003276:	1a9a      	subs	r2, r3, r2
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <SysTick_Handler+0x84>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d102      	bne.n	8003286 <SysTick_Handler+0x5a>
		varTim = 1;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <SysTick_Handler+0x88>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
	}
	displayLED(ms%8);
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <SysTick_Handler+0x74>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fe8e 	bl	8002fb4 <displayLED>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003298:	f000 f95a 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000010c 	.word	0x2000010c
 80032a4:	51eb851f 	.word	0x51eb851f
 80032a8:	2000014a 	.word	0x2000014a
 80032ac:	20000111 	.word	0x20000111
 80032b0:	20000114 	.word	0x20000114
 80032b4:	20000108 	.word	0x20000108

080032b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if ((!Down) && ((ms-bounceLast)>bounceDelay)) {
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <EXTI0_IRQHandler+0x40>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00f      	beq.n	80032ec <EXTI0_IRQHandler+0x34>
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <EXTI0_IRQHandler+0x44>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <EXTI0_IRQHandler+0x48>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1ad2      	subs	r2, r2, r3
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <EXTI0_IRQHandler+0x4c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d906      	bls.n	80032ec <EXTI0_IRQHandler+0x34>
		Down = 1;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <EXTI0_IRQHandler+0x40>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <EXTI0_IRQHandler+0x44>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <EXTI0_IRQHandler+0x48>)
 80032ea:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f000 fe6d 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000148 	.word	0x20000148
 80032fc:	2000010c 	.word	0x2000010c
 8003300:	2000006c 	.word	0x2000006c
 8003304:	20000000 	.word	0x20000000

08003308 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if ((!Middle) && ((ms-bounceLast)>bounceDelay)) {
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <EXTI1_IRQHandler+0x40>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00f      	beq.n	800333c <EXTI1_IRQHandler+0x34>
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <EXTI1_IRQHandler+0x44>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <EXTI1_IRQHandler+0x48>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1ad2      	subs	r2, r2, r3
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <EXTI1_IRQHandler+0x4c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d906      	bls.n	800333c <EXTI1_IRQHandler+0x34>
		Middle = 1;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <EXTI1_IRQHandler+0x40>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <EXTI1_IRQHandler+0x44>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <EXTI1_IRQHandler+0x48>)
 800333a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800333c:	2002      	movs	r0, #2
 800333e:	f000 fe45 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000112 	.word	0x20000112
 800334c:	2000010c 	.word	0x2000010c
 8003350:	2000006c 	.word	0x2000006c
 8003354:	20000000 	.word	0x20000000

08003358 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if ((!Up) && ((ms-bounceLast)>bounceDelay)) {
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <EXTI2_IRQHandler+0x40>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00f      	beq.n	800338c <EXTI2_IRQHandler+0x34>
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <EXTI2_IRQHandler+0x44>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <EXTI2_IRQHandler+0x48>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <EXTI2_IRQHandler+0x4c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d906      	bls.n	800338c <EXTI2_IRQHandler+0x34>
		Up = 1;
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <EXTI2_IRQHandler+0x40>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <EXTI2_IRQHandler+0x44>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <EXTI2_IRQHandler+0x48>)
 800338a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800338c:	2004      	movs	r0, #4
 800338e:	f000 fe1d 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000149 	.word	0x20000149
 800339c:	2000010c 	.word	0x2000010c
 80033a0:	2000006c 	.word	0x2000006c
 80033a4:	20000000 	.word	0x20000000

080033a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if ((!Left) && ((ms-bounceLast)>bounceDelay)) {
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <EXTI4_IRQHandler+0x40>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00f      	beq.n	80033dc <EXTI4_IRQHandler+0x34>
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <EXTI4_IRQHandler+0x44>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <EXTI4_IRQHandler+0x48>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <EXTI4_IRQHandler+0x4c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d906      	bls.n	80033dc <EXTI4_IRQHandler+0x34>
		Left = 1;
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <EXTI4_IRQHandler+0x40>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <EXTI4_IRQHandler+0x44>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <EXTI4_IRQHandler+0x48>)
 80033da:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80033dc:	2010      	movs	r0, #16
 80033de:	f000 fdf5 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000110 	.word	0x20000110
 80033ec:	2000010c 	.word	0x2000010c
 80033f0:	2000006c 	.word	0x2000006c
 80033f4:	20000000 	.word	0x20000000

080033f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if ((!Right) && ((ms-bounceLast)>bounceDelay)) {
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <EXTI9_5_IRQHandler+0x40>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00f      	beq.n	800342c <EXTI9_5_IRQHandler+0x34>
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <EXTI9_5_IRQHandler+0x44>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <EXTI9_5_IRQHandler+0x48>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1ad2      	subs	r2, r2, r3
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <EXTI9_5_IRQHandler+0x4c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d906      	bls.n	800342c <EXTI9_5_IRQHandler+0x34>
		Right = 1;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <EXTI9_5_IRQHandler+0x40>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
		bounceLast = ms;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <EXTI9_5_IRQHandler+0x44>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <EXTI9_5_IRQHandler+0x48>)
 800342a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800342c:	2020      	movs	r0, #32
 800342e:	f000 fdcd 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000070 	.word	0x20000070
 800343c:	2000010c 	.word	0x2000010c
 8003440:	2000006c 	.word	0x2000006c
 8003444:	20000000 	.word	0x20000000

08003448 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <USART3_IRQHandler+0x10>)
 800344e:	f002 fbd3 	bl	8005bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000074 	.word	0x20000074

0800345c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003464:	f000 fdb2 	bl	8003fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}

0800346c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003478:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800347a:	e003      	b.n	8003484 <LoopCopyDataInit>

0800347c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800347e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003480:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003482:	3104      	adds	r1, #4

08003484 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003484:	480a      	ldr	r0, [pc, #40]	; (80034b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003488:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800348a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800348c:	d3f6      	bcc.n	800347c <CopyDataInit>
  ldr r2, =_sbss
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003490:	e002      	b.n	8003498 <LoopFillZerobss>

08003492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003494:	f842 3b04 	str.w	r3, [r2], #4

08003498 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800349a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800349c:	d3f9      	bcc.n	8003492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800349e:	f7ff ffe5 	bl	800346c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034a2:	f002 feab 	bl	80061fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034a6:	f7fc fe51 	bl	800014c <main>
  bx lr
 80034aa:	4770      	bx	lr
  ldr r3, =_sidata
 80034ac:	080063dc 	.word	0x080063dc
  ldr r0, =_sdata
 80034b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80034b4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80034b8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80034bc:	2000019c 	.word	0x2000019c

080034c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034c0:	e7fe      	b.n	80034c0 <ADC1_2_IRQHandler>
	...

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_Init+0x28>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_Init+0x28>)
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d4:	2003      	movs	r0, #3
 80034d6:	f000 fb4f 	bl	8003b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034da:	2000      	movs	r0, #0
 80034dc:	f000 f808 	bl	80034f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e0:	f7ff fc26 	bl	8002d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40022000 	.word	0x40022000

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_InitTick+0x54>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_InitTick+0x58>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003506:	fbb3 f3f1 	udiv	r3, r3, r1
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fb67 	bl	8003be2 <HAL_SYSTICK_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00e      	b.n	800353c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d80a      	bhi.n	800353a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003524:	2200      	movs	r2, #0
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f000 fb2f 	bl	8003b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003530:	4a06      	ldr	r2, [pc, #24]	; (800354c <HAL_InitTick+0x5c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000004 	.word	0x20000004
 8003548:	2000000c 	.word	0x2000000c
 800354c:	20000008 	.word	0x20000008

08003550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_IncTick+0x1c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_IncTick+0x20>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a03      	ldr	r2, [pc, #12]	; (8003570 <HAL_IncTick+0x20>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	2000000c 	.word	0x2000000c
 8003570:	20000198 	.word	0x20000198

08003574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b02      	ldr	r3, [pc, #8]	; (8003584 <HAL_GetTick+0x10>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	20000198 	.word	0x20000198

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff fff0 	bl	8003574 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_Delay+0x40>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffe0 	bl	8003574 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	2000000c 	.word	0x2000000c

080035cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0be      	b.n	800376c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fbc2 	bl	8002d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9ab 	bl	800396c <ADC_ConversionStop_Disable>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8099 	bne.w	800375a <HAL_ADC_Init+0x18e>
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 8095 	bne.w	800375a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003638:	f023 0302 	bic.w	r3, r3, #2
 800363c:	f043 0202 	orr.w	r2, r3, #2
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800364c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7b1b      	ldrb	r3, [r3, #12]
 8003652:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003654:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d003      	beq.n	800366e <HAL_ADC_Init+0xa2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_ADC_Init+0xa8>
 800366e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003672:	e000      	b.n	8003676 <HAL_ADC_Init+0xaa>
 8003674:	2300      	movs	r3, #0
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7d1b      	ldrb	r3, [r3, #20]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d119      	bne.n	80036b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7b1b      	ldrb	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	3b01      	subs	r3, #1
 8003692:	035a      	lsls	r2, r3, #13
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	e00b      	b.n	80036b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_ADC_Init+0x1a8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e8:	d003      	beq.n	80036f2 <HAL_ADC_Init+0x126>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d104      	bne.n	80036fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	051b      	lsls	r3, r3, #20
 80036fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	430a      	orrs	r2, r1
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_ADC_Init+0x1ac>)
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d10b      	bne.n	8003738 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003736:	e018      	b.n	800376a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f023 0312 	bic.w	r3, r3, #18
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003758:	e007      	b.n	800376a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	f043 0210 	orr.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	ffe1f7fd 	.word	0xffe1f7fd
 8003778:	ff1f0efe 	.word	0xff1f0efe

0800377c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x20>
 8003798:	2302      	movs	r3, #2
 800379a:	e0dc      	b.n	8003956 <HAL_ADC_ConfigChannel+0x1da>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d81c      	bhi.n	80037e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	3b05      	subs	r3, #5
 80037be:	221f      	movs	r2, #31
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	4019      	ands	r1, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	3b05      	subs	r3, #5
 80037d8:	fa00 f203 	lsl.w	r2, r0, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	635a      	str	r2, [r3, #52]	; 0x34
 80037e4:	e03c      	b.n	8003860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d81c      	bhi.n	8003828 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	3b23      	subs	r3, #35	; 0x23
 8003800:	221f      	movs	r2, #31
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	4019      	ands	r1, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	3b23      	subs	r3, #35	; 0x23
 800381a:	fa00 f203 	lsl.w	r2, r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
 8003826:	e01b      	b.n	8003860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	3b41      	subs	r3, #65	; 0x41
 800383a:	221f      	movs	r2, #31
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	4019      	ands	r1, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	3b41      	subs	r3, #65	; 0x41
 8003854:	fa00 f203 	lsl.w	r2, r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b09      	cmp	r3, #9
 8003866:	d91c      	bls.n	80038a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	3b1e      	subs	r3, #30
 800387a:	2207      	movs	r2, #7
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	4019      	ands	r1, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6898      	ldr	r0, [r3, #8]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	3b1e      	subs	r3, #30
 8003894:	fa00 f203 	lsl.w	r2, r0, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e019      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6919      	ldr	r1, [r3, #16]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	2207      	movs	r2, #7
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	4019      	ands	r1, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6898      	ldr	r0, [r3, #8]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d003      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038e2:	2b11      	cmp	r3, #17
 80038e4:	d132      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_ADC_ConfigChannel+0x1e4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d125      	bne.n	800393c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d126      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800390c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d11a      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_ADC_ConfigChannel+0x1e8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_ADC_ConfigChannel+0x1ec>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9a      	lsrs	r2, r3, #18
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800392c:	e002      	b.n	8003934 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <HAL_ADC_ConfigChannel+0x1b2>
 800393a:	e007      	b.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	40012400 	.word	0x40012400
 8003964:	20000004 	.word	0x20000004
 8003968:	431bde83 	.word	0x431bde83

0800396c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d127      	bne.n	80039d6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003996:	f7ff fded 	bl	8003574 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800399c:	e014      	b.n	80039c8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800399e:	f7ff fde9 	bl	8003574 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d90d      	bls.n	80039c8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f043 0210 	orr.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d0e3      	beq.n	800399e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60d3      	str	r3, [r2, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <__NVIC_GetPriorityGrouping+0x18>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0307 	and.w	r3, r3, #7
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0b      	blt.n	8003a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4906      	ldr	r1, [pc, #24]	; (8003a78 <__NVIC_EnableIRQ+0x34>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf28      	it	cs
 8003aee:	2304      	movcs	r3, #4
 8003af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <NVIC_EncodePriority+0x30>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3b03      	subs	r3, #3
 8003afe:	e000      	b.n	8003b02 <NVIC_EncodePriority+0x32>
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	401a      	ands	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43d9      	mvns	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	4313      	orrs	r3, r2
         );
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b44:	d301      	bcc.n	8003b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00f      	b.n	8003b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <SysTick_Config+0x40>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b52:	210f      	movs	r1, #15
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f7ff ff90 	bl	8003a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <SysTick_Config+0x40>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b62:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <SysTick_Config+0x40>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff2d 	bl	80039e0 <__NVIC_SetPriorityGrouping>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba0:	f7ff ff42 	bl	8003a28 <__NVIC_GetPriorityGrouping>
 8003ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff90 	bl	8003ad0 <NVIC_EncodePriority>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff5f 	bl	8003a7c <__NVIC_SetPriority>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff35 	bl	8003a44 <__NVIC_EnableIRQ>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffa2 	bl	8003b34 <SysTick_Config>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d005      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e051      	b.n	8003cc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020e 	bic.w	r2, r2, #14
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a22      	ldr	r2, [pc, #136]	; (8003ccc <HAL_DMA_Abort_IT+0xd0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d029      	beq.n	8003c9c <HAL_DMA_Abort_IT+0xa0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a20      	ldr	r2, [pc, #128]	; (8003cd0 <HAL_DMA_Abort_IT+0xd4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d022      	beq.n	8003c98 <HAL_DMA_Abort_IT+0x9c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_DMA_Abort_IT+0xd8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01a      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x96>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_DMA_Abort_IT+0xdc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d012      	beq.n	8003c8c <HAL_DMA_Abort_IT+0x90>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_DMA_Abort_IT+0xe0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00a      	beq.n	8003c86 <HAL_DMA_Abort_IT+0x8a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_DMA_Abort_IT+0xe4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d102      	bne.n	8003c80 <HAL_DMA_Abort_IT+0x84>
 8003c7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c7e:	e00e      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c84:	e00b      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c8a:	e008      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	e005      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c96:	e002      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	e000      	b.n	8003c9e <HAL_DMA_Abort_IT+0xa2>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <HAL_DMA_Abort_IT+0xe8>)
 8003ca0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
    } 
  }
  return status;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40020008 	.word	0x40020008
 8003cd0:	4002001c 	.word	0x4002001c
 8003cd4:	40020030 	.word	0x40020030
 8003cd8:	40020044 	.word	0x40020044
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	4002006c 	.word	0x4002006c
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e127      	b.n	8003f4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8116 	bne.w	8003f46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b12      	cmp	r3, #18
 8003d20:	d034      	beq.n	8003d8c <HAL_GPIO_Init+0xa4>
 8003d22:	2b12      	cmp	r3, #18
 8003d24:	d80d      	bhi.n	8003d42 <HAL_GPIO_Init+0x5a>
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d02b      	beq.n	8003d82 <HAL_GPIO_Init+0x9a>
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d804      	bhi.n	8003d38 <HAL_GPIO_Init+0x50>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d031      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d01c      	beq.n	8003d70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d36:	e048      	b.n	8003dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d043      	beq.n	8003dc4 <HAL_GPIO_Init+0xdc>
 8003d3c:	2b11      	cmp	r3, #17
 8003d3e:	d01b      	beq.n	8003d78 <HAL_GPIO_Init+0x90>
          break;
 8003d40:	e043      	b.n	8003dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d42:	4a89      	ldr	r2, [pc, #548]	; (8003f68 <HAL_GPIO_Init+0x280>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d026      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
 8003d48:	4a87      	ldr	r2, [pc, #540]	; (8003f68 <HAL_GPIO_Init+0x280>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d806      	bhi.n	8003d5c <HAL_GPIO_Init+0x74>
 8003d4e:	4a87      	ldr	r2, [pc, #540]	; (8003f6c <HAL_GPIO_Init+0x284>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d020      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
 8003d54:	4a86      	ldr	r2, [pc, #536]	; (8003f70 <HAL_GPIO_Init+0x288>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
          break;
 8003d5a:	e036      	b.n	8003dca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d5c:	4a85      	ldr	r2, [pc, #532]	; (8003f74 <HAL_GPIO_Init+0x28c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d019      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
 8003d62:	4a85      	ldr	r2, [pc, #532]	; (8003f78 <HAL_GPIO_Init+0x290>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d016      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
 8003d68:	4a84      	ldr	r2, [pc, #528]	; (8003f7c <HAL_GPIO_Init+0x294>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_GPIO_Init+0xae>
          break;
 8003d6e:	e02c      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	623b      	str	r3, [r7, #32]
          break;
 8003d76:	e028      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	623b      	str	r3, [r7, #32]
          break;
 8003d80:	e023      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	3308      	adds	r3, #8
 8003d88:	623b      	str	r3, [r7, #32]
          break;
 8003d8a:	e01e      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	330c      	adds	r3, #12
 8003d92:	623b      	str	r3, [r7, #32]
          break;
 8003d94:	e019      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	623b      	str	r3, [r7, #32]
          break;
 8003da2:	e012      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dac:	2308      	movs	r3, #8
 8003dae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	611a      	str	r2, [r3, #16]
          break;
 8003db6:	e008      	b.n	8003dca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db8:	2308      	movs	r3, #8
 8003dba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	615a      	str	r2, [r3, #20]
          break;
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
          break;
 8003dc8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2bff      	cmp	r3, #255	; 0xff
 8003dce:	d801      	bhi.n	8003dd4 <HAL_GPIO_Init+0xec>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	e001      	b.n	8003dd8 <HAL_GPIO_Init+0xf0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2bff      	cmp	r3, #255	; 0xff
 8003dde:	d802      	bhi.n	8003de6 <HAL_GPIO_Init+0xfe>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_Init+0x104>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3b08      	subs	r3, #8
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	210f      	movs	r1, #15
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	6a39      	ldr	r1, [r7, #32]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	431a      	orrs	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8096 	beq.w	8003f46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e1a:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_GPIO_Init+0x298>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <HAL_GPIO_Init+0x298>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6193      	str	r3, [r2, #24]
 8003e26:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_GPIO_Init+0x298>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e32:	4a54      	ldr	r2, [pc, #336]	; (8003f84 <HAL_GPIO_Init+0x29c>)
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <HAL_GPIO_Init+0x2a0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x19e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_GPIO_Init+0x2a4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x19a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_GPIO_Init+0x2a8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x196>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2ac>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x192>
 8003e76:	2303      	movs	r3, #3
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x1a0>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x1a0>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x1a0>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x1a0>
 8003e86:	2300      	movs	r3, #0
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	f002 0203 	and.w	r2, r2, #3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4093      	lsls	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e98:	493a      	ldr	r1, [pc, #232]	; (8003f84 <HAL_GPIO_Init+0x29c>)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4938      	ldr	r1, [pc, #224]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
 8003ebe:	e006      	b.n	8003ece <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ec0:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4933      	ldr	r1, [pc, #204]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	492e      	ldr	r1, [pc, #184]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e006      	b.n	8003ef6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	4929      	ldr	r1, [pc, #164]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	4924      	ldr	r1, [pc, #144]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
 8003f0e:	e006      	b.n	8003f1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	491f      	ldr	r1, [pc, #124]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	491a      	ldr	r1, [pc, #104]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60cb      	str	r3, [r1, #12]
 8003f36:	e006      	b.n	8003f46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	4915      	ldr	r1, [pc, #84]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	3301      	adds	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f aed0 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	372c      	adds	r7, #44	; 0x2c
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	10210000 	.word	0x10210000
 8003f6c:	10110000 	.word	0x10110000
 8003f70:	10120000 	.word	0x10120000
 8003f74:	10310000 	.word	0x10310000
 8003f78:	10320000 	.word	0x10320000
 8003f7c:	10220000 	.word	0x10220000
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40010800 	.word	0x40010800
 8003f8c:	40010c00 	.word	0x40010c00
 8003f90:	40011000 	.word	0x40011000
 8003f94:	40011400 	.word	0x40011400
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fb8:	e003      	b.n	8003fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	041a      	lsls	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f806 	bl	8003ffc <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40010400 	.word	0x40010400

08003ffc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e11f      	b.n	8004262 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fee8 	bl	8002e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004074:	f001 fb90 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8004078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4a7b      	ldr	r2, [pc, #492]	; (800426c <HAL_I2C_Init+0x25c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d807      	bhi.n	8004094 <HAL_I2C_Init+0x84>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a7a      	ldr	r2, [pc, #488]	; (8004270 <HAL_I2C_Init+0x260>)
 8004088:	4293      	cmp	r3, r2
 800408a:	bf94      	ite	ls
 800408c:	2301      	movls	r3, #1
 800408e:	2300      	movhi	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e006      	b.n	80040a2 <HAL_I2C_Init+0x92>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a77      	ldr	r2, [pc, #476]	; (8004274 <HAL_I2C_Init+0x264>)
 8004098:	4293      	cmp	r3, r2
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0db      	b.n	8004262 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a72      	ldr	r2, [pc, #456]	; (8004278 <HAL_I2C_Init+0x268>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a64      	ldr	r2, [pc, #400]	; (800426c <HAL_I2C_Init+0x25c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d802      	bhi.n	80040e4 <HAL_I2C_Init+0xd4>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3301      	adds	r3, #1
 80040e2:	e009      	b.n	80040f8 <HAL_I2C_Init+0xe8>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_I2C_Init+0x26c>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	3301      	adds	r3, #1
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800410a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4956      	ldr	r1, [pc, #344]	; (800426c <HAL_I2C_Init+0x25c>)
 8004114:	428b      	cmp	r3, r1
 8004116:	d80d      	bhi.n	8004134 <HAL_I2C_Init+0x124>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1e59      	subs	r1, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fbb1 f3f3 	udiv	r3, r1, r3
 8004126:	3301      	adds	r3, #1
 8004128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412c:	2b04      	cmp	r3, #4
 800412e:	bf38      	it	cc
 8004130:	2304      	movcc	r3, #4
 8004132:	e04f      	b.n	80041d4 <HAL_I2C_Init+0x1c4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <HAL_I2C_Init+0x150>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e012      	b.n	8004186 <HAL_I2C_Init+0x176>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x17e>
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_I2C_Init+0x1c4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_I2C_Init+0x1a4>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e58      	subs	r0, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b2:	e00f      	b.n	80041d4 <HAL_I2C_Init+0x1c4>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e58      	subs	r0, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	0099      	lsls	r1, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6911      	ldr	r1, [r2, #16]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	000186a0 	.word	0x000186a0
 8004270:	001e847f 	.word	0x001e847f
 8004274:	003d08ff 	.word	0x003d08ff
 8004278:	431bde83 	.word	0x431bde83
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4603      	mov	r3, r0
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	460b      	mov	r3, r1
 8004294:	813b      	strh	r3, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800429a:	f7ff f96b 	bl	8003574 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	f040 80d9 	bne.w	8004460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2319      	movs	r3, #25
 80042b4:	2201      	movs	r2, #1
 80042b6:	496d      	ldr	r1, [pc, #436]	; (800446c <HAL_I2C_Mem_Write+0x1ec>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fcbb 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0cc      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Mem_Write+0x56>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0c5      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d007      	beq.n	80042fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2221      	movs	r2, #33	; 0x21
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <HAL_I2C_Mem_Write+0x1f0>)
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800433e:	88f8      	ldrh	r0, [r7, #6]
 8004340:	893a      	ldrh	r2, [r7, #8]
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4603      	mov	r3, r0
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 faf2 	bl	8004938 <I2C_RequestMemoryWrite>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d052      	beq.n	8004400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e081      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fd3c 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b04      	cmp	r3, #4
 8004374:	d107      	bne.n	8004386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e06b      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_I2C_Mem_Write+0x180>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1aa      	bne.n	800435e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fd28 	bl	8004e62 <I2C_WaitOnBTFFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e016      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	00100002 	.word	0x00100002
 8004470:	ffff0000 	.word	0xffff0000

08004474 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	; 0x30
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004492:	f7ff f86f 	bl	8003574 <HAL_GetTick>
 8004496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	f040 823d 	bne.w	8004920 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2319      	movs	r3, #25
 80044ac:	2201      	movs	r2, #1
 80044ae:	4981      	ldr	r1, [pc, #516]	; (80046b4 <HAL_I2C_Mem_Read+0x240>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fbbf 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
 80044be:	e230      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Mem_Read+0x5a>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e229      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d007      	beq.n	80044f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2222      	movs	r2, #34	; 0x22
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a61      	ldr	r2, [pc, #388]	; (80046b8 <HAL_I2C_Mem_Read+0x244>)
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004536:	88f8      	ldrh	r0, [r7, #6]
 8004538:	893a      	ldrh	r2, [r7, #8]
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa8c 	bl	8004a64 <I2C_RequestMemoryRead>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1e5      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d113      	bne.n	8004586 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e1b9      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b01      	cmp	r3, #1
 800458c:	d11d      	bne.n	80045ca <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800459e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045c6:	b662      	cpsie	i
 80045c8:	e197      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d11d      	bne.n	800460e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045e2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800460a:	b662      	cpsie	i
 800460c:	e175      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800461c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004634:	e161      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b03      	cmp	r3, #3
 800463c:	f200 811a 	bhi.w	8004874 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b01      	cmp	r3, #1
 8004646:	d123      	bne.n	8004690 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fc49 	bl	8004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e162      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800468e:	e134      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	2b02      	cmp	r3, #2
 8004696:	d150      	bne.n	800473a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	2200      	movs	r2, #0
 80046a0:	4906      	ldr	r1, [pc, #24]	; (80046bc <HAL_I2C_Mem_Read+0x248>)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fac6 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e137      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
 80046b2:	bf00      	nop
 80046b4:	00100002 	.word	0x00100002
 80046b8:	ffff0000 	.word	0xffff0000
 80046bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046c0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004704:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004738:	e0df      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2200      	movs	r2, #0
 8004742:	497a      	ldr	r1, [pc, #488]	; (800492c <HAL_I2C_Mem_Read+0x4b8>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fa75 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0e6      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004764:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004798:	4b65      	ldr	r3, [pc, #404]	; (8004930 <HAL_I2C_Mem_Read+0x4bc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	4a65      	ldr	r2, [pc, #404]	; (8004934 <HAL_I2C_Mem_Read+0x4c0>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	0a1a      	lsrs	r2, r3, #8
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	00da      	lsls	r2, r3, #3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d117      	bne.n	80047ee <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047e0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e099      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d1da      	bne.n	80047b2 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800483e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004872:	e042      	b.n	80048fa <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fb33 	bl	8004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e04c      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d118      	bne.n	80048fa <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f47f ae99 	bne.w	8004636 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00010004 	.word	0x00010004
 8004930:	20000004 	.word	0x20000004
 8004934:	14f8b589 	.word	0x14f8b589

08004938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	2200      	movs	r2, #0
 800496a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f960 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004988:	d103      	bne.n	8004992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e05f      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	492d      	ldr	r1, [pc, #180]	; (8004a60 <I2C_RequestMemoryWrite+0x128>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f998 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04c      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fa02 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02b      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e021      	b.n	8004a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9dc 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d107      	bne.n	8004a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e005      	b.n	8004a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	00010002 	.word	0x00010002

08004a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8c2 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d103      	bne.n	8004ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0aa      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	4952      	ldr	r1, [pc, #328]	; (8004c30 <I2C_RequestMemoryRead+0x1cc>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f8fa 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e097      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f964 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d107      	bne.n	8004b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e076      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	611a      	str	r2, [r3, #16]
 8004b4a:	e021      	b.n	8004b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	6a39      	ldr	r1, [r7, #32]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f93e 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d107      	bne.n	8004b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e050      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	6a39      	ldr	r1, [r7, #32]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f923 	bl	8004de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d107      	bne.n	8004bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e035      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f82b 	bl	8004c34 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf2:	d103      	bne.n	8004bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e013      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c00:	897b      	ldrh	r3, [r7, #10]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	4906      	ldr	r1, [pc, #24]	; (8004c30 <I2C_RequestMemoryRead+0x1cc>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f863 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	00010002 	.word	0x00010002

08004c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c44:	e025      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d021      	beq.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fe fc91 	bl	8003574 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e023      	b.n	8004cda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10d      	bne.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	e00c      	b.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d0b6      	beq.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf0:	e051      	b.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d123      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e046      	b.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d021      	beq.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fe fc0f 	bl	8003574 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e020      	b.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10c      	bne.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	43da      	mvns	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e00b      	b.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d18d      	bne.n	8004cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f8ce 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e02d      	b.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d021      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fe fbb5 	bl	8003574 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d116      	bne.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d1ca      	bne.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e6e:	e02d      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f88d 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e02d      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d021      	beq.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e88:	f7fe fb74 	bl	8003574 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d116      	bne.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e007      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d1ca      	bne.n	8004e70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef0:	e042      	b.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d119      	bne.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0210 	mvn.w	r2, #16
 8004f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e029      	b.n	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f34:	f7fe fb1e 	bl	8003574 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e007      	b.n	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d1b5      	bne.n	8004ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d11b      	bne.n	8004fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e26c      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8087 	beq.w	800511a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800500c:	4b92      	ldr	r3, [pc, #584]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b04      	cmp	r3, #4
 8005016:	d00c      	beq.n	8005032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005018:	4b8f      	ldr	r3, [pc, #572]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d112      	bne.n	800504a <HAL_RCC_OscConfig+0x5e>
 8005024:	4b8c      	ldr	r3, [pc, #560]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d10b      	bne.n	800504a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005032:	4b89      	ldr	r3, [pc, #548]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d06c      	beq.n	8005118 <HAL_RCC_OscConfig+0x12c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d168      	bne.n	8005118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e246      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005052:	d106      	bne.n	8005062 <HAL_RCC_OscConfig+0x76>
 8005054:	4b80      	ldr	r3, [pc, #512]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7f      	ldr	r2, [pc, #508]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	e02e      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x98>
 800506a:	4b7b      	ldr	r3, [pc, #492]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b78      	ldr	r3, [pc, #480]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a77      	ldr	r2, [pc, #476]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800507c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e01d      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0xbc>
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a71      	ldr	r2, [pc, #452]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b6f      	ldr	r3, [pc, #444]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6e      	ldr	r2, [pc, #440]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 80050a8:	4b6b      	ldr	r3, [pc, #428]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a67      	ldr	r2, [pc, #412]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe fa54 	bl	8003574 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe fa50 	bl	8003574 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e1fa      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0xe4>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe fa40 	bl	8003574 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe fa3c 	bl	8003574 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1e6      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x10c>
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005132:	4b49      	ldr	r3, [pc, #292]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b08      	cmp	r3, #8
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x18c>
 800513e:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x176>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1ba      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4939      	ldr	r1, [pc, #228]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b36      	ldr	r3, [pc, #216]	; (800525c <HAL_RCC_OscConfig+0x270>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fe f9f5 	bl	8003574 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518e:	f7fe f9f1 	bl	8003574 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e19b      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4927      	ldr	r1, [pc, #156]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <HAL_RCC_OscConfig+0x270>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fe f9d4 	bl	8003574 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fe f9d0 	bl	8003574 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e17a      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d03a      	beq.n	8005270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005208:	f7fe f9b4 	bl	8003574 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005210:	f7fe f9b0 	bl	8003574 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e15a      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800522e:	2001      	movs	r0, #1
 8005230:	f000 fada 	bl	80057e8 <RCC_Delay>
 8005234:	e01c      	b.n	8005270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523c:	f7fe f99a 	bl	8003574 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005242:	e00f      	b.n	8005264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005244:	f7fe f996 	bl	8003574 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d908      	bls.n	8005264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e140      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	42420000 	.word	0x42420000
 8005260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b9e      	ldr	r3, [pc, #632]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e9      	bne.n	8005244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a6 	beq.w	80053ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b97      	ldr	r3, [pc, #604]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	4b94      	ldr	r3, [pc, #592]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4a93      	ldr	r2, [pc, #588]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	61d3      	str	r3, [r2, #28]
 800529a:	4b91      	ldr	r3, [pc, #580]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	4b8e      	ldr	r3, [pc, #568]	; (80054e4 <HAL_RCC_OscConfig+0x4f8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d118      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b6:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <HAL_RCC_OscConfig+0x4f8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a8a      	ldr	r2, [pc, #552]	; (80054e4 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fe f957 	bl	8003574 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fe f953 	bl	8003574 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b64      	cmp	r3, #100	; 0x64
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0fd      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b81      	ldr	r3, [pc, #516]	; (80054e4 <HAL_RCC_OscConfig+0x4f8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_OscConfig+0x312>
 80052f0:	4b7b      	ldr	r3, [pc, #492]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4a7a      	ldr	r2, [pc, #488]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6213      	str	r3, [r2, #32]
 80052fc:	e02d      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x334>
 8005306:	4b76      	ldr	r3, [pc, #472]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4a75      	ldr	r2, [pc, #468]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6213      	str	r3, [r2, #32]
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4a72      	ldr	r2, [pc, #456]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6213      	str	r3, [r2, #32]
 800531e:	e01c      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b05      	cmp	r3, #5
 8005326:	d10c      	bne.n	8005342 <HAL_RCC_OscConfig+0x356>
 8005328:	4b6d      	ldr	r3, [pc, #436]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	4a6c      	ldr	r2, [pc, #432]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	6213      	str	r3, [r2, #32]
 8005334:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4a69      	ldr	r2, [pc, #420]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6213      	str	r3, [r2, #32]
 8005340:	e00b      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 8005342:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	4a66      	ldr	r2, [pc, #408]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6213      	str	r3, [r2, #32]
 800534e:	4b64      	ldr	r3, [pc, #400]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4a63      	ldr	r2, [pc, #396]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d015      	beq.n	800538e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005362:	f7fe f907 	bl	8003574 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fe f903 	bl	8003574 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0ab      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005380:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ee      	beq.n	800536a <HAL_RCC_OscConfig+0x37e>
 800538c:	e014      	b.n	80053b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538e:	f7fe f8f1 	bl	8003574 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe f8ed 	bl	8003574 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e095      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ac:	4b4c      	ldr	r3, [pc, #304]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053be:	4b48      	ldr	r3, [pc, #288]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4a47      	ldr	r2, [pc, #284]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8081 	beq.w	80054d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d4:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d061      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d146      	bne.n	8005476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <HAL_RCC_OscConfig+0x4fc>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fe f8c1 	bl	8003574 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fe f8bd 	bl	8003574 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e067      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800541e:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005430:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a19      	ldr	r1, [r3, #32]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	430b      	orrs	r3, r1
 8005442:	4927      	ldr	r1, [pc, #156]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <HAL_RCC_OscConfig+0x4fc>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fe f891 	bl	8003574 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005456:	f7fe f88d 	bl	8003574 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e037      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005468:	4b1d      	ldr	r3, [pc, #116]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x46a>
 8005474:	e02f      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <HAL_RCC_OscConfig+0x4fc>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fe f87a 	bl	8003574 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fe f876 	bl	8003574 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e020      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x498>
 80054a2:	e018      	b.n	80054d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e013      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCC_OscConfig+0x4f4>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d106      	bne.n	80054d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40007000 	.word	0x40007000
 80054e8:	42420060 	.word	0x42420060

080054ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0d0      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d910      	bls.n	8005530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b67      	ldr	r3, [pc, #412]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0207 	bic.w	r2, r3, #7
 8005516:	4965      	ldr	r1, [pc, #404]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	4b63      	ldr	r3, [pc, #396]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0b8      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a58      	ldr	r2, [pc, #352]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005560:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a52      	ldr	r2, [pc, #328]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800556a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	494d      	ldr	r1, [pc, #308]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d040      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d115      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e07f      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e073      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06b      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ca:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4936      	ldr	r1, [pc, #216]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055dc:	f7fd ffca 	bl	8003574 <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fd ffc6 	bl	8003574 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e053      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b27      	ldr	r3, [pc, #156]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d210      	bcs.n	800563c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	4922      	ldr	r1, [pc, #136]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e032      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005648:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4916      	ldr	r1, [pc, #88]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800567a:	f000 f821 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 800567e:	4601      	mov	r1, r0
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	fa21 f303 	lsr.w	r3, r1, r3
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_ClockConfig+0x1d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fd ff28 	bl	80034f0 <HAL_InitTick>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40021000 	.word	0x40021000
 80056b4:	080063bc 	.word	0x080063bc
 80056b8:	20000004 	.word	0x20000004
 80056bc:	20000008 	.word	0x20000008

080056c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c0:	b490      	push	{r4, r7}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056c6:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056c8:	1d3c      	adds	r4, r7, #4
 80056ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x40>
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x46>
 80056fe:	e02d      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005702:	623b      	str	r3, [r7, #32]
      break;
 8005704:	e02d      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	0c9b      	lsrs	r3, r3, #18
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005712:	4413      	add	r3, r2
 8005714:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005718:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0c5b      	lsrs	r3, r3, #17
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005732:	4413      	add	r3, r2
 8005734:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005738:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4a0f      	ldr	r2, [pc, #60]	; (800577c <HAL_RCC_GetSysClockFreq+0xbc>)
 800573e:	fb02 f203 	mul.w	r2, r2, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e004      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	623b      	str	r3, [r7, #32]
      break;
 800575a:	e002      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <HAL_RCC_GetSysClockFreq+0xbc>)
 800575e:	623b      	str	r3, [r7, #32]
      break;
 8005760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005762:	6a3b      	ldr	r3, [r7, #32]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bc90      	pop	{r4, r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	080063a8 	.word	0x080063a8
 8005774:	080063b8 	.word	0x080063b8
 8005778:	40021000 	.word	0x40021000
 800577c:	007a1200 	.word	0x007a1200
 8005780:	003d0900 	.word	0x003d0900

08005784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <HAL_RCC_GetHCLKFreq+0x10>)
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	20000004 	.word	0x20000004

08005798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800579c:	f7ff fff2 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057a0:	4601      	mov	r1, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4a03      	ldr	r2, [pc, #12]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ae:	5cd3      	ldrb	r3, [r2, r3]
 80057b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000
 80057bc:	080063cc 	.word	0x080063cc

080057c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c4:	f7ff ffde 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057c8:	4601      	mov	r1, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	0adb      	lsrs	r3, r3, #11
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4a03      	ldr	r2, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d6:	5cd3      	ldrb	r3, [r2, r3]
 80057d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000
 80057e4:	080063cc 	.word	0x080063cc

080057e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <RCC_Delay+0x34>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <RCC_Delay+0x38>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005804:	bf00      	nop
  }
  while (Delay --);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1e5a      	subs	r2, r3, #1
 800580a:	60fa      	str	r2, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f9      	bne.n	8005804 <RCC_Delay+0x1c>
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000004 	.word	0x20000004
 8005820:	10624dd3 	.word	0x10624dd3

08005824 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d07d      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005844:	4b4f      	ldr	r3, [pc, #316]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10d      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005850:	4b4c      	ldr	r3, [pc, #304]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4a4b      	ldr	r2, [pc, #300]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585a:	61d3      	str	r3, [r2, #28]
 800585c:	4b49      	ldr	r3, [pc, #292]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586c:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d118      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005878:	4b43      	ldr	r3, [pc, #268]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a42      	ldr	r2, [pc, #264]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800587e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005884:	f7fd fe76 	bl	8003574 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	e008      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588c:	f7fd fe72 	bl	8003574 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e06d      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	4b3a      	ldr	r3, [pc, #232]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058aa:	4b36      	ldr	r3, [pc, #216]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d02e      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d027      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c8:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d2:	4b2e      	ldr	r3, [pc, #184]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058d8:	4b2c      	ldr	r3, [pc, #176]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058de:	4a29      	ldr	r2, [pc, #164]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d014      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7fd fe41 	bl	8003574 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f4:	e00a      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fd fe3d 	bl	8003574 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e036      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ee      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4917      	ldr	r1, [pc, #92]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	4313      	orrs	r3, r2
 8005928:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005948:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	490b      	ldr	r1, [pc, #44]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4904      	ldr	r1, [pc, #16]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005974:	4313      	orrs	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	40007000 	.word	0x40007000
 800598c:	42420440 	.word	0x42420440

08005990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e03f      	b.n	8005a22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fd fa66 	bl	8002e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	; 0x24
 80059c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb83 	bl	80060e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08a      	sub	sp, #40	; 0x28
 8005a2e:	af02      	add	r7, sp, #8
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d17c      	bne.n	8005b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit+0x2c>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e075      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Transmit+0x3e>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e06e      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a7e:	f7fd fd79 	bl	8003574 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d108      	bne.n	8005aac <HAL_UART_Transmit+0x82>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e003      	b.n	8005ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005abc:	e02a      	b.n	8005b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f9a7 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e036      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3302      	adds	r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e007      	b.n	8005b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1cf      	bne.n	8005abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2140      	movs	r1, #64	; 0x40
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f977 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d140      	bne.n	8005bea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Receive_IT+0x26>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e039      	b.n	8005bec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Receive_IT+0x38>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e032      	b.n	8005bec <HAL_UART_Receive_IT+0x9e>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2222      	movs	r2, #34	; 0x22
 8005baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0220 	orr.w	r2, r2, #32
 8005be4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
	...

08005bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x52>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9cc 	bl	8005fe0 <UART_Receive_IT>
      return;
 8005c48:	e0d1      	b.n	8005dee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80b0 	beq.w	8005db2 <HAL_UART_IRQHandler+0x1ba>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_UART_IRQHandler+0x70>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80a5 	beq.w	8005db2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_UART_IRQHandler+0x90>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	f043 0201 	orr.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xb0>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	f043 0202 	orr.w	r2, r3, #2
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xd0>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xfa>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_UART_IRQHandler+0xee>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	f043 0208 	orr.w	r2, r3, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d078      	beq.n	8005dec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <HAL_UART_IRQHandler+0x11c>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f966 	bl	8005fe0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_UART_IRQHandler+0x144>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d031      	beq.n	8005da0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8b7 	bl	8005eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d023      	beq.n	8005d98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <HAL_UART_IRQHandler+0x1fc>)
 8005d6e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd ff41 	bl	8003bfc <HAL_DMA_Abort_IT>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8e:	e00e      	b.n	8005dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f83a 	bl	8005e0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d96:	e00a      	b.n	8005dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f836 	bl	8005e0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9e:	e006      	b.n	8005dae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f832 	bl	8005e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005dac:	e01e      	b.n	8005dec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dae:	bf00      	nop
    return;
 8005db0:	e01c      	b.n	8005dec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x1d6>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f8a3 	bl	8005f12 <UART_Transmit_IT>
    return;
 8005dcc:	e00f      	b.n	8005dee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_UART_IRQHandler+0x1f6>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8e4 	bl	8005fb0 <UART_EndTransmit_IT>
    return;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <HAL_UART_IRQHandler+0x1f6>
    return;
 8005dec:	bf00      	nop
  }
}
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	08005eeb 	.word	0x08005eeb

08005df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr

08005e0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2c:	e02c      	b.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d028      	beq.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3c:	f7fd fb9a 	bl	8003574 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d21d      	bcs.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e00f      	b.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d0c3      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff ff80 	bl	8005e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b21      	cmp	r3, #33	; 0x21
 8005f24:	d13e      	bne.n	8005fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d114      	bne.n	8005f5a <UART_Transmit_IT+0x48>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d110      	bne.n	8005f5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	621a      	str	r2, [r3, #32]
 8005f58:	e008      	b.n	8005f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6211      	str	r1, [r2, #32]
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff11 	bl	8005df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b22      	cmp	r3, #34	; 0x22
 8005ff2:	d170      	bne.n	80060d6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffc:	d117      	bne.n	800602e <UART_Receive_IT+0x4e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d113      	bne.n	800602e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	b29a      	uxth	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
 800602c:	e026      	b.n	800607c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d007      	beq.n	8006052 <UART_Receive_IT+0x72>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <UART_Receive_IT+0x80>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e008      	b.n	8006072 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4619      	mov	r1, r3
 800608a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800608c:	2b00      	cmp	r3, #0
 800608e:	d120      	bne.n	80060d2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0220 	bic.w	r2, r2, #32
 800609e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7fc fe15 	bl	8002cf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e002      	b.n	80060d8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e000      	b.n	80060d8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
  }
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800611a:	f023 030c 	bic.w	r3, r3, #12
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	430b      	orrs	r3, r1
 8006126:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2c      	ldr	r2, [pc, #176]	; (80061f4 <UART_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7ff fb3a 	bl	80057c0 <HAL_RCC_GetPCLK2Freq>
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	e002      	b.n	8006156 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006150:	f7ff fb22 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8006154:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009a      	lsls	r2, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <UART_SetConfig+0x118>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	0119      	lsls	r1, r3, #4
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009a      	lsls	r2, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	fbb2 f2f3 	udiv	r2, r2, r3
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <UART_SetConfig+0x118>)
 800618e:	fba3 0302 	umull	r0, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2064      	movs	r0, #100	; 0x64
 8006196:	fb00 f303 	mul.w	r3, r0, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <UART_SetConfig+0x118>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ac:	4419      	add	r1, r3
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009a      	lsls	r2, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <UART_SetConfig+0x118>)
 80061c6:	fba3 0302 	umull	r0, r3, r3, r2
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	2064      	movs	r0, #100	; 0x64
 80061ce:	fb00 f303 	mul.w	r3, r0, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	3332      	adds	r3, #50	; 0x32
 80061d8:	4a07      	ldr	r2, [pc, #28]	; (80061f8 <UART_SetConfig+0x118>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	440a      	add	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40013800 	.word	0x40013800
 80061f8:	51eb851f 	.word	0x51eb851f

080061fc <__libc_init_array>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	2500      	movs	r5, #0
 8006200:	4e0c      	ldr	r6, [pc, #48]	; (8006234 <__libc_init_array+0x38>)
 8006202:	4c0d      	ldr	r4, [pc, #52]	; (8006238 <__libc_init_array+0x3c>)
 8006204:	1ba4      	subs	r4, r4, r6
 8006206:	10a4      	asrs	r4, r4, #2
 8006208:	42a5      	cmp	r5, r4
 800620a:	d109      	bne.n	8006220 <__libc_init_array+0x24>
 800620c:	f000 f822 	bl	8006254 <_init>
 8006210:	2500      	movs	r5, #0
 8006212:	4e0a      	ldr	r6, [pc, #40]	; (800623c <__libc_init_array+0x40>)
 8006214:	4c0a      	ldr	r4, [pc, #40]	; (8006240 <__libc_init_array+0x44>)
 8006216:	1ba4      	subs	r4, r4, r6
 8006218:	10a4      	asrs	r4, r4, #2
 800621a:	42a5      	cmp	r5, r4
 800621c:	d105      	bne.n	800622a <__libc_init_array+0x2e>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006224:	4798      	blx	r3
 8006226:	3501      	adds	r5, #1
 8006228:	e7ee      	b.n	8006208 <__libc_init_array+0xc>
 800622a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800622e:	4798      	blx	r3
 8006230:	3501      	adds	r5, #1
 8006232:	e7f2      	b.n	800621a <__libc_init_array+0x1e>
 8006234:	080063d4 	.word	0x080063d4
 8006238:	080063d4 	.word	0x080063d4
 800623c:	080063d4 	.word	0x080063d4
 8006240:	080063d8 	.word	0x080063d8

08006244 <memset>:
 8006244:	4603      	mov	r3, r0
 8006246:	4402      	add	r2, r0
 8006248:	4293      	cmp	r3, r2
 800624a:	d100      	bne.n	800624e <memset+0xa>
 800624c:	4770      	bx	lr
 800624e:	f803 1b01 	strb.w	r1, [r3], #1
 8006252:	e7f9      	b.n	8006248 <memset+0x4>

08006254 <_init>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr

08006260 <_fini>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr
